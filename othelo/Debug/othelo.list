
othelo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c81c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033dc  0800ca1c  0800ca1c  0001ca1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdf8  0800fdf8  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdf8  0800fdf8  0001fdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe00  0800fe00  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe00  0800fe00  0001fe00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe04  0800fe04  0001fe04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800fe08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b10  200000e8  0800fef0  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf8  0800fef0  00020bf8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025f4b  00000000  00000000  00020116  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000467a  00000000  00000000  00046061  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001da0  00000000  00000000  0004a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b68  00000000  00000000  0004c480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003177f  00000000  00000000  0004dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019a39  00000000  00000000  0007f767  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001295dd  00000000  00000000  000991a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c277d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ffc  00000000  00000000  001c27f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000e8 	.word	0x200000e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ca04 	.word	0x0800ca04

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000ec 	.word	0x200000ec
 800023c:	0800ca04 	.word	0x0800ca04

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f90d 	bl	800080c <ft6x06_GetInstance>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2bff      	cmp	r3, #255	; 0xff
 80005fa:	d10e      	bne.n	800061a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f905 	bl	800080c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d806      	bhi.n	800061a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	88fa      	ldrh	r2, [r7, #6]
 8000610:	b2d1      	uxtb	r1, r2
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <ft6x06_Init+0x44>)
 8000614:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000616:	f000 fd1f 	bl	8001058 <TS_IO_Init>
    }
  }
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000104 	.word	0x20000104

08000628 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000648:	f000 fd06 	bl	8001058 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	21a8      	movs	r1, #168	; 0xa8
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fd24 	bl	80010a0 <TS_IO_Read>
 8000658:	4603      	mov	r3, r0
 800065a:	b29b      	uxth	r3, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f8bc 	bl	80007ee <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f88d 	bl	8000798 <ft6x06_TS_DisableIT>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fcff 	bl	80010a0 <TS_IO_Read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d901      	bls.n	80006be <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	b2db      	uxtb	r3, r3
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000108 	.word	0x20000108

080006dc <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f0:	789a      	ldrb	r2, [r3, #2]
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d234      	bcs.n	8000764 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <ft6x06_TS_GetXY+0x2c>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d003      	beq.n	800070e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000706:	e005      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000708:	2303      	movs	r3, #3
 800070a:	75fb      	strb	r3, [r7, #23]
      break;
 800070c:	e002      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800070e:	2309      	movs	r3, #9
 8000710:	75fb      	strb	r3, [r7, #23]
      break;
 8000712:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	f107 0210 	add.w	r2, r7, #16
 800071c:	7df9      	ldrb	r1, [r7, #23]
 800071e:	2304      	movs	r3, #4
 8000720:	f000 fcdc 	bl	80010dc <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000724:	7c3b      	ldrb	r3, [r7, #16]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21b      	sxth	r3, r3
 800072a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800072e:	b21a      	sxth	r2, r3
 8000730:	7c7b      	ldrb	r3, [r7, #17]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29a      	uxth	r2, r3
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800073e:	7cbb      	ldrb	r3, [r7, #18]
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	b21b      	sxth	r3, r3
 8000744:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000748:	b21a      	sxth	r2, r3
 800074a:	7cfb      	ldrb	r3, [r7, #19]
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b21b      	sxth	r3, r3
 8000752:	b29a      	uxth	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <ft6x06_TS_GetXY+0x90>)
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <ft6x06_TS_GetXY+0x90>)
 8000762:	709a      	strb	r2, [r3, #2]
  }
}
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000108 	.word	0x20000108

08000770 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	21a4      	movs	r1, #164	; 0xa4
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fc6e 	bl	800106c <TS_IO_Write>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	21a4      	movs	r1, #164	; 0xa4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fc5a 	bl	800106c <TS_IO_Write>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80007fc:	68fb      	ldr	r3, [r7, #12]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e00b      	b.n	8000838 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <ft6x06_GetInstance+0x40>)
 8000824:	5cd3      	ldrb	r3, [r2, r3]
 8000826:	b29b      	uxth	r3, r3
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	429a      	cmp	r2, r3
 800082c:	d101      	bne.n	8000832 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	e006      	b.n	8000840 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3301      	adds	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d9f0      	bls.n	8000820 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800083e:	23ff      	movs	r3, #255	; 0xff
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	20000104 	.word	0x20000104

08000850 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800085a:	49be      	ldr	r1, [pc, #760]	; (8000b54 <OTM8009A_Init+0x304>)
 800085c:	2000      	movs	r0, #0
 800085e:	f001 faef 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000862:	49bd      	ldr	r1, [pc, #756]	; (8000b58 <OTM8009A_Init+0x308>)
 8000864:	2003      	movs	r0, #3
 8000866:	f001 faeb 	bl	8001e40 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800086a:	49bc      	ldr	r1, [pc, #752]	; (8000b5c <OTM8009A_Init+0x30c>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fae7 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000872:	49bb      	ldr	r1, [pc, #748]	; (8000b60 <OTM8009A_Init+0x310>)
 8000874:	2002      	movs	r0, #2
 8000876:	f001 fae3 	bl	8001e40 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800087a:	49b8      	ldr	r1, [pc, #736]	; (8000b5c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fadf 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000882:	49b8      	ldr	r1, [pc, #736]	; (8000b64 <OTM8009A_Init+0x314>)
 8000884:	2000      	movs	r0, #0
 8000886:	f001 fadb 	bl	8001e40 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800088a:	200a      	movs	r0, #10
 800088c:	f000 fc44 	bl	8001118 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000890:	49b5      	ldr	r1, [pc, #724]	; (8000b68 <OTM8009A_Init+0x318>)
 8000892:	2000      	movs	r0, #0
 8000894:	f001 fad4 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000898:	49b4      	ldr	r1, [pc, #720]	; (8000b6c <OTM8009A_Init+0x31c>)
 800089a:	2000      	movs	r0, #0
 800089c:	f001 fad0 	bl	8001e40 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f000 fc39 	bl	8001118 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008a6:	49b2      	ldr	r1, [pc, #712]	; (8000b70 <OTM8009A_Init+0x320>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 fac9 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008ae:	49b1      	ldr	r1, [pc, #708]	; (8000b74 <OTM8009A_Init+0x324>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 fac5 	bl	8001e40 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008b6:	49b0      	ldr	r1, [pc, #704]	; (8000b78 <OTM8009A_Init+0x328>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fac1 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008be:	49af      	ldr	r1, [pc, #700]	; (8000b7c <OTM8009A_Init+0x32c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fabd 	bl	8001e40 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008c6:	49ae      	ldr	r1, [pc, #696]	; (8000b80 <OTM8009A_Init+0x330>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 fab9 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008ce:	49ad      	ldr	r1, [pc, #692]	; (8000b84 <OTM8009A_Init+0x334>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fab5 	bl	8001e40 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008d6:	499f      	ldr	r1, [pc, #636]	; (8000b54 <OTM8009A_Init+0x304>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 fab1 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008de:	49aa      	ldr	r1, [pc, #680]	; (8000b88 <OTM8009A_Init+0x338>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 faad 	bl	8001e40 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008e6:	49a9      	ldr	r1, [pc, #676]	; (8000b8c <OTM8009A_Init+0x33c>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 faa9 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008ee:	49a8      	ldr	r1, [pc, #672]	; (8000b90 <OTM8009A_Init+0x340>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 faa5 	bl	8001e40 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80008f6:	49a7      	ldr	r1, [pc, #668]	; (8000b94 <OTM8009A_Init+0x344>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 faa1 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80008fe:	49a6      	ldr	r1, [pc, #664]	; (8000b98 <OTM8009A_Init+0x348>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fa9d 	bl	8001e40 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000906:	49a5      	ldr	r1, [pc, #660]	; (8000b9c <OTM8009A_Init+0x34c>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fa99 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800090e:	49a4      	ldr	r1, [pc, #656]	; (8000ba0 <OTM8009A_Init+0x350>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fa95 	bl	8001e40 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000916:	49a3      	ldr	r1, [pc, #652]	; (8000ba4 <OTM8009A_Init+0x354>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa91 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800091e:	4997      	ldr	r1, [pc, #604]	; (8000b7c <OTM8009A_Init+0x32c>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fa8d 	bl	8001e40 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000926:	498b      	ldr	r1, [pc, #556]	; (8000b54 <OTM8009A_Init+0x304>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fa89 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800092e:	499e      	ldr	r1, [pc, #632]	; (8000ba8 <OTM8009A_Init+0x358>)
 8000930:	2002      	movs	r0, #2
 8000932:	f001 fa85 	bl	8001e40 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000936:	499d      	ldr	r1, [pc, #628]	; (8000bac <OTM8009A_Init+0x35c>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fa81 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800093e:	499c      	ldr	r1, [pc, #624]	; (8000bb0 <OTM8009A_Init+0x360>)
 8000940:	2000      	movs	r0, #0
 8000942:	f001 fa7d 	bl	8001e40 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000946:	499b      	ldr	r1, [pc, #620]	; (8000bb4 <OTM8009A_Init+0x364>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fa79 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800094e:	499a      	ldr	r1, [pc, #616]	; (8000bb8 <OTM8009A_Init+0x368>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fa75 	bl	8001e40 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000956:	4999      	ldr	r1, [pc, #612]	; (8000bbc <OTM8009A_Init+0x36c>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fa71 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800095e:	4998      	ldr	r1, [pc, #608]	; (8000bc0 <OTM8009A_Init+0x370>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fa6d 	bl	8001e40 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000966:	4989      	ldr	r1, [pc, #548]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fa69 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800096e:	4995      	ldr	r1, [pc, #596]	; (8000bc4 <OTM8009A_Init+0x374>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fa65 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000976:	4987      	ldr	r1, [pc, #540]	; (8000b94 <OTM8009A_Init+0x344>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 fa61 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800097e:	4992      	ldr	r1, [pc, #584]	; (8000bc8 <OTM8009A_Init+0x378>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fa5d 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000986:	4991      	ldr	r1, [pc, #580]	; (8000bcc <OTM8009A_Init+0x37c>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 fa59 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800098e:	4990      	ldr	r1, [pc, #576]	; (8000bd0 <OTM8009A_Init+0x380>)
 8000990:	2002      	movs	r0, #2
 8000992:	f001 fa55 	bl	8001e40 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000996:	4971      	ldr	r1, [pc, #452]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 fa51 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800099e:	498d      	ldr	r1, [pc, #564]	; (8000bd4 <OTM8009A_Init+0x384>)
 80009a0:	2006      	movs	r0, #6
 80009a2:	f001 fa4d 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009a6:	498c      	ldr	r1, [pc, #560]	; (8000bd8 <OTM8009A_Init+0x388>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fa49 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009ae:	498b      	ldr	r1, [pc, #556]	; (8000bdc <OTM8009A_Init+0x38c>)
 80009b0:	200e      	movs	r0, #14
 80009b2:	f001 fa45 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009b6:	498a      	ldr	r1, [pc, #552]	; (8000be0 <OTM8009A_Init+0x390>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 fa41 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009be:	4989      	ldr	r1, [pc, #548]	; (8000be4 <OTM8009A_Init+0x394>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 fa3d 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009c6:	4988      	ldr	r1, [pc, #544]	; (8000be8 <OTM8009A_Init+0x398>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 fa39 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009ce:	4987      	ldr	r1, [pc, #540]	; (8000bec <OTM8009A_Init+0x39c>)
 80009d0:	200a      	movs	r0, #10
 80009d2:	f001 fa35 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009d6:	4986      	ldr	r1, [pc, #536]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fa31 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009de:	4985      	ldr	r1, [pc, #532]	; (8000bf4 <OTM8009A_Init+0x3a4>)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 fa2d 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009e6:	495d      	ldr	r1, [pc, #372]	; (8000b5c <OTM8009A_Init+0x30c>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 fa29 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009ee:	4982      	ldr	r1, [pc, #520]	; (8000bf8 <OTM8009A_Init+0x3a8>)
 80009f0:	200a      	movs	r0, #10
 80009f2:	f001 fa25 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80009f6:	4981      	ldr	r1, [pc, #516]	; (8000bfc <OTM8009A_Init+0x3ac>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 fa21 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80009fe:	4980      	ldr	r1, [pc, #512]	; (8000c00 <OTM8009A_Init+0x3b0>)
 8000a00:	200f      	movs	r0, #15
 8000a02:	f001 fa1d 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a06:	4974      	ldr	r1, [pc, #464]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 fa19 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a0e:	497d      	ldr	r1, [pc, #500]	; (8000c04 <OTM8009A_Init+0x3b4>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 fa15 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a16:	4972      	ldr	r1, [pc, #456]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 fa11 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a1e:	497a      	ldr	r1, [pc, #488]	; (8000c08 <OTM8009A_Init+0x3b8>)
 8000a20:	200a      	movs	r0, #10
 8000a22:	f001 fa0d 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a26:	4970      	ldr	r1, [pc, #448]	; (8000be8 <OTM8009A_Init+0x398>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 fa09 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a2e:	4977      	ldr	r1, [pc, #476]	; (8000c0c <OTM8009A_Init+0x3bc>)
 8000a30:	200f      	movs	r0, #15
 8000a32:	f001 fa05 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a36:	496e      	ldr	r1, [pc, #440]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 fa01 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a3e:	4974      	ldr	r1, [pc, #464]	; (8000c10 <OTM8009A_Init+0x3c0>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 f9fd 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a46:	4973      	ldr	r1, [pc, #460]	; (8000c14 <OTM8009A_Init+0x3c4>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f9f9 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a4e:	4972      	ldr	r1, [pc, #456]	; (8000c18 <OTM8009A_Init+0x3c8>)
 8000a50:	200a      	movs	r0, #10
 8000a52:	f001 f9f5 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a56:	4971      	ldr	r1, [pc, #452]	; (8000c1c <OTM8009A_Init+0x3cc>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 f9f1 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a5e:	4970      	ldr	r1, [pc, #448]	; (8000c20 <OTM8009A_Init+0x3d0>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f9ed 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a66:	493d      	ldr	r1, [pc, #244]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f9e9 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a6e:	496d      	ldr	r1, [pc, #436]	; (8000c24 <OTM8009A_Init+0x3d4>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f9e5 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a76:	4961      	ldr	r1, [pc, #388]	; (8000bfc <OTM8009A_Init+0x3ac>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f9e1 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a7e:	496a      	ldr	r1, [pc, #424]	; (8000c28 <OTM8009A_Init+0x3d8>)
 8000a80:	200f      	movs	r0, #15
 8000a82:	f001 f9dd 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a86:	4954      	ldr	r1, [pc, #336]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f9d9 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a8e:	4967      	ldr	r1, [pc, #412]	; (8000c2c <OTM8009A_Init+0x3dc>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 f9d5 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a96:	4952      	ldr	r1, [pc, #328]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 f9d1 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000a9e:	4964      	ldr	r1, [pc, #400]	; (8000c30 <OTM8009A_Init+0x3e0>)
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f001 f9cd 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000aa6:	4950      	ldr	r1, [pc, #320]	; (8000be8 <OTM8009A_Init+0x398>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f9c9 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000aae:	4961      	ldr	r1, [pc, #388]	; (8000c34 <OTM8009A_Init+0x3e4>)
 8000ab0:	200f      	movs	r0, #15
 8000ab2:	f001 f9c5 	bl	8001e40 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ab6:	494e      	ldr	r1, [pc, #312]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 f9c1 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000abe:	495e      	ldr	r1, [pc, #376]	; (8000c38 <OTM8009A_Init+0x3e8>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f9bd 	bl	8001e40 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ac6:	4931      	ldr	r1, [pc, #196]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f9b9 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ace:	495b      	ldr	r1, [pc, #364]	; (8000c3c <OTM8009A_Init+0x3ec>)
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f001 f9b5 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ad6:	495a      	ldr	r1, [pc, #360]	; (8000c40 <OTM8009A_Init+0x3f0>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f9b1 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000ade:	4959      	ldr	r1, [pc, #356]	; (8000c44 <OTM8009A_Init+0x3f4>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f9ad 	bl	8001e40 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000ae6:	4958      	ldr	r1, [pc, #352]	; (8000c48 <OTM8009A_Init+0x3f8>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f9a9 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000aee:	4957      	ldr	r1, [pc, #348]	; (8000c4c <OTM8009A_Init+0x3fc>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f9a5 	bl	8001e40 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000af6:	4917      	ldr	r1, [pc, #92]	; (8000b54 <OTM8009A_Init+0x304>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f9a1 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000afe:	4954      	ldr	r1, [pc, #336]	; (8000c50 <OTM8009A_Init+0x400>)
 8000b00:	2003      	movs	r0, #3
 8000b02:	f001 f99d 	bl	8001e40 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4913      	ldr	r1, [pc, #76]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f999 	bl	8001e40 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b0e:	4911      	ldr	r1, [pc, #68]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b10:	2000      	movs	r0, #0
 8000b12:	f001 f995 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b16:	494f      	ldr	r1, [pc, #316]	; (8000c54 <OTM8009A_Init+0x404>)
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f001 f991 	bl	8001e40 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f98d 	bl	8001e40 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b26:	494c      	ldr	r1, [pc, #304]	; (8000c58 <OTM8009A_Init+0x408>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f989 	bl	8001e40 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b2e:	494b      	ldr	r1, [pc, #300]	; (8000c5c <OTM8009A_Init+0x40c>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f985 	bl	8001e40 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b36:	2078      	movs	r0, #120	; 0x78
 8000b38:	f000 faee 	bl	8001118 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 8090 	beq.w	8000c64 <OTM8009A_Init+0x414>
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d000      	beq.n	8000b4a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b48:	e091      	b.n	8000c6e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b4a:	4945      	ldr	r1, [pc, #276]	; (8000c60 <OTM8009A_Init+0x410>)
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f001 f977 	bl	8001e40 <DSI_IO_WriteCmd>
    break;
 8000b52:	e08c      	b.n	8000c6e <OTM8009A_Init+0x41e>
 8000b54:	0800cec8 	.word	0x0800cec8
 8000b58:	0800cd80 	.word	0x0800cd80
 8000b5c:	0800cecc 	.word	0x0800cecc
 8000b60:	0800cd84 	.word	0x0800cd84
 8000b64:	0800ced0 	.word	0x0800ced0
 8000b68:	0800ced4 	.word	0x0800ced4
 8000b6c:	0800ced8 	.word	0x0800ced8
 8000b70:	0800cedc 	.word	0x0800cedc
 8000b74:	0800cee0 	.word	0x0800cee0
 8000b78:	0800cee4 	.word	0x0800cee4
 8000b7c:	0800cee8 	.word	0x0800cee8
 8000b80:	0800ceec 	.word	0x0800ceec
 8000b84:	0800cef0 	.word	0x0800cef0
 8000b88:	0800cef4 	.word	0x0800cef4
 8000b8c:	0800cef8 	.word	0x0800cef8
 8000b90:	0800cefc 	.word	0x0800cefc
 8000b94:	0800cf00 	.word	0x0800cf00
 8000b98:	0800cf04 	.word	0x0800cf04
 8000b9c:	0800cf08 	.word	0x0800cf08
 8000ba0:	0800cf0c 	.word	0x0800cf0c
 8000ba4:	0800cf10 	.word	0x0800cf10
 8000ba8:	0800cdb0 	.word	0x0800cdb0
 8000bac:	0800cf14 	.word	0x0800cf14
 8000bb0:	0800cf18 	.word	0x0800cf18
 8000bb4:	0800cf1c 	.word	0x0800cf1c
 8000bb8:	0800cf20 	.word	0x0800cf20
 8000bbc:	0800cf24 	.word	0x0800cf24
 8000bc0:	0800cf28 	.word	0x0800cf28
 8000bc4:	0800cf2c 	.word	0x0800cf2c
 8000bc8:	0800cf30 	.word	0x0800cf30
 8000bcc:	0800cf34 	.word	0x0800cf34
 8000bd0:	0800cdb4 	.word	0x0800cdb4
 8000bd4:	0800cdb8 	.word	0x0800cdb8
 8000bd8:	0800cf38 	.word	0x0800cf38
 8000bdc:	0800cdc0 	.word	0x0800cdc0
 8000be0:	0800cf3c 	.word	0x0800cf3c
 8000be4:	0800cdd0 	.word	0x0800cdd0
 8000be8:	0800cf40 	.word	0x0800cf40
 8000bec:	0800cde0 	.word	0x0800cde0
 8000bf0:	0800cf44 	.word	0x0800cf44
 8000bf4:	0800cf7c 	.word	0x0800cf7c
 8000bf8:	0800cdec 	.word	0x0800cdec
 8000bfc:	0800cf48 	.word	0x0800cf48
 8000c00:	0800cdf8 	.word	0x0800cdf8
 8000c04:	0800ce08 	.word	0x0800ce08
 8000c08:	0800ce18 	.word	0x0800ce18
 8000c0c:	0800ce24 	.word	0x0800ce24
 8000c10:	0800ce34 	.word	0x0800ce34
 8000c14:	0800cf4c 	.word	0x0800cf4c
 8000c18:	0800ce44 	.word	0x0800ce44
 8000c1c:	0800cf50 	.word	0x0800cf50
 8000c20:	0800ce50 	.word	0x0800ce50
 8000c24:	0800ce5c 	.word	0x0800ce5c
 8000c28:	0800ce68 	.word	0x0800ce68
 8000c2c:	0800ce78 	.word	0x0800ce78
 8000c30:	0800ce88 	.word	0x0800ce88
 8000c34:	0800ce94 	.word	0x0800ce94
 8000c38:	0800cea4 	.word	0x0800cea4
 8000c3c:	0800cf80 	.word	0x0800cf80
 8000c40:	0800cf84 	.word	0x0800cf84
 8000c44:	0800cf88 	.word	0x0800cf88
 8000c48:	0800cf8c 	.word	0x0800cf8c
 8000c4c:	0800cf90 	.word	0x0800cf90
 8000c50:	0800ceb4 	.word	0x0800ceb4
 8000c54:	0800cd88 	.word	0x0800cd88
 8000c58:	0800cd9c 	.word	0x0800cd9c
 8000c5c:	0800cf54 	.word	0x0800cf54
 8000c60:	0800cf58 	.word	0x0800cf58
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c64:	491a      	ldr	r1, [pc, #104]	; (8000cd0 <OTM8009A_Init+0x480>)
 8000c66:	2000      	movs	r0, #0
 8000c68:	f001 f8ea 	bl	8001e40 <DSI_IO_WriteCmd>
    break;
 8000c6c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10b      	bne.n	8000c8c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c74:	4917      	ldr	r1, [pc, #92]	; (8000cd4 <OTM8009A_Init+0x484>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f8e2 	bl	8001e40 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c7c:	4916      	ldr	r1, [pc, #88]	; (8000cd8 <OTM8009A_Init+0x488>)
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f001 f8de 	bl	8001e40 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c84:	4915      	ldr	r1, [pc, #84]	; (8000cdc <OTM8009A_Init+0x48c>)
 8000c86:	2004      	movs	r0, #4
 8000c88:	f001 f8da 	bl	8001e40 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c8c:	4914      	ldr	r1, [pc, #80]	; (8000ce0 <OTM8009A_Init+0x490>)
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f001 f8d6 	bl	8001e40 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000c94:	4913      	ldr	r1, [pc, #76]	; (8000ce4 <OTM8009A_Init+0x494>)
 8000c96:	2000      	movs	r0, #0
 8000c98:	f001 f8d2 	bl	8001e40 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000c9c:	4912      	ldr	r1, [pc, #72]	; (8000ce8 <OTM8009A_Init+0x498>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f8ce 	bl	8001e40 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000ca4:	4911      	ldr	r1, [pc, #68]	; (8000cec <OTM8009A_Init+0x49c>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f8ca 	bl	8001e40 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cac:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <OTM8009A_Init+0x4a0>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f8c6 	bl	8001e40 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cb4:	490f      	ldr	r1, [pc, #60]	; (8000cf4 <OTM8009A_Init+0x4a4>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f8c2 	bl	8001e40 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000cbc:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <OTM8009A_Init+0x4a8>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f8be 	bl	8001e40 <DSI_IO_WriteCmd>

  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	0800cf5c 	.word	0x0800cf5c
 8000cd4:	0800cf60 	.word	0x0800cf60
 8000cd8:	0800ceb8 	.word	0x0800ceb8
 8000cdc:	0800cec0 	.word	0x0800cec0
 8000ce0:	0800cf64 	.word	0x0800cf64
 8000ce4:	0800cf68 	.word	0x0800cf68
 8000ce8:	0800cf6c 	.word	0x0800cf6c
 8000cec:	0800cf70 	.word	0x0800cf70
 8000cf0:	0800cf74 	.word	0x0800cf74
 8000cf4:	0800cec8 	.word	0x0800cec8
 8000cf8:	0800cf78 	.word	0x0800cf78

08000cfc <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <BSP_LED_Init+0x58>)
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <BSP_LED_Init+0x5c>)
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	f107 020c 	add.w	r2, r7, #12
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 ffec 	bl	8004d20 <HAL_GPIO_Init>

}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	20000028 	.word	0x20000028
 8000d58:	20000030 	.word	0x20000030

08000d5c <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <BSP_LED_Toggle+0x2c>)
 8000d6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <BSP_LED_Toggle+0x30>)
 8000d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f004 fab6 	bl	80052ea <HAL_GPIO_TogglePin>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000030 	.word	0x20000030
 8000d8c:	20000028 	.word	0x20000028

08000d90 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a58      	ldr	r2, [pc, #352]	; (8000efc <I2Cx_MspInit+0x16c>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d15b      	bne.n	8000e58 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000da0:	4b57      	ldr	r3, [pc, #348]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a56      	ldr	r2, [pc, #344]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b54      	ldr	r3, [pc, #336]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000db8:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a50      	ldr	r2, [pc, #320]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc4:	4b4e      	ldr	r3, [pc, #312]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000dd6:	2312      	movs	r3, #18
 8000dd8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dde:	2302      	movs	r3, #2
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000de2:	2304      	movs	r3, #4
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4845      	ldr	r0, [pc, #276]	; (8000f04 <I2Cx_MspInit+0x174>)
 8000dee:	f003 ff97 	bl	8004d20 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000df6:	230b      	movs	r3, #11
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4841      	ldr	r0, [pc, #260]	; (8000f08 <I2Cx_MspInit+0x178>)
 8000e02:	f003 ff8d 	bl	8004d20 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000e06:	4b3e      	ldr	r3, [pc, #248]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a3d      	ldr	r2, [pc, #244]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000e0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b3b      	ldr	r3, [pc, #236]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000e1e:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	4a37      	ldr	r2, [pc, #220]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e28:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000e2a:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	4a34      	ldr	r2, [pc, #208]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e34:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	210f      	movs	r1, #15
 8000e3a:	205f      	movs	r0, #95	; 0x5f
 8000e3c:	f002 fa65 	bl	800330a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000e40:	205f      	movs	r0, #95	; 0x5f
 8000e42:	f002 fa7e 	bl	8003342 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	210f      	movs	r1, #15
 8000e4a:	2060      	movs	r0, #96	; 0x60
 8000e4c:	f002 fa5d 	bl	800330a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000e50:	2060      	movs	r0, #96	; 0x60
 8000e52:	f002 fa76 	bl	8003342 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000e56:	e04d      	b.n	8000ef4 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a28      	ldr	r2, [pc, #160]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e74:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e76:	2312      	movs	r3, #18
 8000e78:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000e82:	2304      	movs	r3, #4
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481e      	ldr	r0, [pc, #120]	; (8000f08 <I2Cx_MspInit+0x178>)
 8000e8e:	f003 ff47 	bl	8004d20 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	481a      	ldr	r0, [pc, #104]	; (8000f08 <I2Cx_MspInit+0x178>)
 8000ea0:	f003 ff3e 	bl	8004d20 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a15      	ldr	r2, [pc, #84]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000eaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000ec2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec6:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <I2Cx_MspInit+0x170>)
 8000ece:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000ed2:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	201f      	movs	r0, #31
 8000eda:	f002 fa16 	bl	800330a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000ede:	201f      	movs	r0, #31
 8000ee0:	f002 fa2f 	bl	8003342 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	2020      	movs	r0, #32
 8000eea:	f002 fa0e 	bl	800330a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000eee:	2020      	movs	r0, #32
 8000ef0:	f002 fa27 	bl	8003342 <HAL_NVIC_EnableIRQ>
}
 8000ef4:	bf00      	nop
 8000ef6:	3730      	adds	r7, #48	; 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000010c 	.word	0x2000010c
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	40020400 	.word	0x40020400

08000f0c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f004 fd1d 	bl	8005954 <HAL_I2C_GetState>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d125      	bne.n	8000f6c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <I2Cx_Init+0x68>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d103      	bne.n	8000f30 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <I2Cx_Init+0x6c>)
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e002      	b.n	8000f36 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <I2Cx_Init+0x70>)
 8000f34:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <I2Cx_Init+0x74>)
 8000f3a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff15 	bl	8000d90 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f004 f9f2 	bl	8005350 <HAL_I2C_Init>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000010c 	.word	0x2000010c
 8000f78:	40006000 	.word	0x40006000
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	40912732 	.word	0x40912732

08000f84 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	4611      	mov	r1, r2
 8000f90:	461a      	mov	r2, r3
 8000f92:	4603      	mov	r3, r0
 8000f94:	72fb      	strb	r3, [r7, #11]
 8000f96:	460b      	mov	r3, r1
 8000f98:	813b      	strh	r3, [r7, #8]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fa2:	7afb      	ldrb	r3, [r7, #11]
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	88f8      	ldrh	r0, [r7, #6]
 8000fa8:	893a      	ldrh	r2, [r7, #8]
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4603      	mov	r3, r0
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f004 fbb0 	bl	8005720 <HAL_I2C_Mem_Read>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f832 	bl	8001038 <I2Cx_Error>
  }
  return status;
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b08a      	sub	sp, #40	; 0x28
 8000fe2:	af04      	add	r7, sp, #16
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4611      	mov	r1, r2
 8000fea:	461a      	mov	r2, r3
 8000fec:	4603      	mov	r3, r0
 8000fee:	72fb      	strb	r3, [r7, #11]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	813b      	strh	r3, [r7, #8]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000ffc:	7afb      	ldrb	r3, [r7, #11]
 8000ffe:	b299      	uxth	r1, r3
 8001000:	88f8      	ldrh	r0, [r7, #6]
 8001002:	893a      	ldrh	r2, [r7, #8]
 8001004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	4603      	mov	r3, r0
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f004 fa6f 	bl	80054f8 <HAL_I2C_Mem_Write>
 800101a:	4603      	mov	r3, r0
 800101c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001024:	7afb      	ldrb	r3, [r7, #11]
 8001026:	4619      	mov	r1, r3
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f000 f805 	bl	8001038 <I2Cx_Error>
  }
  return status;
 800102e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f004 fa13 	bl	8005470 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff5e 	bl	8000f0c <I2Cx_Init>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TS_IO_Init+0x10>)
 800105e:	f7ff ff55 	bl	8000f0c <I2Cx_Init>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000010c 	.word	0x2000010c

0800106c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	460b      	mov	r3, r1
 8001078:	71bb      	strb	r3, [r7, #6]
 800107a:	4613      	mov	r3, r2
 800107c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	b29a      	uxth	r2, r3
 8001082:	79f9      	ldrb	r1, [r7, #7]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1d7b      	adds	r3, r7, #5
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <TS_IO_Write+0x30>)
 8001090:	f7ff ffa5 	bl	8000fde <I2Cx_WriteMultiple>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000010c 	.word	0x2000010c

080010a0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	4603      	mov	r3, r0
 80010a8:	460a      	mov	r2, r1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	4613      	mov	r3, r2
 80010ae:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	79f9      	ldrb	r1, [r7, #7]
 80010ba:	2301      	movs	r3, #1
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	f107 030f 	add.w	r3, r7, #15
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	4804      	ldr	r0, [pc, #16]	; (80010d8 <TS_IO_Read+0x38>)
 80010c8:	f7ff ff5c 	bl	8000f84 <I2Cx_ReadMultiple>

  return read_value;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000010c 	.word	0x2000010c

080010dc <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	603a      	str	r2, [r7, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	460b      	mov	r3, r1
 80010ec:	71bb      	strb	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	79f9      	ldrb	r1, [r7, #7]
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	4804      	ldr	r0, [pc, #16]	; (8001114 <TS_IO_ReadMultiple+0x38>)
 8001104:	f7ff ff3e 	bl	8000f84 <I2Cx_ReadMultiple>
 8001108:	4603      	mov	r3, r0
 800110a:	b29b      	uxth	r3, r3
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000010c 	.word	0x2000010c

08001118 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f001 fc31 	bl	8002988 <HAL_Delay>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8001132:	2001      	movs	r0, #1
 8001134:	f000 f804 	bl	8001140 <BSP_LCD_InitEx>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b090      	sub	sp, #64	; 0x40
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 800114a:	f646 3325 	movw	r3, #27429	; 0x6b25
 800114e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8001158:	f000 f936 	bl	80013c8 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 800115c:	f000 fe9a 	bl	8001e94 <LCD_IO_GetID>
 8001160:	4603      	mov	r3, r0
 8001162:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8001164:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001166:	2b11      	cmp	r3, #17
 8001168:	d001      	beq.n	800116e <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 800116a:	2301      	movs	r3, #1
 800116c:	e113      	b.n	8001396 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800116e:	f000 fe99 	bl	8001ea4 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8001172:	4b8b      	ldr	r3, [pc, #556]	; (80013a0 <BSP_LCD_InitEx+0x260>)
 8001174:	4a8b      	ldr	r2, [pc, #556]	; (80013a4 <BSP_LCD_InitEx+0x264>)
 8001176:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8001178:	4889      	ldr	r0, [pc, #548]	; (80013a0 <BSP_LCD_InitEx+0x260>)
 800117a:	f002 fec3 	bl	8003f04 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800117e:	2364      	movs	r3, #100	; 0x64
 8001180:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001182:	2305      	movs	r3, #5
 8001184:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 800118a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800118e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001190:	4b83      	ldr	r3, [pc, #524]	; (80013a0 <BSP_LCD_InitEx+0x260>)
 8001192:	2201      	movs	r2, #1
 8001194:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	4a83      	ldr	r2, [pc, #524]	; (80013a8 <BSP_LCD_InitEx+0x268>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	0a9b      	lsrs	r3, r3, #10
 80011a2:	4a7f      	ldr	r2, [pc, #508]	; (80013a0 <BSP_LCD_InitEx+0x260>)
 80011a4:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	4619      	mov	r1, r3
 80011ac:	487c      	ldr	r0, [pc, #496]	; (80013a0 <BSP_LCD_InitEx+0x260>)
 80011ae:	f002 fd8f 	bl	8003cd0 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d108      	bne.n	80011ca <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 80011b8:	4b7c      	ldr	r3, [pc, #496]	; (80013ac <BSP_LCD_InitEx+0x26c>)
 80011ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011be:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 80011c0:	4b7b      	ldr	r3, [pc, #492]	; (80013b0 <BSP_LCD_InitEx+0x270>)
 80011c2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	e007      	b.n	80011da <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 80011ca:	4b78      	ldr	r3, [pc, #480]	; (80013ac <BSP_LCD_InitEx+0x26c>)
 80011cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80011d0:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 80011d2:	4b77      	ldr	r3, [pc, #476]	; (80013b0 <BSP_LCD_InitEx+0x270>)
 80011d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011d8:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 80011da:	4b74      	ldr	r3, [pc, #464]	; (80013ac <BSP_LCD_InitEx+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80011e0:	4b73      	ldr	r3, [pc, #460]	; (80013b0 <BSP_LCD_InitEx+0x270>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 80011e6:	2301      	movs	r3, #1
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 80011ea:	230f      	movs	r3, #15
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 80011ee:	2310      	movs	r3, #16
 80011f0:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 80011f2:	2302      	movs	r3, #2
 80011f4:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80011f6:	2322      	movs	r3, #34	; 0x22
 80011f8:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80011fa:	2322      	movs	r3, #34	; 0x22
 80011fc:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80011fe:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001204:	4b6b      	ldr	r3, [pc, #428]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 8001206:	2205      	movs	r2, #5
 8001208:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800120a:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001210:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8001216:	4b67      	ldr	r3, [pc, #412]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 800121c:	4b65      	ldr	r3, [pc, #404]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 800121e:	2202      	movs	r2, #2
 8001220:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8001222:	4b64      	ldr	r3, [pc, #400]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 8001224:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001228:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 800122a:	4b62      	ldr	r3, [pc, #392]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8001230:	4a60      	ldr	r2, [pc, #384]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 8001232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001234:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800123a:	fb02 f203 	mul.w	r2, r2, r3
 800123e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	4a5b      	ldr	r2, [pc, #364]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 8001246:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800124c:	fb02 f203 	mul.w	r2, r2, r3
 8001250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4a57      	ldr	r2, [pc, #348]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 8001258:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 800125a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	441a      	add	r2, r3
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	441a      	add	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	4413      	add	r3, r2
 8001268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800126a:	fb02 f203 	mul.w	r2, r2, r3
 800126e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001270:	fbb2 f3f3 	udiv	r3, r2, r3
 8001274:	4a4f      	ldr	r2, [pc, #316]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001278:	4a4e      	ldr	r2, [pc, #312]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 800127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127c:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800127e:	4a4d      	ldr	r2, [pc, #308]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001284:	4a4b      	ldr	r2, [pc, #300]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 800128a:	4a4a      	ldr	r2, [pc, #296]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 800128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001290:	4b48      	ldr	r3, [pc, #288]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 8001292:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001296:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001298:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 800129a:	2210      	movs	r2, #16
 800129c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800129e:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 80012a4:	4b43      	ldr	r3, [pc, #268]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 80012a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012aa:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 80012ac:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 80012ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b2:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 80012b4:	4b3f      	ldr	r3, [pc, #252]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 80012b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ba:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 80012be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c2:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 80012c4:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 80012c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ca:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 80012cc:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 80012ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80012d4:	4937      	ldr	r1, [pc, #220]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 80012d6:	4832      	ldr	r0, [pc, #200]	; (80013a0 <BSP_LCD_InitEx+0x260>)
 80012d8:	f002 ff6c 	bl	80041b4 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	3b01      	subs	r3, #1
 80012e0:	4a35      	ldr	r2, [pc, #212]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 80012e2:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4413      	add	r3, r2
 80012ea:	3b01      	subs	r3, #1
 80012ec:	4a32      	ldr	r2, [pc, #200]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 80012ee:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80012f0:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <BSP_LCD_InitEx+0x26c>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	441a      	add	r2, r3
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	4413      	add	r3, r2
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a2e      	ldr	r2, [pc, #184]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 8001300:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <BSP_LCD_InitEx+0x26c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	441a      	add	r2, r3
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	441a      	add	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	4413      	add	r3, r2
 8001312:	3b01      	subs	r3, #1
 8001314:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 8001316:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <BSP_LCD_InitEx+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a26      	ldr	r2, [pc, #152]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 800131e:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8001320:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <BSP_LCD_InitEx+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 8001326:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <BSP_LCD_InitEx+0x27c>)
 800132a:	2208      	movs	r2, #8
 800132c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <BSP_LCD_InitEx+0x27c>)
 8001330:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001334:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <BSP_LCD_InitEx+0x27c>)
 8001338:	2207      	movs	r2, #7
 800133a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <BSP_LCD_InitEx+0x27c>)
 800133e:	2200      	movs	r2, #0
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001342:	481e      	ldr	r0, [pc, #120]	; (80013bc <BSP_LCD_InitEx+0x27c>)
 8001344:	f005 fc84 	bl	8006c50 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 8001368:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <BSP_LCD_InitEx+0x280>)
 800136a:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 800136c:	4911      	ldr	r1, [pc, #68]	; (80013b4 <BSP_LCD_InitEx+0x274>)
 800136e:	4812      	ldr	r0, [pc, #72]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 8001370:	f004 ffc2 	bl	80062f8 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001374:	4810      	ldr	r0, [pc, #64]	; (80013b8 <BSP_LCD_InitEx+0x278>)
 8001376:	f004 fd17 	bl	8005da8 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 800137a:	4809      	ldr	r0, [pc, #36]	; (80013a0 <BSP_LCD_InitEx+0x260>)
 800137c:	f003 fbac 	bl	8004ad8 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001380:	f000 ff10 	bl	80021a4 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <BSP_LCD_InitEx+0x284>)
 8001386:	f000 f901 	bl	800158c <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4619      	mov	r1, r3
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fa5e 	bl	8000850 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3740      	adds	r7, #64	; 0x40
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000488 	.word	0x20000488
 80013a4:	40016c00 	.word	0x40016c00
 80013a8:	43215e57 	.word	0x43215e57
 80013ac:	20000050 	.word	0x20000050
 80013b0:	20000054 	.word	0x20000054
 80013b4:	20000158 	.word	0x20000158
 80013b8:	200003e0 	.word	0x200003e0
 80013bc:	200001e0 	.word	0x200001e0
 80013c0:	40016800 	.word	0x40016800
 80013c4:	20000038 	.word	0x20000038

080013c8 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <BSP_LCD_Reset+0x68>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a17      	ldr	r2, [pc, #92]	; (8001430 <BSP_LCD_Reset+0x68>)
 80013d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <BSP_LCD_Reset+0x68>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80013e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ea:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <BSP_LCD_Reset+0x6c>)
 80013fe:	f003 fc8f 	bl	8004d20 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001408:	480a      	ldr	r0, [pc, #40]	; (8001434 <BSP_LCD_Reset+0x6c>)
 800140a:	f003 ff55 	bl	80052b8 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800140e:	2014      	movs	r0, #20
 8001410:	f001 faba 	bl	8002988 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <BSP_LCD_Reset+0x6c>)
 800141c:	f003 ff4c 	bl	80052b8 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8001420:	200a      	movs	r0, #10
 8001422:	f001 fab1 	bl	8002988 <HAL_Delay>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40022400 	.word	0x40022400

08001438 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <BSP_LCD_GetXSize+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000050 	.word	0x20000050

08001450 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <BSP_LCD_GetYSize+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000054 	.word	0x20000054

08001468 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b090      	sub	sp, #64	; 0x40
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001478:	f7ff ffde 	bl	8001438 <BSP_LCD_GetXSize>
 800147c:	4603      	mov	r3, r0
 800147e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001484:	f7ff ffe4 	bl	8001450 <BSP_LCD_GetYSize>
 8001488:	4603      	mov	r3, r0
 800148a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001494:	23ff      	movs	r3, #255	; 0xff
 8001496:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80014ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80014b4:	2307      	movs	r3, #7
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80014b8:	f7ff ffbe 	bl	8001438 <BSP_LCD_GetXSize>
 80014bc:	4603      	mov	r3, r0
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80014c0:	f7ff ffc6 	bl	8001450 <BSP_LCD_GetYSize>
 80014c4:	4603      	mov	r3, r0
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 80014c8:	88fa      	ldrh	r2, [r7, #6]
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	4812      	ldr	r0, [pc, #72]	; (800151c <BSP_LCD_LayerDefaultInit+0xb4>)
 80014d2:	f004 fd39 	bl	8005f48 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80014d6:	88fa      	ldrh	r2, [r7, #6]
 80014d8:	4911      	ldr	r1, [pc, #68]	; (8001520 <BSP_LCD_LayerDefaultInit+0xb8>)
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	3304      	adds	r3, #4
 80014e6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ea:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80014ec:	88fa      	ldrh	r2, [r7, #6]
 80014ee:	490c      	ldr	r1, [pc, #48]	; (8001520 <BSP_LCD_LayerDefaultInit+0xb8>)
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	3308      	adds	r3, #8
 80014fc:	4a09      	ldr	r2, [pc, #36]	; (8001524 <BSP_LCD_LayerDefaultInit+0xbc>)
 80014fe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001500:	88fa      	ldrh	r2, [r7, #6]
 8001502:	4907      	ldr	r1, [pc, #28]	; (8001520 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001512:	601a      	str	r2, [r3, #0]
}
 8001514:	bf00      	nop
 8001516:	3740      	adds	r7, #64	; 0x40
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200003e0 	.word	0x200003e0
 8001520:	200001c8 	.word	0x200001c8
 8001524:	20000038 	.word	0x20000038

08001528 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <BSP_LCD_SetTextColor+0x28>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4907      	ldr	r1, [pc, #28]	; (8001554 <BSP_LCD_SetTextColor+0x2c>)
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	601a      	str	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	200001c4 	.word	0x200001c4
 8001554:	200001c8 	.word	0x200001c8

08001558 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <BSP_LCD_SetBackColor+0x2c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4908      	ldr	r1, [pc, #32]	; (8001588 <BSP_LCD_SetBackColor+0x30>)
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	3304      	adds	r3, #4
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	200001c4 	.word	0x200001c4
 8001588:	200001c8 	.word	0x200001c8

0800158c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <BSP_LCD_SetFont+0x2c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4908      	ldr	r1, [pc, #32]	; (80015bc <BSP_LCD_SetFont+0x30>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	3308      	adds	r3, #8
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	601a      	str	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	200001c4 	.word	0x200001c4
 80015bc:	200001c8 	.word	0x200001c8

080015c0 <BSP_LCD_ReadPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @retval RGB pixel color
  */
uint32_t BSP_LCD_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	460a      	mov	r2, r1
 80015ca:	80fb      	strh	r3, [r7, #6]
 80015cc:	4613      	mov	r3, r2
 80015ce:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]

  if(hltdc_discovery.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <BSP_LCD_ReadPixel+0x144>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a4b      	ldr	r2, [pc, #300]	; (8001708 <BSP_LCD_ReadPixel+0x148>)
 80015da:	2134      	movs	r1, #52	; 0x34
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	3348      	adds	r3, #72	; 0x48
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d115      	bne.n	8001616 <BSP_LCD_ReadPixel+0x56>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos)));
 80015ea:	4b46      	ldr	r3, [pc, #280]	; (8001704 <BSP_LCD_ReadPixel+0x144>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a46      	ldr	r2, [pc, #280]	; (8001708 <BSP_LCD_ReadPixel+0x148>)
 80015f0:	2134      	movs	r1, #52	; 0x34
 80015f2:	fb01 f303 	mul.w	r3, r1, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	335c      	adds	r3, #92	; 0x5c
 80015fa:	681c      	ldr	r4, [r3, #0]
 80015fc:	88bd      	ldrh	r5, [r7, #4]
 80015fe:	f7ff ff1b 	bl	8001438 <BSP_LCD_GetXSize>
 8001602:	4603      	mov	r3, r0
 8001604:	fb03 f205 	mul.w	r2, r3, r5
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4423      	add	r3, r4
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e070      	b.n	80016f8 <BSP_LCD_ReadPixel+0x138>
  }
  else if(hltdc_discovery.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001616:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <BSP_LCD_ReadPixel+0x144>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a3b      	ldr	r2, [pc, #236]	; (8001708 <BSP_LCD_ReadPixel+0x148>)
 800161c:	2134      	movs	r1, #52	; 0x34
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	4413      	add	r3, r2
 8001624:	3348      	adds	r3, #72	; 0x48
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d117      	bne.n	800165c <BSP_LCD_ReadPixel+0x9c>
  {
    /* Read data value from SDRAM memory */
    ret = (*(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) & 0x00FFFFFF);
 800162c:	4b35      	ldr	r3, [pc, #212]	; (8001704 <BSP_LCD_ReadPixel+0x144>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a35      	ldr	r2, [pc, #212]	; (8001708 <BSP_LCD_ReadPixel+0x148>)
 8001632:	2134      	movs	r1, #52	; 0x34
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	335c      	adds	r3, #92	; 0x5c
 800163c:	681c      	ldr	r4, [r3, #0]
 800163e:	88bd      	ldrh	r5, [r7, #4]
 8001640:	f7ff fefa 	bl	8001438 <BSP_LCD_GetXSize>
 8001644:	4603      	mov	r3, r0
 8001646:	fb03 f205 	mul.w	r2, r3, r5
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4423      	add	r3, r4
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e04d      	b.n	80016f8 <BSP_LCD_ReadPixel+0x138>
  }
  else if((hltdc_discovery.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <BSP_LCD_ReadPixel+0x144>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a29      	ldr	r2, [pc, #164]	; (8001708 <BSP_LCD_ReadPixel+0x148>)
 8001662:	2134      	movs	r1, #52	; 0x34
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	3348      	adds	r3, #72	; 0x48
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d015      	beq.n	800169e <BSP_LCD_ReadPixel+0xde>
          (hltdc_discovery.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <BSP_LCD_ReadPixel+0x144>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a24      	ldr	r2, [pc, #144]	; (8001708 <BSP_LCD_ReadPixel+0x148>)
 8001678:	2134      	movs	r1, #52	; 0x34
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	4413      	add	r3, r2
 8001680:	3348      	adds	r3, #72	; 0x48
 8001682:	681b      	ldr	r3, [r3, #0]
  else if((hltdc_discovery.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 8001684:	2b04      	cmp	r3, #4
 8001686:	d00a      	beq.n	800169e <BSP_LCD_ReadPixel+0xde>
          (hltdc_discovery.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <BSP_LCD_ReadPixel+0x144>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <BSP_LCD_ReadPixel+0x148>)
 800168e:	2134      	movs	r1, #52	; 0x34
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	3348      	adds	r3, #72	; 0x48
 8001698:	681b      	ldr	r3, [r3, #0]
          (hltdc_discovery.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800169a:	2b07      	cmp	r3, #7
 800169c:	d116      	bne.n	80016cc <BSP_LCD_ReadPixel+0x10c>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint16_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <BSP_LCD_ReadPixel+0x144>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a19      	ldr	r2, [pc, #100]	; (8001708 <BSP_LCD_ReadPixel+0x148>)
 80016a4:	2134      	movs	r1, #52	; 0x34
 80016a6:	fb01 f303 	mul.w	r3, r1, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	335c      	adds	r3, #92	; 0x5c
 80016ae:	681c      	ldr	r4, [r3, #0]
 80016b0:	88bd      	ldrh	r5, [r7, #4]
 80016b2:	f7ff fec1 	bl	8001438 <BSP_LCD_GetXSize>
 80016b6:	4603      	mov	r3, r0
 80016b8:	fb03 f205 	mul.w	r2, r3, r5
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	4413      	add	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4423      	add	r3, r4
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e015      	b.n	80016f8 <BSP_LCD_ReadPixel+0x138>
  }
  else
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint8_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <BSP_LCD_ReadPixel+0x144>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <BSP_LCD_ReadPixel+0x148>)
 80016d2:	2134      	movs	r1, #52	; 0x34
 80016d4:	fb01 f303 	mul.w	r3, r1, r3
 80016d8:	4413      	add	r3, r2
 80016da:	335c      	adds	r3, #92	; 0x5c
 80016dc:	681c      	ldr	r4, [r3, #0]
 80016de:	88bd      	ldrh	r5, [r7, #4]
 80016e0:	f7ff feaa 	bl	8001438 <BSP_LCD_GetXSize>
 80016e4:	4603      	mov	r3, r0
 80016e6:	fb03 f205 	mul.w	r2, r3, r5
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	4413      	add	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4423      	add	r3, r4
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016f8:	68fb      	ldr	r3, [r7, #12]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bdb0      	pop	{r4, r5, r7, pc}
 8001702:	bf00      	nop
 8001704:	200001c4 	.word	0x200001c4
 8001708:	200003e0 	.word	0x200003e0

0800170c <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800170c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170e:	b085      	sub	sp, #20
 8001710:	af02      	add	r7, sp, #8
 8001712:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <BSP_LCD_Clear+0x48>)
 8001716:	681c      	ldr	r4, [r3, #0]
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <BSP_LCD_Clear+0x48>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <BSP_LCD_Clear+0x4c>)
 800171e:	2134      	movs	r1, #52	; 0x34
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	4413      	add	r3, r2
 8001726:	335c      	adds	r3, #92	; 0x5c
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461d      	mov	r5, r3
 800172c:	f7ff fe84 	bl	8001438 <BSP_LCD_GetXSize>
 8001730:	4606      	mov	r6, r0
 8001732:	f7ff fe8d 	bl	8001450 <BSP_LCD_GetYSize>
 8001736:	4602      	mov	r2, r0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	2300      	movs	r3, #0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	4613      	mov	r3, r2
 8001742:	4632      	mov	r2, r6
 8001744:	4629      	mov	r1, r5
 8001746:	4620      	mov	r0, r4
 8001748:	f000 fcf4 	bl	8002134 <LL_FillBuffer>
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001754:	200001c4 	.word	0x200001c4
 8001758:	200003e0 	.word	0x200003e0

0800175c <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	80fb      	strh	r3, [r7, #6]
 8001766:	460b      	mov	r3, r1
 8001768:	80bb      	strh	r3, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <BSP_LCD_DisplayChar+0x80>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	491b      	ldr	r1, [pc, #108]	; (80017e0 <BSP_LCD_DisplayChar+0x84>)
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3308      	adds	r3, #8
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6819      	ldr	r1, [r3, #0]
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <BSP_LCD_DisplayChar+0x80>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4c14      	ldr	r4, [pc, #80]	; (80017e0 <BSP_LCD_DisplayChar+0x84>)
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4423      	add	r3, r4
 800179a:	3308      	adds	r3, #8
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80017a0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <BSP_LCD_DisplayChar+0x80>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4c0d      	ldr	r4, [pc, #52]	; (80017e0 <BSP_LCD_DisplayChar+0x84>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4423      	add	r3, r4
 80017b4:	3308      	adds	r3, #8
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	889b      	ldrh	r3, [r3, #4]
 80017ba:	3307      	adds	r3, #7
 80017bc:	2b00      	cmp	r3, #0
 80017be:	da00      	bge.n	80017c2 <BSP_LCD_DisplayChar+0x66>
 80017c0:	3307      	adds	r3, #7
 80017c2:	10db      	asrs	r3, r3, #3
 80017c4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80017c8:	18ca      	adds	r2, r1, r3
 80017ca:	88b9      	ldrh	r1, [r7, #4]
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fbf8 	bl	8001fc4 <DrawChar>
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd90      	pop	{r4, r7, pc}
 80017dc:	200001c4 	.word	0x200001c4
 80017e0:	200001c8 	.word	0x200001c8

080017e4 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80017e4:	b5b0      	push	{r4, r5, r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60ba      	str	r2, [r7, #8]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	81fb      	strh	r3, [r7, #14]
 80017f2:	460b      	mov	r3, r1
 80017f4:	81bb      	strh	r3, [r7, #12]
 80017f6:	4613      	mov	r3, r2
 80017f8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80017fa:	2301      	movs	r3, #1
 80017fc:	83fb      	strh	r3, [r7, #30]
 80017fe:	2300      	movs	r3, #0
 8001800:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800180e:	e002      	b.n	8001816 <BSP_LCD_DisplayStringAt+0x32>
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3301      	adds	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	617a      	str	r2, [r7, #20]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f6      	bne.n	8001810 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001822:	f7ff fe09 	bl	8001438 <BSP_LCD_GetXSize>
 8001826:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <BSP_LCD_DisplayStringAt+0x180>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	494f      	ldr	r1, [pc, #316]	; (8001968 <BSP_LCD_DisplayStringAt+0x184>)
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	3308      	adds	r3, #8
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	889b      	ldrh	r3, [r3, #4]
 800183c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001840:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d01c      	beq.n	8001882 <BSP_LCD_DisplayStringAt+0x9e>
 8001848:	2b03      	cmp	r3, #3
 800184a:	d017      	beq.n	800187c <BSP_LCD_DisplayStringAt+0x98>
 800184c:	2b01      	cmp	r3, #1
 800184e:	d12e      	bne.n	80018ae <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	1ad1      	subs	r1, r2, r3
 8001856:	4b43      	ldr	r3, [pc, #268]	; (8001964 <BSP_LCD_DisplayStringAt+0x180>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4843      	ldr	r0, [pc, #268]	; (8001968 <BSP_LCD_DisplayStringAt+0x184>)
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4403      	add	r3, r0
 8001866:	3308      	adds	r3, #8
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	889b      	ldrh	r3, [r3, #4]
 800186c:	fb03 f301 	mul.w	r3, r3, r1
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	89fb      	ldrh	r3, [r7, #14]
 8001876:	4413      	add	r3, r2
 8001878:	83fb      	strh	r3, [r7, #30]
      break;
 800187a:	e01b      	b.n	80018b4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	83fb      	strh	r3, [r7, #30]
      break;
 8001880:	e018      	b.n	80018b4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	b299      	uxth	r1, r3
 800188a:	4b36      	ldr	r3, [pc, #216]	; (8001964 <BSP_LCD_DisplayStringAt+0x180>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4836      	ldr	r0, [pc, #216]	; (8001968 <BSP_LCD_DisplayStringAt+0x184>)
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4403      	add	r3, r0
 800189a:	3308      	adds	r3, #8
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	889b      	ldrh	r3, [r3, #4]
 80018a0:	fb11 f303 	smulbb	r3, r1, r3
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	89fb      	ldrh	r3, [r7, #14]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	83fb      	strh	r3, [r7, #30]
      break;
 80018ac:	e002      	b.n	80018b4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 80018ae:	89fb      	ldrh	r3, [r7, #14]
 80018b0:	83fb      	strh	r3, [r7, #30]
      break;
 80018b2:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80018b4:	8bfb      	ldrh	r3, [r7, #30]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <BSP_LCD_DisplayStringAt+0xde>
 80018ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	da1d      	bge.n	80018fe <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 80018c2:	2301      	movs	r3, #1
 80018c4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80018c6:	e01a      	b.n	80018fe <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	89b9      	ldrh	r1, [r7, #12]
 80018ce:	8bfb      	ldrh	r3, [r7, #30]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff43 	bl	800175c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80018d6:	4b23      	ldr	r3, [pc, #140]	; (8001964 <BSP_LCD_DisplayStringAt+0x180>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4923      	ldr	r1, [pc, #140]	; (8001968 <BSP_LCD_DisplayStringAt+0x184>)
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	3308      	adds	r3, #8
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	889a      	ldrh	r2, [r3, #4]
 80018ec:	8bfb      	ldrh	r3, [r7, #30]
 80018ee:	4413      	add	r3, r2
 80018f0:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	3301      	adds	r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
    i++;
 80018f8:	8bbb      	ldrh	r3, [r7, #28]
 80018fa:	3301      	adds	r3, #1
 80018fc:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf14      	ite	ne
 8001906:	2301      	movne	r3, #1
 8001908:	2300      	moveq	r3, #0
 800190a:	b2dc      	uxtb	r4, r3
 800190c:	f7ff fd94 	bl	8001438 <BSP_LCD_GetXSize>
 8001910:	4605      	mov	r5, r0
 8001912:	8bb9      	ldrh	r1, [r7, #28]
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <BSP_LCD_DisplayStringAt+0x180>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <BSP_LCD_DisplayStringAt+0x184>)
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4403      	add	r3, r0
 8001924:	3308      	adds	r3, #8
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	889b      	ldrh	r3, [r3, #4]
 800192a:	fb03 f301 	mul.w	r3, r3, r1
 800192e:	1aeb      	subs	r3, r5, r3
 8001930:	b299      	uxth	r1, r3
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <BSP_LCD_DisplayStringAt+0x180>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	480c      	ldr	r0, [pc, #48]	; (8001968 <BSP_LCD_DisplayStringAt+0x184>)
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4403      	add	r3, r0
 8001942:	3308      	adds	r3, #8
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	889b      	ldrh	r3, [r3, #4]
 8001948:	4299      	cmp	r1, r3
 800194a:	bf2c      	ite	cs
 800194c:	2301      	movcs	r3, #1
 800194e:	2300      	movcc	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	4023      	ands	r3, r4
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1b6      	bne.n	80018c8 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 800195a:	bf00      	nop
 800195c:	3720      	adds	r7, #32
 800195e:	46bd      	mov	sp, r7
 8001960:	bdb0      	pop	{r4, r5, r7, pc}
 8001962:	bf00      	nop
 8001964:	200001c4 	.word	0x200001c4
 8001968:	200001c8 	.word	0x200001c8

0800196c <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800196c:	b5b0      	push	{r4, r5, r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af02      	add	r7, sp, #8
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
 8001976:	460b      	mov	r3, r1
 8001978:	80bb      	strh	r3, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <BSP_LCD_DrawHLine+0x70>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <BSP_LCD_DrawHLine+0x74>)
 8001988:	2134      	movs	r1, #52	; 0x34
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	4413      	add	r3, r2
 8001990:	335c      	adds	r3, #92	; 0x5c
 8001992:	681c      	ldr	r4, [r3, #0]
 8001994:	f7ff fd50 	bl	8001438 <BSP_LCD_GetXSize>
 8001998:	4602      	mov	r2, r0
 800199a:	88bb      	ldrh	r3, [r7, #4]
 800199c:	fb03 f202 	mul.w	r2, r3, r2
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4423      	add	r3, r4
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <BSP_LCD_DrawHLine+0x70>)
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	68fc      	ldr	r4, [r7, #12]
 80019b0:	887d      	ldrh	r5, [r7, #2]
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <BSP_LCD_DrawHLine+0x70>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	490b      	ldr	r1, [pc, #44]	; (80019e4 <BSP_LCD_DrawHLine+0x78>)
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	2300      	movs	r3, #0
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2301      	movs	r3, #1
 80019cc:	462a      	mov	r2, r5
 80019ce:	4621      	mov	r1, r4
 80019d0:	f000 fbb0 	bl	8002134 <LL_FillBuffer>
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bdb0      	pop	{r4, r5, r7, pc}
 80019dc:	200001c4 	.word	0x200001c4
 80019e0:	200003e0 	.word	0x200003e0
 80019e4:	200001c8 	.word	0x200001c8

080019e8 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80019e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
 80019f2:	460b      	mov	r3, r1
 80019f4:	80bb      	strh	r3, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <BSP_LCD_DrawVLine+0x78>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a18      	ldr	r2, [pc, #96]	; (8001a64 <BSP_LCD_DrawVLine+0x7c>)
 8001a04:	2134      	movs	r1, #52	; 0x34
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	335c      	adds	r3, #92	; 0x5c
 8001a0e:	681c      	ldr	r4, [r3, #0]
 8001a10:	f7ff fd12 	bl	8001438 <BSP_LCD_GetXSize>
 8001a14:	4602      	mov	r2, r0
 8001a16:	88bb      	ldrh	r3, [r7, #4]
 8001a18:	fb03 f202 	mul.w	r2, r3, r2
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4423      	add	r3, r4
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <BSP_LCD_DrawVLine+0x78>)
 8001a28:	681c      	ldr	r4, [r3, #0]
 8001a2a:	68fd      	ldr	r5, [r7, #12]
 8001a2c:	887e      	ldrh	r6, [r7, #2]
 8001a2e:	f7ff fd03 	bl	8001438 <BSP_LCD_GetXSize>
 8001a32:	4603      	mov	r3, r0
 8001a34:	1e59      	subs	r1, r3, #1
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <BSP_LCD_DrawVLine+0x78>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	480b      	ldr	r0, [pc, #44]	; (8001a68 <BSP_LCD_DrawVLine+0x80>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4403      	add	r3, r0
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	9100      	str	r1, [sp, #0]
 8001a4c:	4633      	mov	r3, r6
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4629      	mov	r1, r5
 8001a52:	4620      	mov	r0, r4
 8001a54:	f000 fb6e 	bl	8002134 <LL_FillBuffer>
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a60:	200001c4 	.word	0x200001c4
 8001a64:	200003e0 	.word	0x200003e0
 8001a68:	200001c8 	.word	0x200001c8

08001a6c <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
 8001a76:	460b      	mov	r3, r1
 8001a78:	80bb      	strh	r3, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	f1c3 0303 	rsb	r3, r3, #3
 8001a86:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001a90:	e0cf      	b.n	8001c32 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	4413      	add	r3, r2
 8001a9a:	b298      	uxth	r0, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	88ba      	ldrh	r2, [r7, #4]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	b29c      	uxth	r4, r3
 8001aa6:	4b67      	ldr	r3, [pc, #412]	; (8001c44 <BSP_LCD_DrawCircle+0x1d8>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4967      	ldr	r1, [pc, #412]	; (8001c48 <BSP_LCD_DrawCircle+0x1dc>)
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4621      	mov	r1, r4
 8001abc:	f000 fa5c 	bl	8001f78 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	88fa      	ldrh	r2, [r7, #6]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	b298      	uxth	r0, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	88ba      	ldrh	r2, [r7, #4]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	b29c      	uxth	r4, r3
 8001ad4:	4b5b      	ldr	r3, [pc, #364]	; (8001c44 <BSP_LCD_DrawCircle+0x1d8>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	495b      	ldr	r1, [pc, #364]	; (8001c48 <BSP_LCD_DrawCircle+0x1dc>)
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4621      	mov	r1, r4
 8001aea:	f000 fa45 	bl	8001f78 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	4413      	add	r3, r2
 8001af6:	b298      	uxth	r0, r3
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	88ba      	ldrh	r2, [r7, #4]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	b29c      	uxth	r4, r3
 8001b02:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <BSP_LCD_DrawCircle+0x1d8>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4950      	ldr	r1, [pc, #320]	; (8001c48 <BSP_LCD_DrawCircle+0x1dc>)
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4621      	mov	r1, r4
 8001b18:	f000 fa2e 	bl	8001f78 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	b298      	uxth	r0, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	88ba      	ldrh	r2, [r7, #4]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	b29c      	uxth	r4, r3
 8001b30:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <BSP_LCD_DrawCircle+0x1d8>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4944      	ldr	r1, [pc, #272]	; (8001c48 <BSP_LCD_DrawCircle+0x1dc>)
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4621      	mov	r1, r4
 8001b46:	f000 fa17 	bl	8001f78 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	4413      	add	r3, r2
 8001b52:	b298      	uxth	r0, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	88bb      	ldrh	r3, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b29c      	uxth	r4, r3
 8001b5e:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <BSP_LCD_DrawCircle+0x1d8>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4939      	ldr	r1, [pc, #228]	; (8001c48 <BSP_LCD_DrawCircle+0x1dc>)
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4621      	mov	r1, r4
 8001b74:	f000 fa00 	bl	8001f78 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	b298      	uxth	r0, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	88bb      	ldrh	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	b29c      	uxth	r4, r3
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <BSP_LCD_DrawCircle+0x1d8>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	492d      	ldr	r1, [pc, #180]	; (8001c48 <BSP_LCD_DrawCircle+0x1dc>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	f000 f9e9 	bl	8001f78 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4413      	add	r3, r2
 8001bae:	b298      	uxth	r0, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	88bb      	ldrh	r3, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b29c      	uxth	r4, r3
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <BSP_LCD_DrawCircle+0x1d8>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4922      	ldr	r1, [pc, #136]	; (8001c48 <BSP_LCD_DrawCircle+0x1dc>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4621      	mov	r1, r4
 8001bd0:	f000 f9d2 	bl	8001f78 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	88fa      	ldrh	r2, [r7, #6]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	b298      	uxth	r0, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	88bb      	ldrh	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	b29c      	uxth	r4, r3
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <BSP_LCD_DrawCircle+0x1d8>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4916      	ldr	r1, [pc, #88]	; (8001c48 <BSP_LCD_DrawCircle+0x1dc>)
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	f000 f9bb 	bl	8001f78 <BSP_LCD_DrawPixel>

    if (D < 0)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	da06      	bge.n	8001c16 <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	009a      	lsls	r2, r3, #2
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	4413      	add	r3, r2
 8001c10:	3306      	adds	r3, #6
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e00a      	b.n	8001c2c <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	009a      	lsls	r2, r3, #2
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	4413      	add	r3, r2
 8001c22:	330a      	adds	r3, #10
 8001c24:	617b      	str	r3, [r7, #20]
      CurY--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	f67f af2b 	bls.w	8001a92 <BSP_LCD_DrawCircle+0x26>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	200001c4 	.word	0x200001c4
 8001c48:	200001c8 	.word	0x200001c8

08001c4c <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af02      	add	r7, sp, #8
 8001c54:	4604      	mov	r4, r0
 8001c56:	4608      	mov	r0, r1
 8001c58:	4611      	mov	r1, r2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	80fb      	strh	r3, [r7, #6]
 8001c60:	4603      	mov	r3, r0
 8001c62:	80bb      	strh	r3, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <BSP_LCD_FillRect+0xa8>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4920      	ldr	r1, [pc, #128]	; (8001cf8 <BSP_LCD_FillRect+0xac>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fc50 	bl	8001528 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <BSP_LCD_FillRect+0xa8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <BSP_LCD_FillRect+0xb0>)
 8001c8e:	2134      	movs	r1, #52	; 0x34
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	335c      	adds	r3, #92	; 0x5c
 8001c98:	681c      	ldr	r4, [r3, #0]
 8001c9a:	f7ff fbcd 	bl	8001438 <BSP_LCD_GetXSize>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	88bb      	ldrh	r3, [r7, #4]
 8001ca2:	fb03 f202 	mul.w	r2, r3, r2
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4423      	add	r3, r4
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <BSP_LCD_FillRect+0xa8>)
 8001cb2:	681c      	ldr	r4, [r3, #0]
 8001cb4:	68fd      	ldr	r5, [r7, #12]
 8001cb6:	887e      	ldrh	r6, [r7, #2]
 8001cb8:	f8b7 8000 	ldrh.w	r8, [r7]
 8001cbc:	f7ff fbbc 	bl	8001438 <BSP_LCD_GetXSize>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	887b      	ldrh	r3, [r7, #2]
 8001cc4:	1ad1      	subs	r1, r2, r3
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <BSP_LCD_FillRect+0xa8>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <BSP_LCD_FillRect+0xac>)
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4403      	add	r3, r0
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	9100      	str	r1, [sp, #0]
 8001cdc:	4643      	mov	r3, r8
 8001cde:	4632      	mov	r2, r6
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f000 fa26 	bl	8002134 <LL_FillBuffer>
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200001c4 	.word	0x200001c4
 8001cf8:	200001c8 	.word	0x200001c8
 8001cfc:	200003e0 	.word	0x200003e0

08001d00 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	80bb      	strh	r3, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	f1c3 0303 	rsb	r3, r3, #3
 8001d1a:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001d20:	887b      	ldrh	r3, [r7, #2]
 8001d22:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d24:	4b44      	ldr	r3, [pc, #272]	; (8001e38 <BSP_LCD_FillCircle+0x138>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4944      	ldr	r1, [pc, #272]	; (8001e3c <BSP_LCD_FillCircle+0x13c>)
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fbf6 	bl	8001528 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001d3c:	e061      	b.n	8001e02 <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d021      	beq.n	8001d88 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	88fa      	ldrh	r2, [r7, #6]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	b298      	uxth	r0, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	88bb      	ldrh	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	b299      	uxth	r1, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	f7ff fe03 	bl	800196c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	88fa      	ldrh	r2, [r7, #6]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	b298      	uxth	r0, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	88ba      	ldrh	r2, [r7, #4]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	b299      	uxth	r1, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	f7ff fdf2 	bl	800196c <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d021      	beq.n	8001dd2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	b298      	uxth	r0, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	88ba      	ldrh	r2, [r7, #4]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	b299      	uxth	r1, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	f7ff fdde 	bl	800196c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	88fa      	ldrh	r2, [r7, #6]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	b298      	uxth	r0, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	88bb      	ldrh	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b299      	uxth	r1, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f7ff fdcd 	bl	800196c <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	da06      	bge.n	8001de6 <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	009a      	lsls	r2, r3, #2
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	4413      	add	r3, r2
 8001de0:	3306      	adds	r3, #6
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e00a      	b.n	8001dfc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	009a      	lsls	r2, r3, #2
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	4413      	add	r3, r2
 8001df2:	330a      	adds	r3, #10
 8001df4:	617b      	str	r3, [r7, #20]
      CurY--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d999      	bls.n	8001d3e <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <BSP_LCD_FillCircle+0x138>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	490b      	ldr	r1, [pc, #44]	; (8001e3c <BSP_LCD_FillCircle+0x13c>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fb83 	bl	8001528 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	88b9      	ldrh	r1, [r7, #4]
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fe1f 	bl	8001a6c <BSP_LCD_DrawCircle>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200001c4 	.word	0x200001c4
 8001e3c:	200001c8 	.word	0x200001c8

08001e40 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d80d      	bhi.n	8001e6c <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	2215      	movs	r2, #21
 8001e62:	2100      	movs	r1, #0
 8001e64:	480a      	ldr	r0, [pc, #40]	; (8001e90 <DSI_IO_WriteCmd+0x50>)
 8001e66:	f002 fe73 	bl	8004b50 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001e6a:	e00d      	b.n	8001e88 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	9200      	str	r2, [sp, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2239      	movs	r2, #57	; 0x39
 8001e80:	2100      	movs	r1, #0
 8001e82:	4803      	ldr	r0, [pc, #12]	; (8001e90 <DSI_IO_WriteCmd+0x50>)
 8001e84:	f002 fe86 	bl	8004b94 <HAL_DSI_LongWrite>
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000488 	.word	0x20000488

08001e94 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001e98:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001eaa:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001eb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	4a2b      	ldr	r2, [pc, #172]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001ec8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ecc:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	4a28      	ldr	r2, [pc, #160]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001ed4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ed8:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001ee0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001ef8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001efc:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001f04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f08:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001f10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001f28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f2c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <BSP_LCD_MspInit+0xd0>)
 8001f34:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001f38:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2103      	movs	r1, #3
 8001f3e:	2058      	movs	r0, #88	; 0x58
 8001f40:	f001 f9e3 	bl	800330a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f44:	2058      	movs	r0, #88	; 0x58
 8001f46:	f001 f9fc 	bl	8003342 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2103      	movs	r1, #3
 8001f4e:	205a      	movs	r0, #90	; 0x5a
 8001f50:	f001 f9db 	bl	800330a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f54:	205a      	movs	r0, #90	; 0x5a
 8001f56:	f001 f9f4 	bl	8003342 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2103      	movs	r1, #3
 8001f5e:	2062      	movs	r0, #98	; 0x62
 8001f60:	f001 f9d3 	bl	800330a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001f64:	2062      	movs	r0, #98	; 0x62
 8001f66:	f001 f9ec 	bl	8003342 <HAL_NVIC_EnableIRQ>
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800

08001f78 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	603a      	str	r2, [r7, #0]
 8001f82:	80fb      	strh	r3, [r7, #6]
 8001f84:	460b      	mov	r3, r1
 8001f86:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <BSP_LCD_DrawPixel+0x44>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <BSP_LCD_DrawPixel+0x48>)
 8001f8e:	2134      	movs	r1, #52	; 0x34
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	335c      	adds	r3, #92	; 0x5c
 8001f98:	681c      	ldr	r4, [r3, #0]
 8001f9a:	88bd      	ldrh	r5, [r7, #4]
 8001f9c:	f7ff fa4c 	bl	8001438 <BSP_LCD_GetXSize>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	fb03 f205 	mul.w	r2, r3, r5
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4423      	add	r3, r4
 8001fae:	461a      	mov	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbc:	200001c4 	.word	0x200001c4
 8001fc0:	200003e0 	.word	0x200003e0

08001fc4 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	603a      	str	r2, [r7, #0]
 8001fce:	80fb      	strh	r3, [r7, #6]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <DrawChar+0x168>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4953      	ldr	r1, [pc, #332]	; (8002130 <DrawChar+0x16c>)
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	3308      	adds	r3, #8
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	88db      	ldrh	r3, [r3, #6]
 8001ff2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001ff4:	4b4d      	ldr	r3, [pc, #308]	; (800212c <DrawChar+0x168>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	494d      	ldr	r1, [pc, #308]	; (8002130 <DrawChar+0x16c>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3308      	adds	r3, #8
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	889b      	ldrh	r3, [r3, #4]
 800200a:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 800200c:	8a3b      	ldrh	r3, [r7, #16]
 800200e:	3307      	adds	r3, #7
 8002010:	2b00      	cmp	r3, #0
 8002012:	da00      	bge.n	8002016 <DrawChar+0x52>
 8002014:	3307      	adds	r3, #7
 8002016:	10db      	asrs	r3, r3, #3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	b2da      	uxtb	r2, r3
 800201e:	8a3b      	ldrh	r3, [r7, #16]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	e076      	b.n	800211a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800202c:	8a3b      	ldrh	r3, [r7, #16]
 800202e:	3307      	adds	r3, #7
 8002030:	2b00      	cmp	r3, #0
 8002032:	da00      	bge.n	8002036 <DrawChar+0x72>
 8002034:	3307      	adds	r3, #7
 8002036:	10db      	asrs	r3, r3, #3
 8002038:	461a      	mov	r2, r3
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fb03 f302 	mul.w	r3, r3, r2
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4413      	add	r3, r2
 8002044:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002046:	8a3b      	ldrh	r3, [r7, #16]
 8002048:	3307      	adds	r3, #7
 800204a:	2b00      	cmp	r3, #0
 800204c:	da00      	bge.n	8002050 <DrawChar+0x8c>
 800204e:	3307      	adds	r3, #7
 8002050:	10db      	asrs	r3, r3, #3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d002      	beq.n	800205c <DrawChar+0x98>
 8002056:	2b02      	cmp	r3, #2
 8002058:	d004      	beq.n	8002064 <DrawChar+0xa0>
 800205a:	e00c      	b.n	8002076 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	617b      	str	r3, [r7, #20]
      break;
 8002062:	e016      	b.n	8002092 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	3201      	adds	r2, #1
 800206e:	7812      	ldrb	r2, [r2, #0]
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
      break;
 8002074:	e00d      	b.n	8002092 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	041a      	lsls	r2, r3, #16
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3301      	adds	r3, #1
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	4313      	orrs	r3, r2
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	3202      	adds	r2, #2
 800208a:	7812      	ldrb	r2, [r2, #0]
 800208c:	4313      	orrs	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
      break;
 8002090:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	e036      	b.n	8002106 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002098:	8a3a      	ldrh	r2, [r7, #16]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	1ad2      	subs	r2, r2, r3
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	4413      	add	r3, r2
 80020a2:	3b01      	subs	r3, #1
 80020a4:	2201      	movs	r2, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d012      	beq.n	80020da <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	4413      	add	r3, r2
 80020bc:	b298      	uxth	r0, r3
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <DrawChar+0x168>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	491b      	ldr	r1, [pc, #108]	; (8002130 <DrawChar+0x16c>)
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	88bb      	ldrh	r3, [r7, #4]
 80020d2:	4619      	mov	r1, r3
 80020d4:	f7ff ff50 	bl	8001f78 <BSP_LCD_DrawPixel>
 80020d8:	e012      	b.n	8002100 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	b29a      	uxth	r2, r3
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	4413      	add	r3, r2
 80020e2:	b298      	uxth	r0, r3
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <DrawChar+0x168>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4911      	ldr	r1, [pc, #68]	; (8002130 <DrawChar+0x16c>)
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	3304      	adds	r3, #4
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	88bb      	ldrh	r3, [r7, #4]
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7ff ff3c 	bl	8001f78 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	3301      	adds	r3, #1
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	8a3b      	ldrh	r3, [r7, #16]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	429a      	cmp	r2, r3
 800210c:	d3c4      	bcc.n	8002098 <DrawChar+0xd4>
      }
    }
    Ypos++;
 800210e:	88bb      	ldrh	r3, [r7, #4]
 8002110:	3301      	adds	r3, #1
 8002112:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	3301      	adds	r3, #1
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	8a7b      	ldrh	r3, [r7, #18]
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	429a      	cmp	r2, r3
 8002120:	d384      	bcc.n	800202c <DrawChar+0x68>
  }
}
 8002122:	bf00      	nop
 8002124:	3720      	adds	r7, #32
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200001c4 	.word	0x200001c4
 8002130:	200001c8 	.word	0x200001c8

08002134 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <LL_FillBuffer+0x68>)
 8002144:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002148:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <LL_FillBuffer+0x68>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8002150:	4a12      	ldr	r2, [pc, #72]	; (800219c <LL_FillBuffer+0x68>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <LL_FillBuffer+0x68>)
 8002158:	4a11      	ldr	r2, [pc, #68]	; (80021a0 <LL_FillBuffer+0x6c>)
 800215a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 800215c:	480f      	ldr	r0, [pc, #60]	; (800219c <LL_FillBuffer+0x68>)
 800215e:	f001 fac7 	bl	80036f0 <HAL_DMA2D_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d115      	bne.n	8002194 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8002168:	68f9      	ldr	r1, [r7, #12]
 800216a:	480c      	ldr	r0, [pc, #48]	; (800219c <LL_FillBuffer+0x68>)
 800216c:	f001 fc2e 	bl	80039cc <HAL_DMA2D_ConfigLayer>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10e      	bne.n	8002194 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69f9      	ldr	r1, [r7, #28]
 8002180:	4806      	ldr	r0, [pc, #24]	; (800219c <LL_FillBuffer+0x68>)
 8002182:	f001 fb0f 	bl	80037a4 <HAL_DMA2D_Start>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d103      	bne.n	8002194 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 800218c:	210a      	movs	r1, #10
 800218e:	4803      	ldr	r0, [pc, #12]	; (800219c <LL_FillBuffer+0x68>)
 8002190:	f001 fb33 	bl	80037fa <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000388 	.word	0x20000388
 80021a0:	4002b000 	.word	0x4002b000

080021a4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80021a8:	4b29      	ldr	r3, [pc, #164]	; (8002250 <BSP_SDRAM_Init+0xac>)
 80021aa:	4a2a      	ldr	r2, [pc, #168]	; (8002254 <BSP_SDRAM_Init+0xb0>)
 80021ac:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <BSP_SDRAM_Init+0xb4>)
 80021b0:	2202      	movs	r2, #2
 80021b2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <BSP_SDRAM_Init+0xb4>)
 80021b6:	2207      	movs	r2, #7
 80021b8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80021ba:	4b27      	ldr	r3, [pc, #156]	; (8002258 <BSP_SDRAM_Init+0xb4>)
 80021bc:	2204      	movs	r2, #4
 80021be:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <BSP_SDRAM_Init+0xb4>)
 80021c2:	2207      	movs	r2, #7
 80021c4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <BSP_SDRAM_Init+0xb4>)
 80021c8:	2202      	movs	r2, #2
 80021ca:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <BSP_SDRAM_Init+0xb4>)
 80021ce:	2202      	movs	r2, #2
 80021d0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80021d2:	4b21      	ldr	r3, [pc, #132]	; (8002258 <BSP_SDRAM_Init+0xb4>)
 80021d4:	2202      	movs	r2, #2
 80021d6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <BSP_SDRAM_Init+0xac>)
 80021da:	2200      	movs	r2, #0
 80021dc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <BSP_SDRAM_Init+0xac>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <BSP_SDRAM_Init+0xac>)
 80021e6:	2204      	movs	r2, #4
 80021e8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <BSP_SDRAM_Init+0xac>)
 80021ec:	2220      	movs	r2, #32
 80021ee:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <BSP_SDRAM_Init+0xac>)
 80021f2:	2240      	movs	r2, #64	; 0x40
 80021f4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <BSP_SDRAM_Init+0xac>)
 80021f8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80021fc:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <BSP_SDRAM_Init+0xac>)
 8002200:	2200      	movs	r2, #0
 8002202:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <BSP_SDRAM_Init+0xac>)
 8002206:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800220a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <BSP_SDRAM_Init+0xac>)
 800220e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002212:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <BSP_SDRAM_Init+0xac>)
 8002216:	2200      	movs	r2, #0
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800221a:	2100      	movs	r1, #0
 800221c:	480c      	ldr	r0, [pc, #48]	; (8002250 <BSP_SDRAM_Init+0xac>)
 800221e:	f000 f87f 	bl	8002320 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002222:	490d      	ldr	r1, [pc, #52]	; (8002258 <BSP_SDRAM_Init+0xb4>)
 8002224:	480a      	ldr	r0, [pc, #40]	; (8002250 <BSP_SDRAM_Init+0xac>)
 8002226:	f006 fab8 	bl	800879a <HAL_SDRAM_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <BSP_SDRAM_Init+0xb8>)
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	e002      	b.n	800223e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <BSP_SDRAM_Init+0xb8>)
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800223e:	f240 6003 	movw	r0, #1539	; 0x603
 8002242:	f000 f80d 	bl	8002260 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <BSP_SDRAM_Init+0xb8>)
 8002248:	781b      	ldrb	r3, [r3, #0]
}
 800224a:	4618      	mov	r0, r3
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200004a4 	.word	0x200004a4
 8002254:	a0000140 	.word	0xa0000140
 8002258:	20000270 	.word	0x20000270
 800225c:	20000058 	.word	0x20000058

08002260 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002272:	4b29      	ldr	r3, [pc, #164]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002274:	2210      	movs	r2, #16
 8002276:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800227a:	2201      	movs	r2, #1
 800227c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002288:	4923      	ldr	r1, [pc, #140]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800228a:	4824      	ldr	r0, [pc, #144]	; (800231c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800228c:	f006 fab9 	bl	8008802 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002290:	2001      	movs	r0, #1
 8002292:	f000 fb79 	bl	8002988 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002298:	2202      	movs	r2, #2
 800229a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800229c:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800229e:	2210      	movs	r2, #16
 80022a0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80022ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b2:	4919      	ldr	r1, [pc, #100]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022b4:	4819      	ldr	r0, [pc, #100]	; (800231c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022b6:	f006 faa4 	bl	8008802 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022bc:	2203      	movs	r2, #3
 80022be:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022c2:	2210      	movs	r2, #16
 80022c4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022c8:	2208      	movs	r2, #8
 80022ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d6:	4910      	ldr	r1, [pc, #64]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022d8:	4810      	ldr	r0, [pc, #64]	; (800231c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022da:	f006 fa92 	bl	8008802 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80022de:	f44f 730c 	mov.w	r3, #560	; 0x230
 80022e2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022e6:	2204      	movs	r2, #4
 80022e8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ec:	2210      	movs	r2, #16
 80022ee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a07      	ldr	r2, [pc, #28]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022fa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002300:	4905      	ldr	r1, [pc, #20]	; (8002318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002304:	f006 fa7d 	bl	8008802 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4804      	ldr	r0, [pc, #16]	; (800231c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800230c:	f006 faa4 	bl	8008858 <HAL_SDRAM_ProgramRefreshRate>
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000028c 	.word	0x2000028c
 800231c:	200004a4 	.word	0x200004a4

08002320 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002320:	b580      	push	{r7, lr}
 8002322:	b090      	sub	sp, #64	; 0x40
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800232a:	4b71      	ldr	r3, [pc, #452]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	4a70      	ldr	r2, [pc, #448]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6393      	str	r3, [r2, #56]	; 0x38
 8002336:	4b6e      	ldr	r3, [pc, #440]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 8002338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002342:	4b6b      	ldr	r3, [pc, #428]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a6a      	ldr	r2, [pc, #424]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 8002348:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b68      	ldr	r3, [pc, #416]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800235a:	4b65      	ldr	r3, [pc, #404]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a64      	ldr	r2, [pc, #400]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 8002360:	f043 0308 	orr.w	r3, r3, #8
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b62      	ldr	r3, [pc, #392]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002372:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a5e      	ldr	r2, [pc, #376]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 8002378:	f043 0310 	orr.w	r3, r3, #16
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b5c      	ldr	r3, [pc, #368]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800238a:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 8002390:	f043 0320 	orr.w	r3, r3, #32
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b56      	ldr	r3, [pc, #344]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023a2:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a52      	ldr	r2, [pc, #328]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 80023a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ba:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a4c      	ldr	r2, [pc, #304]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 80023c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a46      	ldr	r2, [pc, #280]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b44      	ldr	r3, [pc, #272]	; (80024f0 <BSP_SDRAM_MspInit+0x1d0>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80023f6:	230c      	movs	r3, #12
 80023f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80023fa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002404:	4619      	mov	r1, r3
 8002406:	483b      	ldr	r0, [pc, #236]	; (80024f4 <BSP_SDRAM_MspInit+0x1d4>)
 8002408:	f002 fc8a 	bl	8004d20 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800240c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002416:	4619      	mov	r1, r3
 8002418:	4837      	ldr	r0, [pc, #220]	; (80024f8 <BSP_SDRAM_MspInit+0x1d8>)
 800241a:	f002 fc81 	bl	8004d20 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800241e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002428:	4619      	mov	r1, r3
 800242a:	4834      	ldr	r0, [pc, #208]	; (80024fc <BSP_SDRAM_MspInit+0x1dc>)
 800242c:	f002 fc78 	bl	8004d20 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8002430:	f248 1337 	movw	r3, #33079	; 0x8137
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243a:	4619      	mov	r1, r3
 800243c:	4830      	ldr	r0, [pc, #192]	; (8002500 <BSP_SDRAM_MspInit+0x1e0>)
 800243e:	f002 fc6f 	bl	8004d20 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002442:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002448:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244c:	4619      	mov	r1, r3
 800244e:	482d      	ldr	r0, [pc, #180]	; (8002504 <BSP_SDRAM_MspInit+0x1e4>)
 8002450:	f002 fc66 	bl	8004d20 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002454:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 800245a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800245e:	4619      	mov	r1, r3
 8002460:	4829      	ldr	r0, [pc, #164]	; (8002508 <BSP_SDRAM_MspInit+0x1e8>)
 8002462:	f002 fc5d 	bl	8004d20 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 8002468:	2200      	movs	r2, #0
 800246a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002472:	4b26      	ldr	r3, [pc, #152]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 8002474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002478:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 800247c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002480:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 8002484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002488:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 800248c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002490:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002492:	4b1e      	ldr	r3, [pc, #120]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 8002494:	2200      	movs	r2, #0
 8002496:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002498:	4b1c      	ldr	r3, [pc, #112]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 800249a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800249e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 80024a8:	2203      	movs	r2, #3
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <BSP_SDRAM_MspInit+0x1f0>)
 80024bc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
 80024c4:	4a11      	ldr	r2, [pc, #68]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80024ca:	4810      	ldr	r0, [pc, #64]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 80024cc:	f001 f802 	bl	80034d4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80024d0:	480e      	ldr	r0, [pc, #56]	; (800250c <BSP_SDRAM_MspInit+0x1ec>)
 80024d2:	f000 ff51 	bl	8003378 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	210f      	movs	r1, #15
 80024da:	2038      	movs	r0, #56	; 0x38
 80024dc:	f000 ff15 	bl	800330a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80024e0:	2038      	movs	r0, #56	; 0x38
 80024e2:	f000 ff2e 	bl	8003342 <HAL_NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3740      	adds	r7, #64	; 0x40
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020c00 	.word	0x40020c00
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40021400 	.word	0x40021400
 8002500:	40021800 	.word	0x40021800
 8002504:	40021c00 	.word	0x40021c00
 8002508:	40022000 	.word	0x40022000
 800250c:	2000029c 	.word	0x2000029c
 8002510:	40026410 	.word	0x40026410

08002514 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	460a      	mov	r2, r1
 800251e:	80fb      	strh	r3, [r7, #6]
 8002520:	4613      	mov	r3, r2
 8002522:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <BSP_TS_Init+0xb0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a25      	ldr	r2, [pc, #148]	; (80025c8 <BSP_TS_Init+0xb4>)
 8002532:	7812      	ldrb	r2, [r2, #0]
 8002534:	b292      	uxth	r2, r2
 8002536:	4610      	mov	r0, r2
 8002538:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <BSP_TS_Init+0xb0>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2054      	movs	r0, #84	; 0x54
 8002540:	4798      	blx	r3
 8002542:	4603      	mov	r3, r0
 8002544:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8002546:	7b7b      	ldrb	r3, [r7, #13]
 8002548:	2b11      	cmp	r3, #17
 800254a:	d009      	beq.n	8002560 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <BSP_TS_Init+0xb0>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2070      	movs	r0, #112	; 0x70
 8002552:	4798      	blx	r3
 8002554:	4603      	mov	r3, r0
 8002556:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <BSP_TS_Init+0xb4>)
 800255a:	2270      	movs	r2, #112	; 0x70
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e002      	b.n	8002566 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <BSP_TS_Init+0xb4>)
 8002562:	2254      	movs	r2, #84	; 0x54
 8002564:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8002566:	7b7b      	ldrb	r3, [r7, #13]
 8002568:	2b11      	cmp	r3, #17
 800256a:	d002      	beq.n	8002572 <BSP_TS_Init+0x5e>
 800256c:	7bbb      	ldrb	r3, [r7, #14]
 800256e:	2b11      	cmp	r3, #17
 8002570:	d121      	bne.n	80025b6 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <BSP_TS_Init+0xb8>)
 8002574:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <BSP_TS_Init+0xb0>)
 8002576:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	88bb      	ldrh	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	d203      	bcs.n	8002588 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <BSP_TS_Init+0xbc>)
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e002      	b.n	800258e <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <BSP_TS_Init+0xbc>)
 800258a:	220c      	movs	r2, #12
 800258c:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d112      	bne.n	80025ba <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8002594:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <BSP_TS_Init+0xb8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <BSP_TS_Init+0xb4>)
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	b292      	uxth	r2, r2
 80025a0:	4610      	mov	r0, r2
 80025a2:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <BSP_TS_Init+0xb8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <BSP_TS_Init+0xb4>)
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	b292      	uxth	r2, r2
 80025b0:	4610      	mov	r0, r2
 80025b2:	4798      	blx	r3
    if(ts_status == TS_OK)
 80025b4:	e001      	b.n	80025ba <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 80025b6:	2303      	movs	r3, #3
 80025b8:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000301 	.word	0x20000301
 80025cc:	200002fc 	.word	0x200002fc
 80025d0:	20000300 	.word	0x20000300

080025d4 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 80025de:	f000 f94f 	bl	8002880 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 80025e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e6:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80025e8:	2301      	movs	r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025ec:	2302      	movs	r3, #2
 80025ee:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <BSP_TS_ITConfig+0x54>)
 80025f2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80025f4:	463b      	mov	r3, r7
 80025f6:	4619      	mov	r1, r3
 80025f8:	480c      	ldr	r0, [pc, #48]	; (800262c <BSP_TS_ITConfig+0x58>)
 80025fa:	f002 fb91 	bl	8004d20 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 80025fe:	2200      	movs	r2, #0
 8002600:	210f      	movs	r1, #15
 8002602:	2028      	movs	r0, #40	; 0x28
 8002604:	f000 fe81 	bl	800330a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8002608:	2028      	movs	r0, #40	; 0x28
 800260a:	f000 fe9a 	bl	8003342 <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <BSP_TS_ITConfig+0x5c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4a07      	ldr	r2, [pc, #28]	; (8002634 <BSP_TS_ITConfig+0x60>)
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	b292      	uxth	r2, r2
 800261a:	4610      	mov	r0, r2
 800261c:	4798      	blx	r3

  return (ts_status);
 800261e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	10210000 	.word	0x10210000
 800262c:	40022000 	.word	0x40022000
 8002630:	200002fc 	.word	0x200002fc
 8002634:	20000301 	.word	0x20000301

08002638 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002644:	4b89      	ldr	r3, [pc, #548]	; (800286c <BSP_TS_GetState+0x234>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	4a89      	ldr	r2, [pc, #548]	; (8002870 <BSP_TS_GetState+0x238>)
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	b292      	uxth	r2, r2
 8002650:	4610      	mov	r0, r2
 8002652:	4798      	blx	r3
 8002654:	4603      	mov	r3, r0
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80fe 	beq.w	8002862 <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e0f3      	b.n	8002854 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800266c:	4b7f      	ldr	r3, [pc, #508]	; (800286c <BSP_TS_GetState+0x234>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4a7f      	ldr	r2, [pc, #508]	; (8002870 <BSP_TS_GetState+0x238>)
 8002674:	7812      	ldrb	r2, [r2, #0]
 8002676:	b290      	uxth	r0, r2
 8002678:	f107 0110 	add.w	r1, r7, #16
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	0052      	lsls	r2, r2, #1
 8002680:	188c      	adds	r4, r1, r2
 8002682:	f107 010c 	add.w	r1, r7, #12
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	0052      	lsls	r2, r2, #1
 800268a:	440a      	add	r2, r1
 800268c:	4621      	mov	r1, r4
 800268e:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8002690:	4b78      	ldr	r3, [pc, #480]	; (8002874 <BSP_TS_GetState+0x23c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01d      	beq.n	80026d8 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	f107 0220 	add.w	r2, r7, #32
 80026a4:	4413      	add	r3, r2
 80026a6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80026aa:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	f107 0220 	add.w	r2, r7, #32
 80026b4:	4413      	add	r3, r2
 80026b6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	f107 0120 	add.w	r1, r7, #32
 80026c2:	440b      	add	r3, r1
 80026c4:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	f107 0220 	add.w	r2, r7, #32
 80026d0:	4413      	add	r3, r2
 80026d2:	8b3a      	ldrh	r2, [r7, #24]
 80026d4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 80026d8:	4b66      	ldr	r3, [pc, #408]	; (8002874 <BSP_TS_GetState+0x23c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d011      	beq.n	8002708 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	f107 0220 	add.w	r2, r7, #32
 80026ec:	4413      	add	r3, r2
 80026ee:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80026f2:	f240 331f 	movw	r3, #799	; 0x31f
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	f107 0120 	add.w	r1, r7, #32
 8002702:	440b      	add	r3, r1
 8002704:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8002708:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <BSP_TS_GetState+0x23c>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d011      	beq.n	8002738 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	f107 0220 	add.w	r2, r7, #32
 800271c:	4413      	add	r3, r2
 800271e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002722:	f240 13df 	movw	r3, #479	; 0x1df
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	b29a      	uxth	r2, r3
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	f107 0120 	add.w	r1, r7, #32
 8002732:	440b      	add	r3, r1
 8002734:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	f107 0220 	add.w	r2, r7, #32
 8002740:	4413      	add	r3, r2
 8002742:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002746:	4619      	mov	r1, r3
 8002748:	4a4b      	ldr	r2, [pc, #300]	; (8002878 <BSP_TS_GetState+0x240>)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002750:	4299      	cmp	r1, r3
 8002752:	d90e      	bls.n	8002772 <BSP_TS_GetState+0x13a>
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	f107 0220 	add.w	r2, r7, #32
 800275c:	4413      	add	r3, r2
 800275e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002762:	4945      	ldr	r1, [pc, #276]	; (8002878 <BSP_TS_GetState+0x240>)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800276a:	b29b      	uxth	r3, r3
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	b29b      	uxth	r3, r3
 8002770:	e00d      	b.n	800278e <BSP_TS_GetState+0x156>
 8002772:	4a41      	ldr	r2, [pc, #260]	; (8002878 <BSP_TS_GetState+0x240>)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277a:	b29a      	uxth	r2, r3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	f107 0120 	add.w	r1, r7, #32
 8002784:	440b      	add	r3, r1
 8002786:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	b29b      	uxth	r3, r3
 800278e:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	f107 0220 	add.w	r2, r7, #32
 8002798:	4413      	add	r3, r2
 800279a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800279e:	4619      	mov	r1, r3
 80027a0:	4a36      	ldr	r2, [pc, #216]	; (800287c <BSP_TS_GetState+0x244>)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a8:	4299      	cmp	r1, r3
 80027aa:	d90e      	bls.n	80027ca <BSP_TS_GetState+0x192>
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	f107 0220 	add.w	r2, r7, #32
 80027b4:	4413      	add	r3, r2
 80027b6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80027ba:	4930      	ldr	r1, [pc, #192]	; (800287c <BSP_TS_GetState+0x244>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	e00d      	b.n	80027e6 <BSP_TS_GetState+0x1ae>
 80027ca:	4a2c      	ldr	r2, [pc, #176]	; (800287c <BSP_TS_GetState+0x244>)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	f107 0120 	add.w	r1, r7, #32
 80027dc:	440b      	add	r3, r1
 80027de:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80027e8:	8afa      	ldrh	r2, [r7, #22]
 80027ea:	8abb      	ldrh	r3, [r7, #20]
 80027ec:	4413      	add	r3, r2
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	dd17      	ble.n	8002822 <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	f107 0220 	add.w	r2, r7, #32
 80027fa:	4413      	add	r3, r2
 80027fc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002800:	4619      	mov	r1, r3
 8002802:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <BSP_TS_GetState+0x240>)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	f107 0220 	add.w	r2, r7, #32
 8002812:	4413      	add	r3, r2
 8002814:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002818:	4619      	mov	r1, r3
 800281a:	4a18      	ldr	r2, [pc, #96]	; (800287c <BSP_TS_GetState+0x244>)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8002822:	4a15      	ldr	r2, [pc, #84]	; (8002878 <BSP_TS_GetState+0x240>)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282a:	b299      	uxth	r1, r3
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	460a      	mov	r2, r1
 8002836:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8002838:	4a10      	ldr	r2, [pc, #64]	; (800287c <BSP_TS_GetState+0x244>)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002840:	b299      	uxth	r1, r3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	460a      	mov	r2, r1
 800284c:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3301      	adds	r3, #1
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	4293      	cmp	r3, r2
 800285e:	f4ff af05 	bcc.w	800266c <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8002862:	7efb      	ldrb	r3, [r7, #27]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3724      	adds	r7, #36	; 0x24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd90      	pop	{r4, r7, pc}
 800286c:	200002fc 	.word	0x200002fc
 8002870:	20000301 	.word	0x20000301
 8002874:	20000300 	.word	0x20000300
 8002878:	20000304 	.word	0x20000304
 800287c:	2000030c 	.word	0x2000030c

08002880 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <BSP_TS_INT_MspInit+0x44>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <BSP_TS_INT_MspInit+0x44>)
 800288c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <BSP_TS_INT_MspInit+0x44>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800289e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028a2:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80028a8:	2301      	movs	r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4804      	ldr	r0, [pc, #16]	; (80028c8 <BSP_TS_INT_MspInit+0x48>)
 80028b6:	f002 fa33 	bl	8004d20 <HAL_GPIO_Init>
}
 80028ba:	bf00      	nop
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40022000 	.word	0x40022000

080028cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d0:	2003      	movs	r0, #3
 80028d2:	f000 fd0f 	bl	80032f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f000 f806 	bl	80028e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80028dc:	f009 f924 	bl	800bb28 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_InitTick+0x54>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_InitTick+0x58>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4619      	mov	r1, r3
 80028fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002902:	fbb2 f3f3 	udiv	r3, r2, r3
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fd29 	bl	800335e <HAL_SYSTICK_Config>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e00e      	b.n	8002934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b0f      	cmp	r3, #15
 800291a:	d80a      	bhi.n	8002932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800291c:	2200      	movs	r2, #0
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	f04f 30ff 	mov.w	r0, #4294967295
 8002924:	f000 fcf1 	bl	800330a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002928:	4a06      	ldr	r2, [pc, #24]	; (8002944 <HAL_InitTick+0x5c>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	e000      	b.n	8002934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000080 	.word	0x20000080
 8002940:	20000060 	.word	0x20000060
 8002944:	2000005c 	.word	0x2000005c

08002948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_IncTick+0x20>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_IncTick+0x24>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4413      	add	r3, r2
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <HAL_IncTick+0x24>)
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000060 	.word	0x20000060
 800296c:	200004d8 	.word	0x200004d8

08002970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return uwTick;
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_GetTick+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	200004d8 	.word	0x200004d8

08002988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002990:	f7ff ffee 	bl	8002970 <HAL_GetTick>
 8002994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d005      	beq.n	80029ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_Delay+0x40>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ae:	bf00      	nop
 80029b0:	f7ff ffde 	bl	8002970 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d8f7      	bhi.n	80029b0 <HAL_Delay+0x28>
  {
  }
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000060 	.word	0x20000060

080029cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e031      	b.n	8002a46 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f009 f8c0 	bl	800bb70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d116      	bne.n	8002a38 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_ADC_Init+0x84>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	f043 0202 	orr.w	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 faa0 	bl	8002f60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f023 0303 	bic.w	r3, r3, #3
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
 8002a36:	e001      	b.n	8002a3c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	ffffeefd 	.word	0xffffeefd

08002a54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_Start+0x1a>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e0a0      	b.n	8002bb0 <HAL_ADC_Start+0x15c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d018      	beq.n	8002ab6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a94:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <HAL_ADC_Start+0x168>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a49      	ldr	r2, [pc, #292]	; (8002bc0 <HAL_ADC_Start+0x16c>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0c9a      	lsrs	r2, r3, #18
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002aa8:	e002      	b.n	8002ab0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f9      	bne.n	8002aaa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d174      	bne.n	8002bae <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac8:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <HAL_ADC_Start+0x170>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afe:	d106      	bne.n	8002b0e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	f023 0206 	bic.w	r2, r3, #6
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44
 8002b0c:	e002      	b.n	8002b14 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b24:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002b26:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_ADC_Start+0x174>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d136      	bne.n	8002bae <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	e02d      	b.n	8002bae <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <HAL_ADC_Start+0x178>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d10e      	bne.n	8002b7a <HAL_ADC_Start+0x126>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d107      	bne.n	8002b7a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b78:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b7a:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_ADC_Start+0x174>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d113      	bne.n	8002bae <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <HAL_ADC_Start+0x17c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d10e      	bne.n	8002bae <HAL_ADC_Start+0x15a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d107      	bne.n	8002bae <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bac:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	20000080 	.word	0x20000080
 8002bc0:	431bde83 	.word	0x431bde83
 8002bc4:	fffff8fe 	.word	0xfffff8fe
 8002bc8:	40012300 	.word	0x40012300
 8002bcc:	40012000 	.word	0x40012000
 8002bd0:	40012200 	.word	0x40012200

08002bd4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf0:	d113      	bne.n	8002c1a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c00:	d10b      	bne.n	8002c1a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e05c      	b.n	8002cd4 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c1a:	f7ff fea9 	bl	8002970 <HAL_GetTick>
 8002c1e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c20:	e01a      	b.n	8002c58 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d016      	beq.n	8002c58 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <HAL_ADC_PollForConversion+0x6c>
 8002c30:	f7ff fe9e 	bl	8002970 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d20b      	bcs.n	8002c58 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f043 0204 	orr.w	r2, r3, #4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e03d      	b.n	8002cd4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d1dd      	bne.n	8002c22 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0212 	mvn.w	r2, #18
 8002c6e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d123      	bne.n	8002cd2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11f      	bne.n	8002cd2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d111      	bne.n	8002cd2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d105      	bne.n	8002cd2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x1c>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e115      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x248>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b09      	cmp	r3, #9
 8002d22:	d935      	bls.n	8002d90 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68d9      	ldr	r1, [r3, #12]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	3b1e      	subs	r3, #30
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43da      	mvns	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	400a      	ands	r2, r1
 8002d48:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7f      	ldr	r2, [pc, #508]	; (8002f4c <HAL_ADC_ConfigChannel+0x254>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d10a      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68d9      	ldr	r1, [r3, #12]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	061a      	lsls	r2, r3, #24
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	60da      	str	r2, [r3, #12]
 8002d68:	e035      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68d9      	ldr	r1, [r3, #12]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4403      	add	r3, r0
 8002d82:	3b1e      	subs	r3, #30
 8002d84:	409a      	lsls	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	e022      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6919      	ldr	r1, [r3, #16]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	2207      	movs	r2, #7
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	400a      	ands	r2, r1
 8002db2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6919      	ldr	r1, [r3, #16]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4403      	add	r3, r0
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d824      	bhi.n	8002e28 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	3b05      	subs	r3, #5
 8002df0:	221f      	movs	r2, #31
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	3b05      	subs	r3, #5
 8002e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	635a      	str	r2, [r3, #52]	; 0x34
 8002e26:	e04c      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	d824      	bhi.n	8002e7a <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	3b23      	subs	r3, #35	; 0x23
 8002e42:	221f      	movs	r2, #31
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	400a      	ands	r2, r1
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	3b23      	subs	r3, #35	; 0x23
 8002e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
 8002e78:	e023      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	3b41      	subs	r3, #65	; 0x41
 8002e8c:	221f      	movs	r2, #31
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	400a      	ands	r2, r1
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3b41      	subs	r3, #65	; 0x41
 8002eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a22      	ldr	r2, [pc, #136]	; (8002f50 <HAL_ADC_ConfigChannel+0x258>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d109      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x1e8>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b12      	cmp	r3, #18
 8002ed2:	d105      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002ed4:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <HAL_ADC_ConfigChannel+0x25c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4a1e      	ldr	r2, [pc, #120]	; (8002f54 <HAL_ADC_ConfigChannel+0x25c>)
 8002eda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ede:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <HAL_ADC_ConfigChannel+0x258>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d125      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x23e>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <HAL_ADC_ConfigChannel+0x254>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <HAL_ADC_ConfigChannel+0x204>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b11      	cmp	r3, #17
 8002efa:	d11c      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002efc:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <HAL_ADC_ConfigChannel+0x25c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <HAL_ADC_ConfigChannel+0x25c>)
 8002f02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f06:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <HAL_ADC_ConfigChannel+0x254>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d111      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_ADC_ConfigChannel+0x260>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <HAL_ADC_ConfigChannel+0x264>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	0c9a      	lsrs	r2, r3, #18
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f28:	e002      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f9      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	10000012 	.word	0x10000012
 8002f50:	40012000 	.word	0x40012000
 8002f54:	40012300 	.word	0x40012300
 8002f58:	20000080 	.word	0x20000080
 8002f5c:	431bde83 	.word	0x431bde83

08002f60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f68:	4b78      	ldr	r3, [pc, #480]	; (800314c <ADC_Init+0x1ec>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a77      	ldr	r2, [pc, #476]	; (800314c <ADC_Init+0x1ec>)
 8002f6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f72:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f74:	4b75      	ldr	r3, [pc, #468]	; (800314c <ADC_Init+0x1ec>)
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4973      	ldr	r1, [pc, #460]	; (800314c <ADC_Init+0x1ec>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	021a      	lsls	r2, r3, #8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6899      	ldr	r1, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	4a58      	ldr	r2, [pc, #352]	; (8003150 <ADC_Init+0x1f0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d022      	beq.n	800303a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003002:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6899      	ldr	r1, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6899      	ldr	r1, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	e00f      	b.n	800305a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003058:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0202 	bic.w	r2, r2, #2
 8003068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	005a      	lsls	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01b      	beq.n	80030c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003096:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	3b01      	subs	r3, #1
 80030b4:	035a      	lsls	r2, r3, #13
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	e007      	b.n	80030d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	051a      	lsls	r2, r3, #20
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6899      	ldr	r1, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003112:	025a      	lsls	r2, r3, #9
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6899      	ldr	r1, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	029a      	lsls	r2, r3, #10
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	609a      	str	r2, [r3, #8]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	40012300 	.word	0x40012300
 8003150:	0f000001 	.word	0x0f000001

08003154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <__NVIC_SetPriorityGrouping+0x40>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003170:	4013      	ands	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <__NVIC_SetPriorityGrouping+0x44>)
 800317e:	4313      	orrs	r3, r2
 8003180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003182:	4a04      	ldr	r2, [pc, #16]	; (8003194 <__NVIC_SetPriorityGrouping+0x40>)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	60d3      	str	r3, [r2, #12]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000ed00 	.word	0xe000ed00
 8003198:	05fa0000 	.word	0x05fa0000

0800319c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a0:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <__NVIC_GetPriorityGrouping+0x18>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	f003 0307 	and.w	r3, r3, #7
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	db0b      	blt.n	80031e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	4907      	ldr	r1, [pc, #28]	; (80031f0 <__NVIC_EnableIRQ+0x38>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2001      	movs	r0, #1
 80031da:	fa00 f202 	lsl.w	r2, r0, r2
 80031de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000e100 	.word	0xe000e100

080031f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	6039      	str	r1, [r7, #0]
 80031fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003204:	2b00      	cmp	r3, #0
 8003206:	db0a      	blt.n	800321e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	b2da      	uxtb	r2, r3
 800320c:	490c      	ldr	r1, [pc, #48]	; (8003240 <__NVIC_SetPriority+0x4c>)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	0112      	lsls	r2, r2, #4
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	440b      	add	r3, r1
 8003218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800321c:	e00a      	b.n	8003234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	b2da      	uxtb	r2, r3
 8003222:	4908      	ldr	r1, [pc, #32]	; (8003244 <__NVIC_SetPriority+0x50>)
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	3b04      	subs	r3, #4
 800322c:	0112      	lsls	r2, r2, #4
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	440b      	add	r3, r1
 8003232:	761a      	strb	r2, [r3, #24]
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000e100 	.word	0xe000e100
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003248:	b480      	push	{r7}
 800324a:	b089      	sub	sp, #36	; 0x24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f1c3 0307 	rsb	r3, r3, #7
 8003262:	2b04      	cmp	r3, #4
 8003264:	bf28      	it	cs
 8003266:	2304      	movcs	r3, #4
 8003268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3304      	adds	r3, #4
 800326e:	2b06      	cmp	r3, #6
 8003270:	d902      	bls.n	8003278 <NVIC_EncodePriority+0x30>
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3b03      	subs	r3, #3
 8003276:	e000      	b.n	800327a <NVIC_EncodePriority+0x32>
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	f04f 32ff 	mov.w	r2, #4294967295
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43da      	mvns	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	401a      	ands	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003290:	f04f 31ff 	mov.w	r1, #4294967295
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	43d9      	mvns	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a0:	4313      	orrs	r3, r2
         );
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3724      	adds	r7, #36	; 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c0:	d301      	bcc.n	80032c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032c2:	2301      	movs	r3, #1
 80032c4:	e00f      	b.n	80032e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032c6:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <SysTick_Config+0x40>)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ce:	210f      	movs	r1, #15
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	f7ff ff8e 	bl	80031f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <SysTick_Config+0x40>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032de:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <SysTick_Config+0x40>)
 80032e0:	2207      	movs	r2, #7
 80032e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	e000e010 	.word	0xe000e010

080032f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ff29 	bl	8003154 <__NVIC_SetPriorityGrouping>
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800331c:	f7ff ff3e 	bl	800319c <__NVIC_GetPriorityGrouping>
 8003320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	6978      	ldr	r0, [r7, #20]
 8003328:	f7ff ff8e 	bl	8003248 <NVIC_EncodePriority>
 800332c:	4602      	mov	r2, r0
 800332e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff5d 	bl	80031f4 <__NVIC_SetPriority>
}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	4603      	mov	r3, r0
 800334a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800334c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff31 	bl	80031b8 <__NVIC_EnableIRQ>
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ffa2 	bl	80032b0 <SysTick_Config>
 800336c:	4603      	mov	r3, r0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7ff faf4 	bl	8002970 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e099      	b.n	80034c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b4:	e00f      	b.n	80033d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033b6:	f7ff fadb 	bl	8002970 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d908      	bls.n	80033d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2203      	movs	r2, #3
 80033ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e078      	b.n	80034c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e8      	bne.n	80033b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <HAL_DMA_Init+0x158>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003402:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800340e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2b04      	cmp	r3, #4
 800342e:	d107      	bne.n	8003440 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	4313      	orrs	r3, r2
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 0307 	bic.w	r3, r3, #7
 8003456:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b04      	cmp	r3, #4
 8003468:	d117      	bne.n	800349a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00e      	beq.n	800349a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f8bd 	bl	80035fc <DMA_CheckFifoParam>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2240      	movs	r2, #64	; 0x40
 800348c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003496:	2301      	movs	r3, #1
 8003498:	e016      	b.n	80034c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f874 	bl	8003590 <DMA_CalcBaseAndBitshift>
 80034a8:	4603      	mov	r3, r0
 80034aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b0:	223f      	movs	r2, #63	; 0x3f
 80034b2:	409a      	lsls	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	e010803f 	.word	0xe010803f

080034d4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e050      	b.n	8003588 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d101      	bne.n	80034f6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
 80034f4:	e048      	b.n	8003588 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2200      	movs	r2, #0
 8003514:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2200      	movs	r2, #0
 8003524:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2200      	movs	r2, #0
 800352c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2221      	movs	r2, #33	; 0x21
 8003534:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f82a 	bl	8003590 <DMA_CalcBaseAndBitshift>
 800353c:	4603      	mov	r3, r0
 800353e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	223f      	movs	r2, #63	; 0x3f
 8003546:	409a      	lsls	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	3b10      	subs	r3, #16
 80035a0:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <DMA_CalcBaseAndBitshift+0x60>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035aa:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <DMA_CalcBaseAndBitshift+0x64>)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d908      	bls.n	80035d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <DMA_CalcBaseAndBitshift+0x68>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	1d1a      	adds	r2, r3, #4
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	659a      	str	r2, [r3, #88]	; 0x58
 80035ce:	e006      	b.n	80035de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <DMA_CalcBaseAndBitshift+0x68>)
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	aaaaaaab 	.word	0xaaaaaaab
 80035f4:	0800fd98 	.word	0x0800fd98
 80035f8:	fffffc00 	.word	0xfffffc00

080035fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d11f      	bne.n	8003656 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d855      	bhi.n	80036c8 <DMA_CheckFifoParam+0xcc>
 800361c:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <DMA_CheckFifoParam+0x28>)
 800361e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003622:	bf00      	nop
 8003624:	08003635 	.word	0x08003635
 8003628:	08003647 	.word	0x08003647
 800362c:	08003635 	.word	0x08003635
 8003630:	080036c9 	.word	0x080036c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d045      	beq.n	80036cc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003644:	e042      	b.n	80036cc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800364e:	d13f      	bne.n	80036d0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003654:	e03c      	b.n	80036d0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365e:	d121      	bne.n	80036a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b03      	cmp	r3, #3
 8003664:	d836      	bhi.n	80036d4 <DMA_CheckFifoParam+0xd8>
 8003666:	a201      	add	r2, pc, #4	; (adr r2, 800366c <DMA_CheckFifoParam+0x70>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	0800367d 	.word	0x0800367d
 8003670:	08003683 	.word	0x08003683
 8003674:	0800367d 	.word	0x0800367d
 8003678:	08003695 	.word	0x08003695
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
      break;
 8003680:	e02f      	b.n	80036e2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d024      	beq.n	80036d8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003692:	e021      	b.n	80036d8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800369c:	d11e      	bne.n	80036dc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036a2:	e01b      	b.n	80036dc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d902      	bls.n	80036b0 <DMA_CheckFifoParam+0xb4>
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d003      	beq.n	80036b6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036ae:	e018      	b.n	80036e2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      break;
 80036b4:	e015      	b.n	80036e2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00e      	beq.n	80036e0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
      break;
 80036c6:	e00b      	b.n	80036e0 <DMA_CheckFifoParam+0xe4>
      break;
 80036c8:	bf00      	nop
 80036ca:	e00a      	b.n	80036e2 <DMA_CheckFifoParam+0xe6>
      break;
 80036cc:	bf00      	nop
 80036ce:	e008      	b.n	80036e2 <DMA_CheckFifoParam+0xe6>
      break;
 80036d0:	bf00      	nop
 80036d2:	e006      	b.n	80036e2 <DMA_CheckFifoParam+0xe6>
      break;
 80036d4:	bf00      	nop
 80036d6:	e004      	b.n	80036e2 <DMA_CheckFifoParam+0xe6>
      break;
 80036d8:	bf00      	nop
 80036da:	e002      	b.n	80036e2 <DMA_CheckFifoParam+0xe6>
      break;   
 80036dc:	bf00      	nop
 80036de:	e000      	b.n	80036e2 <DMA_CheckFifoParam+0xe6>
      break;
 80036e0:	bf00      	nop
    }
  } 
  
  return status; 
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e049      	b.n	8003796 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f008 fa4a 	bl	800bbb0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003740:	f023 0107 	bic.w	r1, r3, #7
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <HAL_DMA2D_Init+0xb0>)
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68d1      	ldr	r1, [r2, #12]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	430b      	orrs	r3, r1
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	051a      	lsls	r2, r3, #20
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	055b      	lsls	r3, r3, #21
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	ffffc000 	.word	0xffffc000

080037a4 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_DMA2D_Start+0x1c>
 80037bc:	2302      	movs	r3, #2
 80037be:	e018      	b.n	80037f2 <HAL_DMA2D_Start+0x4e>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f994 	bl	8003b08 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d056      	beq.n	80038c4 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003816:	f7ff f8ab 	bl	8002970 <HAL_GetTick>
 800381a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800381c:	e04b      	b.n	80038b6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800382c:	2b00      	cmp	r3, #0
 800382e:	d023      	beq.n	8003878 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	f043 0202 	orr.w	r2, r3, #2
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2221      	movs	r2, #33	; 0x21
 8003862:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2204      	movs	r2, #4
 8003868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0a5      	b.n	80039c4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d01a      	beq.n	80038b6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003880:	f7ff f876 	bl	8002970 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <HAL_DMA2D_PollForTransfer+0x9c>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2203      	movs	r2, #3
 80038a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e086      	b.n	80039c4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ac      	beq.n	800381e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d061      	beq.n	80039aa <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80038e6:	f7ff f843 	bl	8002970 <HAL_GetTick>
 80038ea:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80038ec:	e056      	b.n	800399c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d02e      	beq.n	800395e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	f043 0204 	orr.w	r2, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003924:	f043 0202 	orr.w	r2, r3, #2
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393a:	f043 0201 	orr.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2229      	movs	r2, #41	; 0x29
 8003948:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2204      	movs	r2, #4
 800394e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e032      	b.n	80039c4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d01a      	beq.n	800399c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003966:	f7ff f803 	bl	8002970 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <HAL_DMA2D_PollForTransfer+0x182>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10f      	bne.n	800399c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2203      	movs	r2, #3
 800398c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e013      	b.n	80039c4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0a1      	beq.n	80038ee <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2212      	movs	r2, #18
 80039b0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_DMA2D_ConfigLayer+0x20>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e084      	b.n	8003af6 <HAL_DMA2D_ConfigLayer+0x12a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	3320      	adds	r3, #32
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003a20:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003a2c:	4b35      	ldr	r3, [pc, #212]	; (8003b04 <HAL_DMA2D_ConfigLayer+0x138>)
 8003a2e:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b0a      	cmp	r3, #10
 8003a36:	d003      	beq.n	8003a40 <HAL_DMA2D_ConfigLayer+0x74>
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b09      	cmp	r3, #9
 8003a3e:	d107      	bne.n	8003a50 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e005      	b.n	8003a5c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d120      	bne.n	8003aa4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	ea02 0103 	and.w	r1, r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b0a      	cmp	r3, #10
 8003a8a:	d003      	beq.n	8003a94 <HAL_DMA2D_ConfigLayer+0xc8>
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b09      	cmp	r3, #9
 8003a92:	d127      	bne.n	8003ae4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28
 8003aa2:	e01f      	b.n	8003ae4 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	ea02 0103 	and.w	r1, r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b0a      	cmp	r3, #10
 8003acc:	d003      	beq.n	8003ad6 <HAL_DMA2D_ConfigLayer+0x10a>
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b09      	cmp	r3, #9
 8003ad4:	d106      	bne.n	8003ae4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ae2:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	ff33000f 	.word	0xff33000f

08003b08 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b08b      	sub	sp, #44	; 0x2c
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	041a      	lsls	r2, r3, #16
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	431a      	orrs	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b40:	d174      	bne.n	8003c2c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b48:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b50:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b58:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d108      	bne.n	8003b7a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
 8003b78:	e053      	b.n	8003c22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d106      	bne.n	8003b90 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8e:	e048      	b.n	8003c22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d111      	bne.n	8003bbc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	0cdb      	lsrs	r3, r3, #19
 8003b9c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	0a9b      	lsrs	r3, r3, #10
 8003ba2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	08db      	lsrs	r3, r3, #3
 8003ba8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	02db      	lsls	r3, r3, #11
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	e032      	b.n	8003c22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d117      	bne.n	8003bf4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	0fdb      	lsrs	r3, r3, #31
 8003bc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	0cdb      	lsrs	r3, r3, #19
 8003bce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	0adb      	lsrs	r3, r3, #11
 8003bd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	08db      	lsrs	r3, r3, #3
 8003bda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	029b      	lsls	r3, r3, #10
 8003be4:	431a      	orrs	r2, r3
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	03db      	lsls	r3, r3, #15
 8003bea:	4313      	orrs	r3, r2
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf2:	e016      	b.n	8003c22 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	0f1b      	lsrs	r3, r3, #28
 8003bf8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	0d1b      	lsrs	r3, r3, #20
 8003bfe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	0b1b      	lsrs	r3, r3, #12
 8003c04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	011a      	lsls	r2, r3, #4
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	431a      	orrs	r2, r3
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	031b      	lsls	r3, r3, #12
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003c2a:	e003      	b.n	8003c34 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	60da      	str	r2, [r3, #12]
}
 8003c34:	bf00      	nop
 8003c36:	372c      	adds	r7, #44	; 0x2c
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	019a      	lsls	r2, r3, #6
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	041b      	lsls	r3, r3, #16
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c80:	f7fe fe76 	bl	8002970 <HAL_GetTick>
 8003c84:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003c86:	e009      	b.n	8003c9c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003c88:	f7fe fe72 	bl	8002970 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c96:	d901      	bls.n	8003c9c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e015      	b.n	8003cc8 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ee      	beq.n	8003c88 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	019a      	lsls	r2, r3, #6
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	ea42 0103 	orr.w	r1, r2, r3
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	041a      	lsls	r2, r3, #16
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e106      	b.n	8003ef2 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	7c5b      	ldrb	r3, [r3, #17]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f007 ff7e 	bl	800bbf0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003d0e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d22:	f7fe fe25 	bl	8002970 <HAL_GetTick>
 8003d26:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003d28:	e009      	b.n	8003d3e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003d2a:	f7fe fe21 	bl	8002970 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d38:	d901      	bls.n	8003d3e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e0d9      	b.n	8003ef2 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0ed      	beq.n	8003d2a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b68      	ldr	r3, [pc, #416]	; (8003efc <HAL_DSI_Init+0x22c>)
 8003d5c:	400b      	ands	r3, r1
 8003d5e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	009a      	lsls	r2, r3, #2
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	02db      	lsls	r3, r3, #11
 8003d76:	431a      	orrs	r2, r3
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003db2:	f7fe fddd 	bl	8002970 <HAL_GetTick>
 8003db6:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003db8:	e009      	b.n	8003dce <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003dba:	f7fe fdd9 	bl	8002970 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dc8:	d901      	bls.n	8003dce <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e091      	b.n	8003ef2 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0ed      	beq.n	8003dba <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0206 	orr.w	r2, r2, #6
 8003dee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0203 	bic.w	r2, r2, #3
 8003e02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0203 	bic.w	r2, r2, #3
 8003e30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e58:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6899      	ldr	r1, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_DSI_Init+0x1aa>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	e000      	b.n	8003e7c <HAL_DSI_Init+0x1ac>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <HAL_DSI_Init+0x230>)
 8003e82:	fb02 f203 	mul.w	r2, r2, r3
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003eb2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	fffc8603 	.word	0xfffc8603
 8003f00:	003d0900 	.word	0x003d0900

08003f04 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e066      	b.n	8003fe4 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2203      	movs	r2, #3
 8003f1a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0208 	bic.w	r2, r2, #8
 8003f30:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0206 	bic.w	r2, r2, #6
 8003f76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003fb6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f007 fe54 	bl	800bc78 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7c1b      	ldrb	r3, [r3, #16]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e0aa      	b.n	8004158 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2200      	movs	r2, #0
 800400e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2200      	movs	r2, #0
 8004018:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800403c:	430b      	orrs	r3, r1
 800403e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800405c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0202 	orr.w	r2, r2, #2
 8004098:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 020c 	orr.w	r2, r2, #12
 80040b6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d009      	beq.n	80040d8 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0210 	orr.w	r2, r2, #16
 80040d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0220 	orr.w	r2, r2, #32
 80040f2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004110:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800412e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004138:	2b00      	cmp	r3, #0
 800413a:	d009      	beq.n	8004150 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800414c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	7c1b      	ldrb	r3, [r3, #16]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_DSI_SetGenericVCID+0x16>
 8004176:	2302      	movs	r3, #2
 8004178:	e016      	b.n	80041a8 <HAL_DSI_SetGenericVCID+0x44>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0203 	bic.w	r2, r2, #3
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	7c1b      	ldrb	r3, [r3, #16]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_DSI_ConfigVideoMode+0x16>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e1ee      	b.n	80045a8 <HAL_DSI_ConfigVideoMode+0x3f4>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0203 	bic.w	r2, r2, #3
 8004202:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b8b      	ldr	r3, [pc, #556]	; (8004450 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004222:	400b      	ands	r3, r1
 8004224:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b84      	ldr	r3, [pc, #528]	; (8004454 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004244:	400b      	ands	r3, r1
 8004246:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b7b      	ldr	r3, [pc, #492]	; (8004454 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004266:	400b      	ands	r3, r1
 8004268:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699a      	ldr	r2, [r3, #24]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0203 	bic.w	r2, r2, #3
 800428a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68d9      	ldr	r1, [r3, #12]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695a      	ldr	r2, [r3, #20]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0207 	bic.w	r2, r2, #7
 80042ac:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6959      	ldr	r1, [r3, #20]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	431a      	orrs	r2, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 020f 	bic.w	r2, r2, #15
 80042da:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6919      	ldr	r1, [r3, #16]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 020e 	bic.w	r2, r2, #14
 80042fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	005a      	lsls	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d110      	bne.n	8004344 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004330:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6919      	ldr	r1, [r3, #16]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b42      	ldr	r3, [pc, #264]	; (8004458 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004350:	400b      	ands	r3, r1
 8004352:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b39      	ldr	r3, [pc, #228]	; (8004458 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004372:	400b      	ands	r3, r1
 8004374:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b32      	ldr	r3, [pc, #200]	; (800445c <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004394:	400b      	ands	r3, r1
 8004396:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80043b6:	400b      	ands	r3, r1
 80043b8:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b22      	ldr	r3, [pc, #136]	; (8004460 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80043d8:	400b      	ands	r3, r1
 80043da:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4b19      	ldr	r3, [pc, #100]	; (8004460 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80043fa:	400b      	ands	r3, r1
 80043fc:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <HAL_DSI_ConfigVideoMode+0x29c>)
 800441c:	400b      	ands	r3, r1
 800441e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004440:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800444c:	e00a      	b.n	8004464 <HAL_DSI_ConfigVideoMode+0x2b0>
 800444e:	bf00      	nop
 8004450:	ffffc000 	.word	0xffffc000
 8004454:	ffffe000 	.word	0xffffe000
 8004458:	fffff000 	.word	0xfffff000
 800445c:	ffff8000 	.word	0xffff8000
 8004460:	fffffc00 	.word	0xfffffc00
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800447a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6999      	ldr	r1, [r3, #24]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004486:	041a      	lsls	r2, r3, #16
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800449e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6999      	ldr	r1, [r3, #24]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004526:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	7c1b      	ldrb	r3, [r3, #16]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e0c5      	b.n	8004756 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0203 	bic.w	r2, r2, #3
 8004616:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68d9      	ldr	r1, [r3, #12]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695a      	ldr	r2, [r3, #20]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0207 	bic.w	r2, r2, #7
 8004638:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6959      	ldr	r1, [r3, #20]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	431a      	orrs	r2, r3
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 020f 	bic.w	r2, r2, #15
 8004666:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6919      	ldr	r1, [r3, #16]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 020e 	bic.w	r2, r2, #14
 800468a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	005a      	lsls	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b2c      	ldr	r3, [pc, #176]	; (8004764 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 80046b2:	400b      	ands	r3, r1
 80046b4:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80046d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0202 	orr.w	r2, r2, #2
 800474a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	ffff0000 	.word	0xffff0000

08004768 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	7c1b      	ldrb	r3, [r3, #16]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_DSI_ConfigCommand+0x16>
 800477a:	2302      	movs	r3, #2
 800477c:	e049      	b.n	8004812 <HAL_DSI_ConfigCommand+0xaa>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	4b24      	ldr	r3, [pc, #144]	; (8004820 <HAL_DSI_ConfigCommand+0xb8>)
 8004790:	400b      	ands	r3, r1
 8004792:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80047a2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80047a8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80047ae:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80047b4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80047ba:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80047c0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80047c6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80047cc:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80047d2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80047d8:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80047de:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0202 	bic.w	r2, r2, #2
 80047f6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	fef080ff 	.word	0xfef080ff

08004824 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	7c1b      	ldrb	r3, [r3, #16]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_DSI_ConfigFlowControl+0x16>
 8004836:	2302      	movs	r3, #2
 8004838:	e016      	b.n	8004868 <HAL_DSI_ConfigFlowControl+0x44>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 021f 	bic.w	r2, r2, #31
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	7c1b      	ldrb	r3, [r3, #16]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_DSI_ConfigPhyTimer+0x16>
 8004886:	2302      	movs	r3, #2
 8004888:	e058      	b.n	800493c <HAL_DSI_ConfigPhyTimer+0xc8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4293      	cmp	r3, r2
 800489a:	bf38      	it	cc
 800489c:	4613      	movcc	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80048b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	041a      	lsls	r2, r3, #16
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80048de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004918:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	7c1b      	ldrb	r3, [r3, #16]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_DSI_ConfigHostTimeouts+0x16>
 800495a:	2302      	movs	r3, #2
 800495c:	e0b4      	b.n	8004ac8 <HAL_DSI_ConfigHostTimeouts+0x180>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004972:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6899      	ldr	r1, [r3, #8]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	021a      	lsls	r2, r3, #8
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	b292      	uxth	r2, r2
 8004994:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	041a      	lsls	r2, r3, #16
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b47      	ldr	r3, [pc, #284]	; (8004ad4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80049b6:	400b      	ands	r3, r1
 80049b8:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b3f      	ldr	r3, [pc, #252]	; (8004ad4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80049d8:	400b      	ands	r3, r1
 80049da:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80049fc:	400b      	ands	r3, r1
 80049fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b2b      	ldr	r3, [pc, #172]	; (8004ad4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004a26:	400b      	ands	r3, r1
 8004a28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4b16      	ldr	r3, [pc, #88]	; (8004ad4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004a7a:	400b      	ands	r3, r1
 8004a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004aa4:	400b      	ands	r3, r1
 8004aa6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6a1a      	ldr	r2, [r3, #32]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	ffff0000 	.word	0xffff0000

08004ad8 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	7c1b      	ldrb	r3, [r3, #16]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_DSI_Start+0x14>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e02b      	b.n	8004b44 <HAL_DSI_Start+0x6c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004b14:	2300      	movs	r3, #0
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0208 	orr.w	r2, r2, #8
 8004b28:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	7c1b      	ldrb	r3, [r3, #16]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_DSI_ShortWrite+0x1a>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e010      	b.n	8004b8c <HAL_DSI_ShortWrite+0x3c>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff f879 	bl	8003c72 <DSI_ShortWrite>
 8004b80:	4603      	mov	r3, r0
 8004b82:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	741a      	strb	r2, [r3, #16]

  return status;
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08c      	sub	sp, #48	; 0x30
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba4:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	7c1b      	ldrb	r3, [r3, #16]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_DSI_LongWrite+0x1e>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e084      	b.n	8004cbc <HAL_DSI_LongWrite+0x128>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bb8:	f7fd feda 	bl	8002970 <HAL_GetTick>
 8004bbc:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004bbe:	e00c      	b.n	8004bda <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004bc0:	f7fd fed6 	bl	8002970 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bce:	d904      	bls.n	8004bda <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e070      	b.n	8004cbc <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0eb      	beq.n	8004bc0 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	bf28      	it	cs
 8004bf2:	2303      	movcs	r3, #3
 8004bf4:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	e00f      	b.n	8004c1c <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	4413      	add	r3, r2
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	623b      	str	r3, [r7, #32]
 8004c1c:	6a3a      	ldr	r2, [r7, #32]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d3eb      	bcc.n	8004bfc <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4413      	add	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004c3c:	e028      	b.n	8004c90 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	bf28      	it	cs
 8004c44:	2304      	movcs	r3, #4
 8004c46:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	623b      	str	r3, [r7, #32]
 8004c50:	e00e      	b.n	8004c70 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	4413      	add	r3, r2
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	6a3a      	ldr	r2, [r7, #32]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d3ec      	bcc.n	8004c52 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1d3      	bne.n	8004c3e <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004c9e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	f7fe ffc6 	bl	8003c40 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3728      	adds	r7, #40	; 0x28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	7c1b      	ldrb	r3, [r3, #16]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e01b      	b.n	8004d12 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004cf0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	065a      	lsls	r2, r3, #25
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
	...

08004d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	; 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d32:	2300      	movs	r3, #0
 8004d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	e175      	b.n	800502c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d40:	2201      	movs	r2, #1
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4013      	ands	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	f040 8164 	bne.w	8005026 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_Init+0x4e>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b12      	cmp	r3, #18
 8004d6c:	d123      	bne.n	8004db6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	08da      	lsrs	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3208      	adds	r2, #8
 8004d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	220f      	movs	r2, #15
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	08da      	lsrs	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3208      	adds	r2, #8
 8004db0:	69b9      	ldr	r1, [r7, #24]
 8004db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	2203      	movs	r2, #3
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f003 0203 	and.w	r2, r3, #3
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d00b      	beq.n	8004e0a <HAL_GPIO_Init+0xea>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d007      	beq.n	8004e0a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dfe:	2b11      	cmp	r3, #17
 8004e00:	d003      	beq.n	8004e0a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b12      	cmp	r3, #18
 8004e08:	d130      	bne.n	8004e6c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	2203      	movs	r2, #3
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e40:	2201      	movs	r2, #1
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	f003 0201 	and.w	r2, r3, #1
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	2203      	movs	r2, #3
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	4013      	ands	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80be 	beq.w	8005026 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eaa:	4b65      	ldr	r3, [pc, #404]	; (8005040 <HAL_GPIO_Init+0x320>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	4a64      	ldr	r2, [pc, #400]	; (8005040 <HAL_GPIO_Init+0x320>)
 8004eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb6:	4b62      	ldr	r3, [pc, #392]	; (8005040 <HAL_GPIO_Init+0x320>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004ec2:	4a60      	ldr	r2, [pc, #384]	; (8005044 <HAL_GPIO_Init+0x324>)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	089b      	lsrs	r3, r3, #2
 8004ec8:	3302      	adds	r3, #2
 8004eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	220f      	movs	r2, #15
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a57      	ldr	r2, [pc, #348]	; (8005048 <HAL_GPIO_Init+0x328>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d037      	beq.n	8004f5e <HAL_GPIO_Init+0x23e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a56      	ldr	r2, [pc, #344]	; (800504c <HAL_GPIO_Init+0x32c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d031      	beq.n	8004f5a <HAL_GPIO_Init+0x23a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a55      	ldr	r2, [pc, #340]	; (8005050 <HAL_GPIO_Init+0x330>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d02b      	beq.n	8004f56 <HAL_GPIO_Init+0x236>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a54      	ldr	r2, [pc, #336]	; (8005054 <HAL_GPIO_Init+0x334>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d025      	beq.n	8004f52 <HAL_GPIO_Init+0x232>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a53      	ldr	r2, [pc, #332]	; (8005058 <HAL_GPIO_Init+0x338>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01f      	beq.n	8004f4e <HAL_GPIO_Init+0x22e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a52      	ldr	r2, [pc, #328]	; (800505c <HAL_GPIO_Init+0x33c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d019      	beq.n	8004f4a <HAL_GPIO_Init+0x22a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a51      	ldr	r2, [pc, #324]	; (8005060 <HAL_GPIO_Init+0x340>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_GPIO_Init+0x226>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a50      	ldr	r2, [pc, #320]	; (8005064 <HAL_GPIO_Init+0x344>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00d      	beq.n	8004f42 <HAL_GPIO_Init+0x222>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a4f      	ldr	r2, [pc, #316]	; (8005068 <HAL_GPIO_Init+0x348>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d007      	beq.n	8004f3e <HAL_GPIO_Init+0x21e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a4e      	ldr	r2, [pc, #312]	; (800506c <HAL_GPIO_Init+0x34c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d101      	bne.n	8004f3a <HAL_GPIO_Init+0x21a>
 8004f36:	2309      	movs	r3, #9
 8004f38:	e012      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f3a:	230a      	movs	r3, #10
 8004f3c:	e010      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	e00e      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f42:	2307      	movs	r3, #7
 8004f44:	e00c      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f46:	2306      	movs	r3, #6
 8004f48:	e00a      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f4a:	2305      	movs	r3, #5
 8004f4c:	e008      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f4e:	2304      	movs	r3, #4
 8004f50:	e006      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f52:	2303      	movs	r3, #3
 8004f54:	e004      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e002      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	f002 0203 	and.w	r2, r2, #3
 8004f66:	0092      	lsls	r2, r2, #2
 8004f68:	4093      	lsls	r3, r2
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f70:	4934      	ldr	r1, [pc, #208]	; (8005044 <HAL_GPIO_Init+0x324>)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	089b      	lsrs	r3, r3, #2
 8004f76:	3302      	adds	r3, #2
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f7e:	4b3c      	ldr	r3, [pc, #240]	; (8005070 <HAL_GPIO_Init+0x350>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fa2:	4a33      	ldr	r2, [pc, #204]	; (8005070 <HAL_GPIO_Init+0x350>)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fa8:	4b31      	ldr	r3, [pc, #196]	; (8005070 <HAL_GPIO_Init+0x350>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fcc:	4a28      	ldr	r2, [pc, #160]	; (8005070 <HAL_GPIO_Init+0x350>)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fd2:	4b27      	ldr	r3, [pc, #156]	; (8005070 <HAL_GPIO_Init+0x350>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ff6:	4a1e      	ldr	r2, [pc, #120]	; (8005070 <HAL_GPIO_Init+0x350>)
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ffc:	4b1c      	ldr	r3, [pc, #112]	; (8005070 <HAL_GPIO_Init+0x350>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005020:	4a13      	ldr	r2, [pc, #76]	; (8005070 <HAL_GPIO_Init+0x350>)
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	3301      	adds	r3, #1
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	2b0f      	cmp	r3, #15
 8005030:	f67f ae86 	bls.w	8004d40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005034:	bf00      	nop
 8005036:	3724      	adds	r7, #36	; 0x24
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	40023800 	.word	0x40023800
 8005044:	40013800 	.word	0x40013800
 8005048:	40020000 	.word	0x40020000
 800504c:	40020400 	.word	0x40020400
 8005050:	40020800 	.word	0x40020800
 8005054:	40020c00 	.word	0x40020c00
 8005058:	40021000 	.word	0x40021000
 800505c:	40021400 	.word	0x40021400
 8005060:	40021800 	.word	0x40021800
 8005064:	40021c00 	.word	0x40021c00
 8005068:	40022000 	.word	0x40022000
 800506c:	40022400 	.word	0x40022400
 8005070:	40013c00 	.word	0x40013c00

08005074 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005086:	2300      	movs	r3, #0
 8005088:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e0d9      	b.n	8005244 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005090:	2201      	movs	r2, #1
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4013      	ands	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	f040 80c9 	bne.w	800523e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80050ac:	4a6a      	ldr	r2, [pc, #424]	; (8005258 <HAL_GPIO_DeInit+0x1e4>)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	089b      	lsrs	r3, r3, #2
 80050b2:	3302      	adds	r3, #2
 80050b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	220f      	movs	r2, #15
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a62      	ldr	r2, [pc, #392]	; (800525c <HAL_GPIO_DeInit+0x1e8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d037      	beq.n	8005146 <HAL_GPIO_DeInit+0xd2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a61      	ldr	r2, [pc, #388]	; (8005260 <HAL_GPIO_DeInit+0x1ec>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d031      	beq.n	8005142 <HAL_GPIO_DeInit+0xce>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a60      	ldr	r2, [pc, #384]	; (8005264 <HAL_GPIO_DeInit+0x1f0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d02b      	beq.n	800513e <HAL_GPIO_DeInit+0xca>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a5f      	ldr	r2, [pc, #380]	; (8005268 <HAL_GPIO_DeInit+0x1f4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d025      	beq.n	800513a <HAL_GPIO_DeInit+0xc6>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a5e      	ldr	r2, [pc, #376]	; (800526c <HAL_GPIO_DeInit+0x1f8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01f      	beq.n	8005136 <HAL_GPIO_DeInit+0xc2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a5d      	ldr	r2, [pc, #372]	; (8005270 <HAL_GPIO_DeInit+0x1fc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d019      	beq.n	8005132 <HAL_GPIO_DeInit+0xbe>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a5c      	ldr	r2, [pc, #368]	; (8005274 <HAL_GPIO_DeInit+0x200>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_GPIO_DeInit+0xba>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a5b      	ldr	r2, [pc, #364]	; (8005278 <HAL_GPIO_DeInit+0x204>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00d      	beq.n	800512a <HAL_GPIO_DeInit+0xb6>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a5a      	ldr	r2, [pc, #360]	; (800527c <HAL_GPIO_DeInit+0x208>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <HAL_GPIO_DeInit+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a59      	ldr	r2, [pc, #356]	; (8005280 <HAL_GPIO_DeInit+0x20c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d101      	bne.n	8005122 <HAL_GPIO_DeInit+0xae>
 800511e:	2309      	movs	r3, #9
 8005120:	e012      	b.n	8005148 <HAL_GPIO_DeInit+0xd4>
 8005122:	230a      	movs	r3, #10
 8005124:	e010      	b.n	8005148 <HAL_GPIO_DeInit+0xd4>
 8005126:	2308      	movs	r3, #8
 8005128:	e00e      	b.n	8005148 <HAL_GPIO_DeInit+0xd4>
 800512a:	2307      	movs	r3, #7
 800512c:	e00c      	b.n	8005148 <HAL_GPIO_DeInit+0xd4>
 800512e:	2306      	movs	r3, #6
 8005130:	e00a      	b.n	8005148 <HAL_GPIO_DeInit+0xd4>
 8005132:	2305      	movs	r3, #5
 8005134:	e008      	b.n	8005148 <HAL_GPIO_DeInit+0xd4>
 8005136:	2304      	movs	r3, #4
 8005138:	e006      	b.n	8005148 <HAL_GPIO_DeInit+0xd4>
 800513a:	2303      	movs	r3, #3
 800513c:	e004      	b.n	8005148 <HAL_GPIO_DeInit+0xd4>
 800513e:	2302      	movs	r3, #2
 8005140:	e002      	b.n	8005148 <HAL_GPIO_DeInit+0xd4>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <HAL_GPIO_DeInit+0xd4>
 8005146:	2300      	movs	r3, #0
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	f002 0203 	and.w	r2, r2, #3
 800514e:	0092      	lsls	r2, r2, #2
 8005150:	4093      	lsls	r3, r2
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	429a      	cmp	r2, r3
 8005156:	d132      	bne.n	80051be <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	220f      	movs	r2, #15
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005168:	4a3b      	ldr	r2, [pc, #236]	; (8005258 <HAL_GPIO_DeInit+0x1e4>)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	089b      	lsrs	r3, r3, #2
 800516e:	3302      	adds	r3, #2
 8005170:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	43da      	mvns	r2, r3
 8005178:	4837      	ldr	r0, [pc, #220]	; (8005258 <HAL_GPIO_DeInit+0x1e4>)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	089b      	lsrs	r3, r3, #2
 800517e:	400a      	ands	r2, r1
 8005180:	3302      	adds	r3, #2
 8005182:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005186:	4b3f      	ldr	r3, [pc, #252]	; (8005284 <HAL_GPIO_DeInit+0x210>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	43db      	mvns	r3, r3
 800518e:	493d      	ldr	r1, [pc, #244]	; (8005284 <HAL_GPIO_DeInit+0x210>)
 8005190:	4013      	ands	r3, r2
 8005192:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005194:	4b3b      	ldr	r3, [pc, #236]	; (8005284 <HAL_GPIO_DeInit+0x210>)
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	43db      	mvns	r3, r3
 800519c:	4939      	ldr	r1, [pc, #228]	; (8005284 <HAL_GPIO_DeInit+0x210>)
 800519e:	4013      	ands	r3, r2
 80051a0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80051a2:	4b38      	ldr	r3, [pc, #224]	; (8005284 <HAL_GPIO_DeInit+0x210>)
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	43db      	mvns	r3, r3
 80051aa:	4936      	ldr	r1, [pc, #216]	; (8005284 <HAL_GPIO_DeInit+0x210>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80051b0:	4b34      	ldr	r3, [pc, #208]	; (8005284 <HAL_GPIO_DeInit+0x210>)
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	43db      	mvns	r3, r3
 80051b8:	4932      	ldr	r1, [pc, #200]	; (8005284 <HAL_GPIO_DeInit+0x210>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	2103      	movs	r1, #3
 80051c8:	fa01 f303 	lsl.w	r3, r1, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	401a      	ands	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	08da      	lsrs	r2, r3, #3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3208      	adds	r2, #8
 80051dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	220f      	movs	r2, #15
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43db      	mvns	r3, r3
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	08d2      	lsrs	r2, r2, #3
 80051f4:	4019      	ands	r1, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3208      	adds	r2, #8
 80051fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	2103      	movs	r1, #3
 8005208:	fa01 f303 	lsl.w	r3, r1, r3
 800520c:	43db      	mvns	r3, r3
 800520e:	401a      	ands	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	2101      	movs	r1, #1
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	fa01 f303 	lsl.w	r3, r1, r3
 8005220:	43db      	mvns	r3, r3
 8005222:	401a      	ands	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	2103      	movs	r1, #3
 8005232:	fa01 f303 	lsl.w	r3, r1, r3
 8005236:	43db      	mvns	r3, r3
 8005238:	401a      	ands	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	3301      	adds	r3, #1
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b0f      	cmp	r3, #15
 8005248:	f67f af22 	bls.w	8005090 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	40013800 	.word	0x40013800
 800525c:	40020000 	.word	0x40020000
 8005260:	40020400 	.word	0x40020400
 8005264:	40020800 	.word	0x40020800
 8005268:	40020c00 	.word	0x40020c00
 800526c:	40021000 	.word	0x40021000
 8005270:	40021400 	.word	0x40021400
 8005274:	40021800 	.word	0x40021800
 8005278:	40021c00 	.word	0x40021c00
 800527c:	40022000 	.word	0x40022000
 8005280:	40022400 	.word	0x40022400
 8005284:	40013c00 	.word	0x40013c00

08005288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691a      	ldr	r2, [r3, #16]
 8005298:	887b      	ldrh	r3, [r7, #2]
 800529a:	4013      	ands	r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
 80052a4:	e001      	b.n	80052aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	807b      	strh	r3, [r7, #2]
 80052c4:	4613      	mov	r3, r2
 80052c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052c8:	787b      	ldrb	r3, [r7, #1]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ce:	887a      	ldrh	r2, [r7, #2]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80052d4:	e003      	b.n	80052de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80052d6:	887b      	ldrh	r3, [r7, #2]
 80052d8:	041a      	lsls	r2, r3, #16
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	619a      	str	r2, [r3, #24]
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	887b      	ldrh	r3, [r7, #2]
 80052fc:	401a      	ands	r2, r3
 80052fe:	887b      	ldrh	r3, [r7, #2]
 8005300:	429a      	cmp	r2, r3
 8005302:	d104      	bne.n	800530e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005304:	887b      	ldrh	r3, [r7, #2]
 8005306:	041a      	lsls	r2, r3, #16
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800530c:	e002      	b.n	8005314 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800530e:	887a      	ldrh	r2, [r7, #2]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	619a      	str	r2, [r3, #24]
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800532a:	4b08      	ldr	r3, [pc, #32]	; (800534c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800532c:	695a      	ldr	r2, [r3, #20]
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	4013      	ands	r3, r2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d006      	beq.n	8005344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005336:	4a05      	ldr	r2, [pc, #20]	; (800534c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005338:	88fb      	ldrh	r3, [r7, #6]
 800533a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	4618      	mov	r0, r3
 8005340:	f004 fd98 	bl	8009e74 <HAL_GPIO_EXTI_Callback>
  }
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40013c00 	.word	0x40013c00

08005350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e07f      	b.n	8005462 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f8a9 	bl	80054ce <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2224      	movs	r2, #36	; 0x24
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d107      	bne.n	80053ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	e006      	b.n	80053d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d104      	bne.n	80053ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6859      	ldr	r1, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <HAL_I2C_Init+0x11c>)
 80053f6:	430b      	orrs	r3, r1
 80053f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005408:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	ea42 0103 	orr.w	r1, r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	021a      	lsls	r2, r3, #8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69d9      	ldr	r1, [r3, #28]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1a      	ldr	r2, [r3, #32]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	02008000 	.word	0x02008000

08005470 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e021      	b.n	80054c6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2224      	movs	r2, #36	; 0x24
 8005486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0201 	bic.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f821 	bl	80054e2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	4608      	mov	r0, r1
 8005502:	4611      	mov	r1, r2
 8005504:	461a      	mov	r2, r3
 8005506:	4603      	mov	r3, r0
 8005508:	817b      	strh	r3, [r7, #10]
 800550a:	460b      	mov	r3, r1
 800550c:	813b      	strh	r3, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b20      	cmp	r3, #32
 800551c:	f040 80f9 	bne.w	8005712 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_I2C_Mem_Write+0x34>
 8005526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005532:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e0ed      	b.n	8005714 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_I2C_Mem_Write+0x4e>
 8005542:	2302      	movs	r3, #2
 8005544:	e0e6      	b.n	8005714 <HAL_I2C_Mem_Write+0x21c>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800554e:	f7fd fa0f 	bl	8002970 <HAL_GetTick>
 8005552:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	2319      	movs	r3, #25
 800555a:	2201      	movs	r2, #1
 800555c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fad1 	bl	8005b08 <I2C_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0d1      	b.n	8005714 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2221      	movs	r2, #33	; 0x21
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2240      	movs	r2, #64	; 0x40
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a3a      	ldr	r2, [r7, #32]
 800558a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005590:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005598:	88f8      	ldrh	r0, [r7, #6]
 800559a:	893a      	ldrh	r2, [r7, #8]
 800559c:	8979      	ldrh	r1, [r7, #10]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	4603      	mov	r3, r0
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f9e1 	bl	8005970 <I2C_RequestMemoryWrite>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0a9      	b.n	8005714 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2bff      	cmp	r3, #255	; 0xff
 80055c8:	d90e      	bls.n	80055e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	22ff      	movs	r2, #255	; 0xff
 80055ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	8979      	ldrh	r1, [r7, #10]
 80055d8:	2300      	movs	r3, #0
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fbb3 	bl	8005d4c <I2C_TransferConfig>
 80055e6:	e00f      	b.n	8005608 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	8979      	ldrh	r1, [r7, #10]
 80055fa:	2300      	movs	r3, #0
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fba2 	bl	8005d4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fabb 	bl	8005b88 <I2C_WaitOnTXISFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e07b      	b.n	8005714 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d034      	beq.n	80056c0 <HAL_I2C_Mem_Write+0x1c8>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565a:	2b00      	cmp	r3, #0
 800565c:	d130      	bne.n	80056c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	2200      	movs	r2, #0
 8005666:	2180      	movs	r1, #128	; 0x80
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 fa4d 	bl	8005b08 <I2C_WaitOnFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e04d      	b.n	8005714 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2bff      	cmp	r3, #255	; 0xff
 8005680:	d90e      	bls.n	80056a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	22ff      	movs	r2, #255	; 0xff
 8005686:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568c:	b2da      	uxtb	r2, r3
 800568e:	8979      	ldrh	r1, [r7, #10]
 8005690:	2300      	movs	r3, #0
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fb57 	bl	8005d4c <I2C_TransferConfig>
 800569e:	e00f      	b.n	80056c0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	8979      	ldrh	r1, [r7, #10]
 80056b2:	2300      	movs	r3, #0
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fb46 	bl	8005d4c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d19e      	bne.n	8005608 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fa9a 	bl	8005c08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e01a      	b.n	8005714 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2220      	movs	r2, #32
 80056e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6859      	ldr	r1, [r3, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <HAL_I2C_Mem_Write+0x224>)
 80056f2:	400b      	ands	r3, r1
 80056f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e000      	b.n	8005714 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005712:	2302      	movs	r3, #2
  }
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	fe00e800 	.word	0xfe00e800

08005720 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	4608      	mov	r0, r1
 800572a:	4611      	mov	r1, r2
 800572c:	461a      	mov	r2, r3
 800572e:	4603      	mov	r3, r0
 8005730:	817b      	strh	r3, [r7, #10]
 8005732:	460b      	mov	r3, r1
 8005734:	813b      	strh	r3, [r7, #8]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b20      	cmp	r3, #32
 8005744:	f040 80fd 	bne.w	8005942 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <HAL_I2C_Mem_Read+0x34>
 800574e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d105      	bne.n	8005760 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800575a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0f1      	b.n	8005944 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_I2C_Mem_Read+0x4e>
 800576a:	2302      	movs	r3, #2
 800576c:	e0ea      	b.n	8005944 <HAL_I2C_Mem_Read+0x224>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005776:	f7fd f8fb 	bl	8002970 <HAL_GetTick>
 800577a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	2319      	movs	r3, #25
 8005782:	2201      	movs	r2, #1
 8005784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f9bd 	bl	8005b08 <I2C_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e0d5      	b.n	8005944 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2222      	movs	r2, #34	; 0x22
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2240      	movs	r2, #64	; 0x40
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a3a      	ldr	r2, [r7, #32]
 80057b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057c0:	88f8      	ldrh	r0, [r7, #6]
 80057c2:	893a      	ldrh	r2, [r7, #8]
 80057c4:	8979      	ldrh	r1, [r7, #10]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	4603      	mov	r3, r0
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f921 	bl	8005a18 <I2C_RequestMemoryRead>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0ad      	b.n	8005944 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2bff      	cmp	r3, #255	; 0xff
 80057f0:	d90e      	bls.n	8005810 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	22ff      	movs	r2, #255	; 0xff
 80057f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	8979      	ldrh	r1, [r7, #10]
 8005800:	4b52      	ldr	r3, [pc, #328]	; (800594c <HAL_I2C_Mem_Read+0x22c>)
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 fa9f 	bl	8005d4c <I2C_TransferConfig>
 800580e:	e00f      	b.n	8005830 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581e:	b2da      	uxtb	r2, r3
 8005820:	8979      	ldrh	r1, [r7, #10]
 8005822:	4b4a      	ldr	r3, [pc, #296]	; (800594c <HAL_I2C_Mem_Read+0x22c>)
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fa8e 	bl	8005d4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	2200      	movs	r2, #0
 8005838:	2104      	movs	r1, #4
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 f964 	bl	8005b08 <I2C_WaitOnFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e07c      	b.n	8005944 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d034      	beq.n	80058f0 <HAL_I2C_Mem_Read+0x1d0>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588a:	2b00      	cmp	r3, #0
 800588c:	d130      	bne.n	80058f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	2200      	movs	r2, #0
 8005896:	2180      	movs	r1, #128	; 0x80
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f935 	bl	8005b08 <I2C_WaitOnFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e04d      	b.n	8005944 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2bff      	cmp	r3, #255	; 0xff
 80058b0:	d90e      	bls.n	80058d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	22ff      	movs	r2, #255	; 0xff
 80058b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	8979      	ldrh	r1, [r7, #10]
 80058c0:	2300      	movs	r3, #0
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fa3f 	bl	8005d4c <I2C_TransferConfig>
 80058ce:	e00f      	b.n	80058f0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	8979      	ldrh	r1, [r7, #10]
 80058e2:	2300      	movs	r3, #0
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fa2e 	bl	8005d4c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d19a      	bne.n	8005830 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f982 	bl	8005c08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e01a      	b.n	8005944 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2220      	movs	r2, #32
 8005914:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6859      	ldr	r1, [r3, #4]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <HAL_I2C_Mem_Read+0x230>)
 8005922:	400b      	ands	r3, r1
 8005924:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	e000      	b.n	8005944 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005942:	2302      	movs	r3, #2
  }
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	80002400 	.word	0x80002400
 8005950:	fe00e800 	.word	0xfe00e800

08005954 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005962:	b2db      	uxtb	r3, r3
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af02      	add	r7, sp, #8
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	4608      	mov	r0, r1
 800597a:	4611      	mov	r1, r2
 800597c:	461a      	mov	r2, r3
 800597e:	4603      	mov	r3, r0
 8005980:	817b      	strh	r3, [r7, #10]
 8005982:	460b      	mov	r3, r1
 8005984:	813b      	strh	r3, [r7, #8]
 8005986:	4613      	mov	r3, r2
 8005988:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	b2da      	uxtb	r2, r3
 800598e:	8979      	ldrh	r1, [r7, #10]
 8005990:	4b20      	ldr	r3, [pc, #128]	; (8005a14 <I2C_RequestMemoryWrite+0xa4>)
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f9d7 	bl	8005d4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	69b9      	ldr	r1, [r7, #24]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 f8f0 	bl	8005b88 <I2C_WaitOnTXISFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e02c      	b.n	8005a0c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d105      	bne.n	80059c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059b8:	893b      	ldrh	r3, [r7, #8]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	629a      	str	r2, [r3, #40]	; 0x28
 80059c2:	e015      	b.n	80059f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059c4:	893b      	ldrh	r3, [r7, #8]
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	69b9      	ldr	r1, [r7, #24]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f8d6 	bl	8005b88 <I2C_WaitOnTXISFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e012      	b.n	8005a0c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059e6:	893b      	ldrh	r3, [r7, #8]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2200      	movs	r2, #0
 80059f8:	2180      	movs	r1, #128	; 0x80
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 f884 	bl	8005b08 <I2C_WaitOnFlagUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	80002000 	.word	0x80002000

08005a18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	4608      	mov	r0, r1
 8005a22:	4611      	mov	r1, r2
 8005a24:	461a      	mov	r2, r3
 8005a26:	4603      	mov	r3, r0
 8005a28:	817b      	strh	r3, [r7, #10]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	813b      	strh	r3, [r7, #8]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	8979      	ldrh	r1, [r7, #10]
 8005a38:	4b20      	ldr	r3, [pc, #128]	; (8005abc <I2C_RequestMemoryRead+0xa4>)
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 f984 	bl	8005d4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	69b9      	ldr	r1, [r7, #24]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f89d 	bl	8005b88 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e02c      	b.n	8005ab2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d105      	bne.n	8005a6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a5e:	893b      	ldrh	r3, [r7, #8]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	629a      	str	r2, [r3, #40]	; 0x28
 8005a68:	e015      	b.n	8005a96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a6a:	893b      	ldrh	r3, [r7, #8]
 8005a6c:	0a1b      	lsrs	r3, r3, #8
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	69b9      	ldr	r1, [r7, #24]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f883 	bl	8005b88 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e012      	b.n	8005ab2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a8c:	893b      	ldrh	r3, [r7, #8]
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2140      	movs	r1, #64	; 0x40
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f831 	bl	8005b08 <I2C_WaitOnFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	80002000 	.word	0x80002000

08005ac0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d103      	bne.n	8005ade <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2200      	movs	r2, #0
 8005adc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d007      	beq.n	8005afc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	619a      	str	r2, [r3, #24]
  }
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	4613      	mov	r3, r2
 8005b16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b18:	e022      	b.n	8005b60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b20:	d01e      	beq.n	8005b60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b22:	f7fc ff25 	bl	8002970 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d302      	bcc.n	8005b38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d113      	bne.n	8005b60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3c:	f043 0220 	orr.w	r2, r3, #32
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e00f      	b.n	8005b80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	bf0c      	ite	eq
 8005b70:	2301      	moveq	r3, #1
 8005b72:	2300      	movne	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d0cd      	beq.n	8005b1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b94:	e02c      	b.n	8005bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f870 	bl	8005c80 <I2C_IsAcknowledgeFailed>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e02a      	b.n	8005c00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d01e      	beq.n	8005bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb2:	f7fc fedd 	bl	8002970 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d113      	bne.n	8005bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bcc:	f043 0220 	orr.w	r2, r3, #32
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e007      	b.n	8005c00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d1cb      	bne.n	8005b96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c14:	e028      	b.n	8005c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f830 	bl	8005c80 <I2C_IsAcknowledgeFailed>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e026      	b.n	8005c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2a:	f7fc fea1 	bl	8002970 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d302      	bcc.n	8005c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d113      	bne.n	8005c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e007      	b.n	8005c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d1cf      	bne.n	8005c16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f003 0310 	and.w	r3, r3, #16
 8005c96:	2b10      	cmp	r3, #16
 8005c98:	d151      	bne.n	8005d3e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c9a:	e022      	b.n	8005ce2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d01e      	beq.n	8005ce2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca4:	f7fc fe64 	bl	8002970 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <I2C_IsAcknowledgeFailed+0x3a>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d113      	bne.n	8005ce2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	f043 0220 	orr.w	r2, r3, #32
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e02e      	b.n	8005d40 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d1d5      	bne.n	8005c9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2210      	movs	r2, #16
 8005cf6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f7ff fedd 	bl	8005ac0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6859      	ldr	r1, [r3, #4]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <I2C_IsAcknowledgeFailed+0xc8>)
 8005d12:	400b      	ands	r3, r1
 8005d14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	f043 0204 	orr.w	r2, r3, #4
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	fe00e800 	.word	0xfe00e800

08005d4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	460b      	mov	r3, r1
 8005d58:	817b      	strh	r3, [r7, #10]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	0d5b      	lsrs	r3, r3, #21
 8005d68:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d6c:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <I2C_TransferConfig+0x58>)
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	43db      	mvns	r3, r3
 8005d72:	ea02 0103 	and.w	r1, r2, r3
 8005d76:	897b      	ldrh	r3, [r7, #10]
 8005d78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d7c:	7a7b      	ldrb	r3, [r7, #9]
 8005d7e:	041b      	lsls	r3, r3, #16
 8005d80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	03ff63ff 	.word	0x03ff63ff

08005da8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e0bf      	b.n	8005f3a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f005 ff70 	bl	800bcb4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005dea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6999      	ldr	r1, [r3, #24]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e00:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6899      	ldr	r1, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b4a      	ldr	r3, [pc, #296]	; (8005f44 <HAL_LTDC_Init+0x19c>)
 8005e1c:	400b      	ands	r3, r1
 8005e1e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	041b      	lsls	r3, r3, #16
 8005e26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6899      	ldr	r1, [r3, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68d9      	ldr	r1, [r3, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	4b3e      	ldr	r3, [pc, #248]	; (8005f44 <HAL_LTDC_Init+0x19c>)
 8005e4a:	400b      	ands	r3, r1
 8005e4c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	041b      	lsls	r3, r3, #16
 8005e54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68d9      	ldr	r1, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1a      	ldr	r2, [r3, #32]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6919      	ldr	r1, [r3, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b33      	ldr	r3, [pc, #204]	; (8005f44 <HAL_LTDC_Init+0x19c>)
 8005e78:	400b      	ands	r3, r1
 8005e7a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	041b      	lsls	r3, r3, #16
 8005e82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6919      	ldr	r1, [r3, #16]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6959      	ldr	r1, [r3, #20]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4b27      	ldr	r3, [pc, #156]	; (8005f44 <HAL_LTDC_Init+0x19c>)
 8005ea6:	400b      	ands	r3, r1
 8005ea8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	041b      	lsls	r3, r3, #16
 8005eb0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6959      	ldr	r1, [r3, #20]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005ed8:	041b      	lsls	r3, r3, #16
 8005eda:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005eea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0206 	orr.w	r2, r2, #6
 8005f16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	f000f800 	.word	0xf000f800

08005f48 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f48:	b5b0      	push	{r4, r5, r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_LTDC_ConfigLayer+0x1a>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e02c      	b.n	8005fbc <HAL_LTDC_ConfigLayer+0x74>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2134      	movs	r1, #52	; 0x34
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4614      	mov	r4, r2
 8005f86:	461d      	mov	r5, r3
 8005f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 f811 	bl	8005fc4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bdb0      	pop	{r4, r5, r7, pc}

08005fc4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b089      	sub	sp, #36	; 0x24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	0c1b      	lsrs	r3, r3, #16
 8005fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe0:	4413      	add	r3, r2
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	01db      	lsls	r3, r3, #7
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3384      	adds	r3, #132	; 0x84
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	01d2      	lsls	r2, r2, #7
 8006000:	440a      	add	r2, r1
 8006002:	3284      	adds	r2, #132	; 0x84
 8006004:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006008:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	0c1b      	lsrs	r3, r3, #16
 8006016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800601a:	4413      	add	r3, r2
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4619      	mov	r1, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	01db      	lsls	r3, r3, #7
 8006028:	440b      	add	r3, r1
 800602a:	3384      	adds	r3, #132	; 0x84
 800602c:	4619      	mov	r1, r3
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4313      	orrs	r3, r2
 8006032:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006042:	4413      	add	r3, r2
 8006044:	041b      	lsls	r3, r3, #16
 8006046:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	01db      	lsls	r3, r3, #7
 8006052:	4413      	add	r3, r2
 8006054:	3384      	adds	r3, #132	; 0x84
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	6812      	ldr	r2, [r2, #0]
 800605c:	4611      	mov	r1, r2
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	01d2      	lsls	r2, r2, #7
 8006062:	440a      	add	r2, r1
 8006064:	3284      	adds	r2, #132	; 0x84
 8006066:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800606a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800607a:	4413      	add	r3, r2
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4619      	mov	r1, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	01db      	lsls	r3, r3, #7
 8006088:	440b      	add	r3, r1
 800608a:	3384      	adds	r3, #132	; 0x84
 800608c:	4619      	mov	r1, r3
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4313      	orrs	r3, r2
 8006092:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	01db      	lsls	r3, r3, #7
 800609e:	4413      	add	r3, r2
 80060a0:	3384      	adds	r3, #132	; 0x84
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	6812      	ldr	r2, [r2, #0]
 80060a8:	4611      	mov	r1, r2
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	01d2      	lsls	r2, r2, #7
 80060ae:	440a      	add	r2, r1
 80060b0:	3284      	adds	r2, #132	; 0x84
 80060b2:	f023 0307 	bic.w	r3, r3, #7
 80060b6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	01db      	lsls	r3, r3, #7
 80060c2:	4413      	add	r3, r2
 80060c4:	3384      	adds	r3, #132	; 0x84
 80060c6:	461a      	mov	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80060de:	041b      	lsls	r3, r3, #16
 80060e0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	061b      	lsls	r3, r3, #24
 80060e8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	01db      	lsls	r3, r3, #7
 80060f4:	4413      	add	r3, r2
 80060f6:	3384      	adds	r3, #132	; 0x84
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	01db      	lsls	r3, r3, #7
 8006104:	4413      	add	r3, r2
 8006106:	3384      	adds	r3, #132	; 0x84
 8006108:	461a      	mov	r2, r3
 800610a:	2300      	movs	r3, #0
 800610c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006114:	461a      	mov	r2, r3
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	431a      	orrs	r2, r3
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	431a      	orrs	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4619      	mov	r1, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	01db      	lsls	r3, r3, #7
 8006128:	440b      	add	r3, r1
 800612a:	3384      	adds	r3, #132	; 0x84
 800612c:	4619      	mov	r1, r3
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	01db      	lsls	r3, r3, #7
 800613e:	4413      	add	r3, r2
 8006140:	3384      	adds	r3, #132	; 0x84
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	4611      	mov	r1, r2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	01d2      	lsls	r2, r2, #7
 800614e:	440a      	add	r2, r1
 8006150:	3284      	adds	r2, #132	; 0x84
 8006152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006156:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	01db      	lsls	r3, r3, #7
 8006162:	4413      	add	r3, r2
 8006164:	3384      	adds	r3, #132	; 0x84
 8006166:	461a      	mov	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	01db      	lsls	r3, r3, #7
 8006178:	4413      	add	r3, r2
 800617a:	3384      	adds	r3, #132	; 0x84
 800617c:	69da      	ldr	r2, [r3, #28]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4619      	mov	r1, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	01db      	lsls	r3, r3, #7
 8006188:	440b      	add	r3, r1
 800618a:	3384      	adds	r3, #132	; 0x84
 800618c:	4619      	mov	r1, r3
 800618e:	4b58      	ldr	r3, [pc, #352]	; (80062f0 <LTDC_SetConfig+0x32c>)
 8006190:	4013      	ands	r3, r2
 8006192:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	68f9      	ldr	r1, [r7, #12]
 800619e:	6809      	ldr	r1, [r1, #0]
 80061a0:	4608      	mov	r0, r1
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	01c9      	lsls	r1, r1, #7
 80061a6:	4401      	add	r1, r0
 80061a8:	3184      	adds	r1, #132	; 0x84
 80061aa:	4313      	orrs	r3, r2
 80061ac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	01db      	lsls	r3, r3, #7
 80061b8:	4413      	add	r3, r2
 80061ba:	3384      	adds	r3, #132	; 0x84
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	01db      	lsls	r3, r3, #7
 80061c8:	4413      	add	r3, r2
 80061ca:	3384      	adds	r3, #132	; 0x84
 80061cc:	461a      	mov	r2, r3
 80061ce:	2300      	movs	r3, #0
 80061d0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	01db      	lsls	r3, r3, #7
 80061dc:	4413      	add	r3, r2
 80061de:	3384      	adds	r3, #132	; 0x84
 80061e0:	461a      	mov	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d102      	bne.n	80061f6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80061f0:	2304      	movs	r3, #4
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	e01b      	b.n	800622e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d102      	bne.n	8006204 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80061fe:	2303      	movs	r3, #3
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	e014      	b.n	800622e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b04      	cmp	r3, #4
 800620a:	d00b      	beq.n	8006224 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006210:	2b02      	cmp	r3, #2
 8006212:	d007      	beq.n	8006224 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006218:	2b03      	cmp	r3, #3
 800621a:	d003      	beq.n	8006224 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006220:	2b07      	cmp	r3, #7
 8006222:	d102      	bne.n	800622a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006224:	2302      	movs	r3, #2
 8006226:	61fb      	str	r3, [r7, #28]
 8006228:	e001      	b.n	800622e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800622a:	2301      	movs	r3, #1
 800622c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	01db      	lsls	r3, r3, #7
 8006238:	4413      	add	r3, r2
 800623a:	3384      	adds	r3, #132	; 0x84
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	6812      	ldr	r2, [r2, #0]
 8006242:	4611      	mov	r1, r2
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	01d2      	lsls	r2, r2, #7
 8006248:	440a      	add	r2, r1
 800624a:	3284      	adds	r2, #132	; 0x84
 800624c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006250:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	041a      	lsls	r2, r3, #16
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6859      	ldr	r1, [r3, #4]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	1acb      	subs	r3, r1, r3
 8006268:	69f9      	ldr	r1, [r7, #28]
 800626a:	fb01 f303 	mul.w	r3, r1, r3
 800626e:	3303      	adds	r3, #3
 8006270:	68f9      	ldr	r1, [r7, #12]
 8006272:	6809      	ldr	r1, [r1, #0]
 8006274:	4608      	mov	r0, r1
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	01c9      	lsls	r1, r1, #7
 800627a:	4401      	add	r1, r0
 800627c:	3184      	adds	r1, #132	; 0x84
 800627e:	4313      	orrs	r3, r2
 8006280:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	01db      	lsls	r3, r3, #7
 800628c:	4413      	add	r3, r2
 800628e:	3384      	adds	r3, #132	; 0x84
 8006290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	01db      	lsls	r3, r3, #7
 800629c:	440b      	add	r3, r1
 800629e:	3384      	adds	r3, #132	; 0x84
 80062a0:	4619      	mov	r1, r3
 80062a2:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <LTDC_SetConfig+0x330>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	01db      	lsls	r3, r3, #7
 80062b2:	4413      	add	r3, r2
 80062b4:	3384      	adds	r3, #132	; 0x84
 80062b6:	461a      	mov	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	01db      	lsls	r3, r3, #7
 80062c8:	4413      	add	r3, r2
 80062ca:	3384      	adds	r3, #132	; 0x84
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	4611      	mov	r1, r2
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	01d2      	lsls	r2, r2, #7
 80062d8:	440a      	add	r2, r1
 80062da:	3284      	adds	r2, #132	; 0x84
 80062dc:	f043 0301 	orr.w	r3, r3, #1
 80062e0:	6013      	str	r3, [r2, #0]
}
 80062e2:	bf00      	nop
 80062e4:	3724      	adds	r7, #36	; 0x24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	fffff8f8 	.word	0xfffff8f8
 80062f4:	fffff800 	.word	0xfffff800

080062f8 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800630a:	2200      	movs	r2, #0
 800630c:	e001      	b.n	8006312 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800630e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d102      	bne.n	8006324 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800631e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006322:	e000      	b.n	8006326 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006324:	2200      	movs	r2, #0
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8006332:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006336:	e000      	b.n	800633a <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8006338:	2200      	movs	r2, #0
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006342:	1e5a      	subs	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	4413      	add	r3, r2
 8006352:	1e5a      	subs	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	441a      	add	r2, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	4413      	add	r3, r2
 8006368:	1e5a      	subs	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	441a      	add	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	441a      	add	r2, r3
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	4413      	add	r3, r2
 8006384:	1e5a      	subs	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80063a2:	4b23      	ldr	r3, [pc, #140]	; (8006430 <HAL_PWREx_EnableOverDrive+0x98>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	4a22      	ldr	r2, [pc, #136]	; (8006430 <HAL_PWREx_EnableOverDrive+0x98>)
 80063a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ac:	6413      	str	r3, [r2, #64]	; 0x40
 80063ae:	4b20      	ldr	r3, [pc, #128]	; (8006430 <HAL_PWREx_EnableOverDrive+0x98>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80063ba:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063c6:	f7fc fad3 	bl	8002970 <HAL_GetTick>
 80063ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063cc:	e009      	b.n	80063e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063ce:	f7fc facf 	bl	8002970 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063dc:	d901      	bls.n	80063e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e022      	b.n	8006428 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063e2:	4b14      	ldr	r3, [pc, #80]	; (8006434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ee:	d1ee      	bne.n	80063ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80063f0:	4b10      	ldr	r3, [pc, #64]	; (8006434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a0f      	ldr	r2, [pc, #60]	; (8006434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063fc:	f7fc fab8 	bl	8002970 <HAL_GetTick>
 8006400:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006402:	e009      	b.n	8006418 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006404:	f7fc fab4 	bl	8002970 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006412:	d901      	bls.n	8006418 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e007      	b.n	8006428 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006418:	4b06      	ldr	r3, [pc, #24]	; (8006434 <HAL_PWREx_EnableOverDrive+0x9c>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006424:	d1ee      	bne.n	8006404 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40023800 	.word	0x40023800
 8006434:	40007000 	.word	0x40007000

08006438 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8006440:	2300      	movs	r3, #0
 8006442:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e25e      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8087 	beq.w	800656a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800645c:	4b96      	ldr	r3, [pc, #600]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f003 030c 	and.w	r3, r3, #12
 8006464:	2b04      	cmp	r3, #4
 8006466:	d00c      	beq.n	8006482 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006468:	4b93      	ldr	r3, [pc, #588]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 030c 	and.w	r3, r3, #12
 8006470:	2b08      	cmp	r3, #8
 8006472:	d112      	bne.n	800649a <HAL_RCC_OscConfig+0x62>
 8006474:	4b90      	ldr	r3, [pc, #576]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800647c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006480:	d10b      	bne.n	800649a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006482:	4b8d      	ldr	r3, [pc, #564]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d06c      	beq.n	8006568 <HAL_RCC_OscConfig+0x130>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d168      	bne.n	8006568 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e238      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a2:	d106      	bne.n	80064b2 <HAL_RCC_OscConfig+0x7a>
 80064a4:	4b84      	ldr	r3, [pc, #528]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a83      	ldr	r2, [pc, #524]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80064aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	e02e      	b.n	8006510 <HAL_RCC_OscConfig+0xd8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10c      	bne.n	80064d4 <HAL_RCC_OscConfig+0x9c>
 80064ba:	4b7f      	ldr	r3, [pc, #508]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a7e      	ldr	r2, [pc, #504]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80064c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	4b7c      	ldr	r3, [pc, #496]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a7b      	ldr	r2, [pc, #492]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80064cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	e01d      	b.n	8006510 <HAL_RCC_OscConfig+0xd8>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064dc:	d10c      	bne.n	80064f8 <HAL_RCC_OscConfig+0xc0>
 80064de:	4b76      	ldr	r3, [pc, #472]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a75      	ldr	r2, [pc, #468]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80064e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	4b73      	ldr	r3, [pc, #460]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a72      	ldr	r2, [pc, #456]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80064f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	e00b      	b.n	8006510 <HAL_RCC_OscConfig+0xd8>
 80064f8:	4b6f      	ldr	r3, [pc, #444]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a6e      	ldr	r2, [pc, #440]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80064fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	4b6c      	ldr	r3, [pc, #432]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a6b      	ldr	r2, [pc, #428]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 800650a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800650e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d013      	beq.n	8006540 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006518:	f7fc fa2a 	bl	8002970 <HAL_GetTick>
 800651c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800651e:	e008      	b.n	8006532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006520:	f7fc fa26 	bl	8002970 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b64      	cmp	r3, #100	; 0x64
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e1ec      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006532:	4b61      	ldr	r3, [pc, #388]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0f0      	beq.n	8006520 <HAL_RCC_OscConfig+0xe8>
 800653e:	e014      	b.n	800656a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006540:	f7fc fa16 	bl	8002970 <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006548:	f7fc fa12 	bl	8002970 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b64      	cmp	r3, #100	; 0x64
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e1d8      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800655a:	4b57      	ldr	r3, [pc, #348]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f0      	bne.n	8006548 <HAL_RCC_OscConfig+0x110>
 8006566:	e000      	b.n	800656a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d069      	beq.n	800664a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006576:	4b50      	ldr	r3, [pc, #320]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 030c 	and.w	r3, r3, #12
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00b      	beq.n	800659a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006582:	4b4d      	ldr	r3, [pc, #308]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 030c 	and.w	r3, r3, #12
 800658a:	2b08      	cmp	r3, #8
 800658c:	d11c      	bne.n	80065c8 <HAL_RCC_OscConfig+0x190>
 800658e:	4b4a      	ldr	r3, [pc, #296]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d116      	bne.n	80065c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800659a:	4b47      	ldr	r3, [pc, #284]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <HAL_RCC_OscConfig+0x17a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d001      	beq.n	80065b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e1ac      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b2:	4b41      	ldr	r3, [pc, #260]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	493d      	ldr	r1, [pc, #244]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065c6:	e040      	b.n	800664a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d023      	beq.n	8006618 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065d0:	4b39      	ldr	r3, [pc, #228]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a38      	ldr	r2, [pc, #224]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065dc:	f7fc f9c8 	bl	8002970 <HAL_GetTick>
 80065e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065e4:	f7fc f9c4 	bl	8002970 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e18a      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065f6:	4b30      	ldr	r3, [pc, #192]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0f0      	beq.n	80065e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006602:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	4929      	ldr	r1, [pc, #164]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006612:	4313      	orrs	r3, r2
 8006614:	600b      	str	r3, [r1, #0]
 8006616:	e018      	b.n	800664a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006618:	4b27      	ldr	r3, [pc, #156]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a26      	ldr	r2, [pc, #152]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fc f9a4 	bl	8002970 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800662c:	f7fc f9a0 	bl	8002970 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e166      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800663e:	4b1e      	ldr	r3, [pc, #120]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f0      	bne.n	800662c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d038      	beq.n	80066c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d019      	beq.n	8006692 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800665e:	4b16      	ldr	r3, [pc, #88]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006662:	4a15      	ldr	r2, [pc, #84]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666a:	f7fc f981 	bl	8002970 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006670:	e008      	b.n	8006684 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006672:	f7fc f97d 	bl	8002970 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e143      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006684:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0f0      	beq.n	8006672 <HAL_RCC_OscConfig+0x23a>
 8006690:	e01a      	b.n	80066c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006692:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006696:	4a08      	ldr	r2, [pc, #32]	; (80066b8 <HAL_RCC_OscConfig+0x280>)
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800669e:	f7fc f967 	bl	8002970 <HAL_GetTick>
 80066a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066a4:	e00a      	b.n	80066bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066a6:	f7fc f963 	bl	8002970 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d903      	bls.n	80066bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e129      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
 80066b8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066bc:	4b95      	ldr	r3, [pc, #596]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80066be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1ee      	bne.n	80066a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 80a4 	beq.w	800681e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066d6:	4b8f      	ldr	r3, [pc, #572]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10d      	bne.n	80066fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e2:	4b8c      	ldr	r3, [pc, #560]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	4a8b      	ldr	r2, [pc, #556]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80066e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ec:	6413      	str	r3, [r2, #64]	; 0x40
 80066ee:	4b89      	ldr	r3, [pc, #548]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80066fa:	2301      	movs	r3, #1
 80066fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066fe:	4b86      	ldr	r3, [pc, #536]	; (8006918 <HAL_RCC_OscConfig+0x4e0>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d118      	bne.n	800673c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800670a:	4b83      	ldr	r3, [pc, #524]	; (8006918 <HAL_RCC_OscConfig+0x4e0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a82      	ldr	r2, [pc, #520]	; (8006918 <HAL_RCC_OscConfig+0x4e0>)
 8006710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006716:	f7fc f92b 	bl	8002970 <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800671c:	e008      	b.n	8006730 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800671e:	f7fc f927 	bl	8002970 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b64      	cmp	r3, #100	; 0x64
 800672a:	d901      	bls.n	8006730 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e0ed      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006730:	4b79      	ldr	r3, [pc, #484]	; (8006918 <HAL_RCC_OscConfig+0x4e0>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0f0      	beq.n	800671e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d106      	bne.n	8006752 <HAL_RCC_OscConfig+0x31a>
 8006744:	4b73      	ldr	r3, [pc, #460]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	4a72      	ldr	r2, [pc, #456]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	6713      	str	r3, [r2, #112]	; 0x70
 8006750:	e02d      	b.n	80067ae <HAL_RCC_OscConfig+0x376>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10c      	bne.n	8006774 <HAL_RCC_OscConfig+0x33c>
 800675a:	4b6e      	ldr	r3, [pc, #440]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	4a6d      	ldr	r2, [pc, #436]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	6713      	str	r3, [r2, #112]	; 0x70
 8006766:	4b6b      	ldr	r3, [pc, #428]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	4a6a      	ldr	r2, [pc, #424]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 800676c:	f023 0304 	bic.w	r3, r3, #4
 8006770:	6713      	str	r3, [r2, #112]	; 0x70
 8006772:	e01c      	b.n	80067ae <HAL_RCC_OscConfig+0x376>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2b05      	cmp	r3, #5
 800677a:	d10c      	bne.n	8006796 <HAL_RCC_OscConfig+0x35e>
 800677c:	4b65      	ldr	r3, [pc, #404]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 800677e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006780:	4a64      	ldr	r2, [pc, #400]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 8006782:	f043 0304 	orr.w	r3, r3, #4
 8006786:	6713      	str	r3, [r2, #112]	; 0x70
 8006788:	4b62      	ldr	r3, [pc, #392]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 800678a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678c:	4a61      	ldr	r2, [pc, #388]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 800678e:	f043 0301 	orr.w	r3, r3, #1
 8006792:	6713      	str	r3, [r2, #112]	; 0x70
 8006794:	e00b      	b.n	80067ae <HAL_RCC_OscConfig+0x376>
 8006796:	4b5f      	ldr	r3, [pc, #380]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	4a5e      	ldr	r2, [pc, #376]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	6713      	str	r3, [r2, #112]	; 0x70
 80067a2:	4b5c      	ldr	r3, [pc, #368]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	4a5b      	ldr	r2, [pc, #364]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80067a8:	f023 0304 	bic.w	r3, r3, #4
 80067ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d015      	beq.n	80067e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b6:	f7fc f8db 	bl	8002970 <HAL_GetTick>
 80067ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067bc:	e00a      	b.n	80067d4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067be:	f7fc f8d7 	bl	8002970 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e09b      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d4:	4b4f      	ldr	r3, [pc, #316]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80067d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0ee      	beq.n	80067be <HAL_RCC_OscConfig+0x386>
 80067e0:	e014      	b.n	800680c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e2:	f7fc f8c5 	bl	8002970 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067e8:	e00a      	b.n	8006800 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ea:	f7fc f8c1 	bl	8002970 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e085      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006800:	4b44      	ldr	r3, [pc, #272]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 8006802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1ee      	bne.n	80067ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800680c:	7dfb      	ldrb	r3, [r7, #23]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d105      	bne.n	800681e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006812:	4b40      	ldr	r3, [pc, #256]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	4a3f      	ldr	r2, [pc, #252]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 8006818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800681c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d071      	beq.n	800690a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006826:	4b3b      	ldr	r3, [pc, #236]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 030c 	and.w	r3, r3, #12
 800682e:	2b08      	cmp	r3, #8
 8006830:	d069      	beq.n	8006906 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d14b      	bne.n	80068d2 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683a:	4b36      	ldr	r3, [pc, #216]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a35      	ldr	r2, [pc, #212]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 8006840:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006846:	f7fc f893 	bl	8002970 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684e:	f7fc f88f 	bl	8002970 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e055      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006860:	4b2c      	ldr	r3, [pc, #176]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f0      	bne.n	800684e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	69da      	ldr	r2, [r3, #28]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	019b      	lsls	r3, r3, #6
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	3b01      	subs	r3, #1
 8006886:	041b      	lsls	r3, r3, #16
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	061b      	lsls	r3, r3, #24
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	071b      	lsls	r3, r3, #28
 8006898:	491e      	ldr	r1, [pc, #120]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 800689a:	4313      	orrs	r3, r2
 800689c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800689e:	4b1d      	ldr	r3, [pc, #116]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1c      	ldr	r2, [pc, #112]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80068a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068aa:	f7fc f861 	bl	8002970 <HAL_GetTick>
 80068ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068b2:	f7fc f85d 	bl	8002970 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e023      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068c4:	4b13      	ldr	r3, [pc, #76]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f0      	beq.n	80068b2 <HAL_RCC_OscConfig+0x47a>
 80068d0:	e01b      	b.n	800690a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d2:	4b10      	ldr	r3, [pc, #64]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a0f      	ldr	r2, [pc, #60]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80068d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068de:	f7fc f847 	bl	8002970 <HAL_GetTick>
 80068e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068e6:	f7fc f843 	bl	8002970 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e009      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068f8:	4b06      	ldr	r3, [pc, #24]	; (8006914 <HAL_RCC_OscConfig+0x4dc>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1f0      	bne.n	80068e6 <HAL_RCC_OscConfig+0x4ae>
 8006904:	e001      	b.n	800690a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	40023800 	.word	0x40023800
 8006918:	40007000 	.word	0x40007000

0800691c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e0ce      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006934:	4b69      	ldr	r3, [pc, #420]	; (8006adc <HAL_RCC_ClockConfig+0x1c0>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	429a      	cmp	r2, r3
 8006940:	d910      	bls.n	8006964 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006942:	4b66      	ldr	r3, [pc, #408]	; (8006adc <HAL_RCC_ClockConfig+0x1c0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f023 020f 	bic.w	r2, r3, #15
 800694a:	4964      	ldr	r1, [pc, #400]	; (8006adc <HAL_RCC_ClockConfig+0x1c0>)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	4313      	orrs	r3, r2
 8006950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006952:	4b62      	ldr	r3, [pc, #392]	; (8006adc <HAL_RCC_ClockConfig+0x1c0>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d001      	beq.n	8006964 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0b6      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d020      	beq.n	80069b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800697c:	4b58      	ldr	r3, [pc, #352]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	4a57      	ldr	r2, [pc, #348]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8006982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006994:	4b52      	ldr	r3, [pc, #328]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	4a51      	ldr	r2, [pc, #324]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800699a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800699e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a0:	4b4f      	ldr	r3, [pc, #316]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	494c      	ldr	r1, [pc, #304]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d040      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d107      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069c6:	4b46      	ldr	r3, [pc, #280]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d115      	bne.n	80069fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e07d      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d107      	bne.n	80069ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069de:	4b40      	ldr	r3, [pc, #256]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e071      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ee:	4b3c      	ldr	r3, [pc, #240]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e069      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069fe:	4b38      	ldr	r3, [pc, #224]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f023 0203 	bic.w	r2, r3, #3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	4935      	ldr	r1, [pc, #212]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a10:	f7fb ffae 	bl	8002970 <HAL_GetTick>
 8006a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a16:	e00a      	b.n	8006a2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a18:	f7fb ffaa 	bl	8002970 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e051      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 020c 	and.w	r2, r3, #12
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d1eb      	bne.n	8006a18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a40:	4b26      	ldr	r3, [pc, #152]	; (8006adc <HAL_RCC_ClockConfig+0x1c0>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 030f 	and.w	r3, r3, #15
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d210      	bcs.n	8006a70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a4e:	4b23      	ldr	r3, [pc, #140]	; (8006adc <HAL_RCC_ClockConfig+0x1c0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f023 020f 	bic.w	r2, r3, #15
 8006a56:	4921      	ldr	r1, [pc, #132]	; (8006adc <HAL_RCC_ClockConfig+0x1c0>)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5e:	4b1f      	ldr	r3, [pc, #124]	; (8006adc <HAL_RCC_ClockConfig+0x1c0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d001      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e030      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d008      	beq.n	8006a8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a7c:	4b18      	ldr	r3, [pc, #96]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	4915      	ldr	r1, [pc, #84]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0308 	and.w	r3, r3, #8
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a9a:	4b11      	ldr	r3, [pc, #68]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	490d      	ldr	r1, [pc, #52]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006aae:	f000 f81d 	bl	8006aec <HAL_RCC_GetSysClockFreq>
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	091b      	lsrs	r3, r3, #4
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	4a09      	ldr	r2, [pc, #36]	; (8006ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8006ac0:	5cd3      	ldrb	r3, [r2, r3]
 8006ac2:	fa21 f303 	lsr.w	r3, r1, r3
 8006ac6:	4a08      	ldr	r2, [pc, #32]	; (8006ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8006ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006aca:	2000      	movs	r0, #0
 8006acc:	f7fb ff0c 	bl	80028e8 <HAL_InitTick>

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	40023c00 	.word	0x40023c00
 8006ae0:	40023800 	.word	0x40023800
 8006ae4:	0800fdb4 	.word	0x0800fdb4
 8006ae8:	20000080 	.word	0x20000080

08006aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	607b      	str	r3, [r7, #4]
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	2300      	movs	r3, #0
 8006afc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b02:	4b50      	ldr	r3, [pc, #320]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 030c 	and.w	r3, r3, #12
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d007      	beq.n	8006b1e <HAL_RCC_GetSysClockFreq+0x32>
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d008      	beq.n	8006b24 <HAL_RCC_GetSysClockFreq+0x38>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f040 808d 	bne.w	8006c32 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b18:	4b4b      	ldr	r3, [pc, #300]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b1a:	60bb      	str	r3, [r7, #8]
       break;
 8006b1c:	e08c      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b1e:	4b4b      	ldr	r3, [pc, #300]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b20:	60bb      	str	r3, [r7, #8]
      break;
 8006b22:	e089      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b24:	4b47      	ldr	r3, [pc, #284]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b2c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b2e:	4b45      	ldr	r3, [pc, #276]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d023      	beq.n	8006b82 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b3a:	4b42      	ldr	r3, [pc, #264]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	099b      	lsrs	r3, r3, #6
 8006b40:	f04f 0400 	mov.w	r4, #0
 8006b44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	ea03 0501 	and.w	r5, r3, r1
 8006b50:	ea04 0602 	and.w	r6, r4, r2
 8006b54:	4a3d      	ldr	r2, [pc, #244]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b56:	fb02 f106 	mul.w	r1, r2, r6
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	fb02 f205 	mul.w	r2, r2, r5
 8006b60:	440a      	add	r2, r1
 8006b62:	493a      	ldr	r1, [pc, #232]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b64:	fba5 0101 	umull	r0, r1, r5, r1
 8006b68:	1853      	adds	r3, r2, r1
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f04f 0400 	mov.w	r4, #0
 8006b72:	461a      	mov	r2, r3
 8006b74:	4623      	mov	r3, r4
 8006b76:	f7f9 fbb3 	bl	80002e0 <__aeabi_uldivmod>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	e049      	b.n	8006c16 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b82:	4b30      	ldr	r3, [pc, #192]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	099b      	lsrs	r3, r3, #6
 8006b88:	f04f 0400 	mov.w	r4, #0
 8006b8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	ea03 0501 	and.w	r5, r3, r1
 8006b98:	ea04 0602 	and.w	r6, r4, r2
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	4632      	mov	r2, r6
 8006ba0:	f04f 0300 	mov.w	r3, #0
 8006ba4:	f04f 0400 	mov.w	r4, #0
 8006ba8:	0154      	lsls	r4, r2, #5
 8006baa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bae:	014b      	lsls	r3, r1, #5
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	1b49      	subs	r1, r1, r5
 8006bb6:	eb62 0206 	sbc.w	r2, r2, r6
 8006bba:	f04f 0300 	mov.w	r3, #0
 8006bbe:	f04f 0400 	mov.w	r4, #0
 8006bc2:	0194      	lsls	r4, r2, #6
 8006bc4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006bc8:	018b      	lsls	r3, r1, #6
 8006bca:	1a5b      	subs	r3, r3, r1
 8006bcc:	eb64 0402 	sbc.w	r4, r4, r2
 8006bd0:	f04f 0100 	mov.w	r1, #0
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	00e2      	lsls	r2, r4, #3
 8006bda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006bde:	00d9      	lsls	r1, r3, #3
 8006be0:	460b      	mov	r3, r1
 8006be2:	4614      	mov	r4, r2
 8006be4:	195b      	adds	r3, r3, r5
 8006be6:	eb44 0406 	adc.w	r4, r4, r6
 8006bea:	f04f 0100 	mov.w	r1, #0
 8006bee:	f04f 0200 	mov.w	r2, #0
 8006bf2:	02a2      	lsls	r2, r4, #10
 8006bf4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006bf8:	0299      	lsls	r1, r3, #10
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	4621      	mov	r1, r4
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f04f 0400 	mov.w	r4, #0
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4623      	mov	r3, r4
 8006c0c:	f7f9 fb68 	bl	80002e0 <__aeabi_uldivmod>
 8006c10:	4603      	mov	r3, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006c16:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	0c1b      	lsrs	r3, r3, #16
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	3301      	adds	r3, #1
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2e:	60bb      	str	r3, [r7, #8]
      break;
 8006c30:	e002      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c32:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006c34:	60bb      	str	r3, [r7, #8]
      break;
 8006c36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c38:	68bb      	ldr	r3, [r7, #8]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c42:	bf00      	nop
 8006c44:	40023800 	.word	0x40023800
 8006c48:	00f42400 	.word	0x00f42400
 8006c4c:	017d7840 	.word	0x017d7840

08006c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d012      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c78:	4b69      	ldr	r3, [pc, #420]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4a68      	ldr	r2, [pc, #416]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006c82:	6093      	str	r3, [r2, #8]
 8006c84:	4b66      	ldr	r3, [pc, #408]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8c:	4964      	ldr	r1, [pc, #400]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d017      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006caa:	4b5d      	ldr	r3, [pc, #372]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb8:	4959      	ldr	r1, [pc, #356]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cc8:	d101      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d017      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ce6:	4b4e      	ldr	r3, [pc, #312]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf4:	494a      	ldr	r1, [pc, #296]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d04:	d101      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006d06:	2301      	movs	r3, #1
 8006d08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006d12:	2301      	movs	r3, #1
 8006d14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006d22:	2301      	movs	r3, #1
 8006d24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 808b 	beq.w	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d34:	4b3a      	ldr	r3, [pc, #232]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	4a39      	ldr	r2, [pc, #228]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8006d40:	4b37      	ldr	r3, [pc, #220]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d4c:	4b35      	ldr	r3, [pc, #212]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a34      	ldr	r2, [pc, #208]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d58:	f7fb fe0a 	bl	8002970 <HAL_GetTick>
 8006d5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d60:	f7fb fe06 	bl	8002970 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b64      	cmp	r3, #100	; 0x64
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e38d      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d72:	4b2c      	ldr	r3, [pc, #176]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0f0      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d7e:	4b28      	ldr	r3, [pc, #160]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d035      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d02e      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d9c:	4b20      	ldr	r3, [pc, #128]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006da6:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006daa:	4a1d      	ldr	r2, [pc, #116]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006db2:	4b1b      	ldr	r3, [pc, #108]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db6:	4a1a      	ldr	r2, [pc, #104]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dbc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006dbe:	4a18      	ldr	r2, [pc, #96]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006dc4:	4b16      	ldr	r3, [pc, #88]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d114      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd0:	f7fb fdce 	bl	8002970 <HAL_GetTick>
 8006dd4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd6:	e00a      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dd8:	f7fb fdca 	bl	8002970 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d901      	bls.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e34f      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dee:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0ee      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e06:	d111      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e14:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e16:	400b      	ands	r3, r1
 8006e18:	4901      	ldr	r1, [pc, #4]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	608b      	str	r3, [r1, #8]
 8006e1e:	e00b      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006e20:	40023800 	.word	0x40023800
 8006e24:	40007000 	.word	0x40007000
 8006e28:	0ffffcff 	.word	0x0ffffcff
 8006e2c:	4bb3      	ldr	r3, [pc, #716]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	4ab2      	ldr	r2, [pc, #712]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e32:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e36:	6093      	str	r3, [r2, #8]
 8006e38:	4bb0      	ldr	r3, [pc, #704]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e44:	49ad      	ldr	r1, [pc, #692]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d010      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e56:	4ba9      	ldr	r3, [pc, #676]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e5c:	4aa7      	ldr	r2, [pc, #668]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006e66:	4ba5      	ldr	r3, [pc, #660]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	49a2      	ldr	r1, [pc, #648]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e84:	4b9d      	ldr	r3, [pc, #628]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e92:	499a      	ldr	r1, [pc, #616]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ea6:	4b95      	ldr	r3, [pc, #596]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb4:	4991      	ldr	r1, [pc, #580]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00a      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ec8:	4b8c      	ldr	r3, [pc, #560]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ece:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed6:	4989      	ldr	r1, [pc, #548]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006eea:	4b84      	ldr	r3, [pc, #528]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef8:	4980      	ldr	r1, [pc, #512]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f0c:	4b7b      	ldr	r3, [pc, #492]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f12:	f023 0203 	bic.w	r2, r3, #3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1a:	4978      	ldr	r1, [pc, #480]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f2e:	4b73      	ldr	r3, [pc, #460]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f34:	f023 020c 	bic.w	r2, r3, #12
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f3c:	496f      	ldr	r1, [pc, #444]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f50:	4b6a      	ldr	r3, [pc, #424]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f56:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5e:	4967      	ldr	r1, [pc, #412]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f72:	4b62      	ldr	r3, [pc, #392]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f78:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f80:	495e      	ldr	r1, [pc, #376]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00a      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f94:	4b59      	ldr	r3, [pc, #356]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa2:	4956      	ldr	r1, [pc, #344]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006fb6:	4b51      	ldr	r3, [pc, #324]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fbc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc4:	494d      	ldr	r1, [pc, #308]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00a      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006fd8:	4b48      	ldr	r3, [pc, #288]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe6:	4945      	ldr	r1, [pc, #276]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006ffa:	4b40      	ldr	r3, [pc, #256]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007000:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007008:	493c      	ldr	r1, [pc, #240]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800701c:	4b37      	ldr	r3, [pc, #220]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800701e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007022:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800702a:	4934      	ldr	r1, [pc, #208]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800702c:	4313      	orrs	r3, r2
 800702e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d011      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800703e:	4b2f      	ldr	r3, [pc, #188]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007044:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800704c:	492b      	ldr	r1, [pc, #172]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800704e:	4313      	orrs	r3, r2
 8007050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800705c:	d101      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800705e:	2301      	movs	r3, #1
 8007060:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800706e:	2301      	movs	r3, #1
 8007070:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800707e:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007084:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708c:	491b      	ldr	r1, [pc, #108]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800708e:	4313      	orrs	r3, r2
 8007090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80070a0:	4b16      	ldr	r3, [pc, #88]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b0:	4912      	ldr	r1, [pc, #72]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80070c4:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d4:	4909      	ldr	r1, [pc, #36]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00f      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070e8:	4b04      	ldr	r3, [pc, #16]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f8:	e002      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80070fa:	bf00      	nop
 80070fc:	40023800 	.word	0x40023800
 8007100:	4985      	ldr	r1, [pc, #532]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007102:	4313      	orrs	r3, r2
 8007104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00b      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007114:	4b80      	ldr	r3, [pc, #512]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800711a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007124:	497c      	ldr	r1, [pc, #496]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d005      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800713a:	f040 80d6 	bne.w	80072ea <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800713e:	4b76      	ldr	r3, [pc, #472]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a75      	ldr	r2, [pc, #468]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007144:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800714a:	f7fb fc11 	bl	8002970 <HAL_GetTick>
 800714e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007150:	e008      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007152:	f7fb fc0d 	bl	8002970 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b64      	cmp	r3, #100	; 0x64
 800715e:	d901      	bls.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e194      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007164:	4b6c      	ldr	r3, [pc, #432]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1f0      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d021      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007180:	2b00      	cmp	r3, #0
 8007182:	d11d      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007184:	4b64      	ldr	r3, [pc, #400]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800718a:	0c1b      	lsrs	r3, r3, #16
 800718c:	f003 0303 	and.w	r3, r3, #3
 8007190:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007192:	4b61      	ldr	r3, [pc, #388]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007198:	0e1b      	lsrs	r3, r3, #24
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	019a      	lsls	r2, r3, #6
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	041b      	lsls	r3, r3, #16
 80071aa:	431a      	orrs	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	061b      	lsls	r3, r3, #24
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	071b      	lsls	r3, r3, #28
 80071b8:	4957      	ldr	r1, [pc, #348]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d004      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d4:	d00a      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d02e      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ea:	d129      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80071ec:	4b4a      	ldr	r3, [pc, #296]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f2:	0c1b      	lsrs	r3, r3, #16
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071fa:	4b47      	ldr	r3, [pc, #284]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007200:	0f1b      	lsrs	r3, r3, #28
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	019a      	lsls	r2, r3, #6
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	041b      	lsls	r3, r3, #16
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	061b      	lsls	r3, r3, #24
 800721a:	431a      	orrs	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	071b      	lsls	r3, r3, #28
 8007220:	493d      	ldr	r1, [pc, #244]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007228:	4b3b      	ldr	r3, [pc, #236]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800722a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800722e:	f023 021f 	bic.w	r2, r3, #31
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	3b01      	subs	r3, #1
 8007238:	4937      	ldr	r1, [pc, #220]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800723a:	4313      	orrs	r3, r2
 800723c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01d      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800724c:	4b32      	ldr	r3, [pc, #200]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800724e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007252:	0e1b      	lsrs	r3, r3, #24
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800725a:	4b2f      	ldr	r3, [pc, #188]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800725c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007260:	0f1b      	lsrs	r3, r3, #28
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	019a      	lsls	r2, r3, #6
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	041b      	lsls	r3, r3, #16
 8007274:	431a      	orrs	r2, r3
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	061b      	lsls	r3, r3, #24
 800727a:	431a      	orrs	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	071b      	lsls	r3, r3, #28
 8007280:	4925      	ldr	r1, [pc, #148]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d011      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	019a      	lsls	r2, r3, #6
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	041b      	lsls	r3, r3, #16
 80072a0:	431a      	orrs	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	061b      	lsls	r3, r3, #24
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	071b      	lsls	r3, r3, #28
 80072b0:	4919      	ldr	r1, [pc, #100]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072b8:	4b17      	ldr	r3, [pc, #92]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a16      	ldr	r2, [pc, #88]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c4:	f7fb fb54 	bl	8002970 <HAL_GetTick>
 80072c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072ca:	e008      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072cc:	f7fb fb50 	bl	8002970 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b64      	cmp	r3, #100	; 0x64
 80072d8:	d901      	bls.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e0d7      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072de:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0f0      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	f040 80cd 	bne.w	800748c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80072f2:	4b09      	ldr	r3, [pc, #36]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a08      	ldr	r2, [pc, #32]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072fe:	f7fb fb37 	bl	8002970 <HAL_GetTick>
 8007302:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007304:	e00a      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007306:	f7fb fb33 	bl	8002970 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	2b64      	cmp	r3, #100	; 0x64
 8007312:	d903      	bls.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e0ba      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007318:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800731c:	4b5e      	ldr	r3, [pc, #376]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007328:	d0ed      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007346:	2b00      	cmp	r3, #0
 8007348:	d02e      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	2b00      	cmp	r3, #0
 8007350:	d12a      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007352:	4b51      	ldr	r3, [pc, #324]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007358:	0c1b      	lsrs	r3, r3, #16
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007360:	4b4d      	ldr	r3, [pc, #308]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007366:	0f1b      	lsrs	r3, r3, #28
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	019a      	lsls	r2, r3, #6
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	431a      	orrs	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	061b      	lsls	r3, r3, #24
 8007380:	431a      	orrs	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	071b      	lsls	r3, r3, #28
 8007386:	4944      	ldr	r1, [pc, #272]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007388:	4313      	orrs	r3, r2
 800738a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800738e:	4b42      	ldr	r3, [pc, #264]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007394:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739c:	3b01      	subs	r3, #1
 800739e:	021b      	lsls	r3, r3, #8
 80073a0:	493d      	ldr	r1, [pc, #244]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d022      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073bc:	d11d      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073be:	4b36      	ldr	r3, [pc, #216]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c4:	0e1b      	lsrs	r3, r3, #24
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80073cc:	4b32      	ldr	r3, [pc, #200]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d2:	0f1b      	lsrs	r3, r3, #28
 80073d4:	f003 0307 	and.w	r3, r3, #7
 80073d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	019a      	lsls	r2, r3, #6
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	431a      	orrs	r2, r3
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	061b      	lsls	r3, r3, #24
 80073ec:	431a      	orrs	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	071b      	lsls	r3, r3, #28
 80073f2:	4929      	ldr	r1, [pc, #164]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d028      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007406:	4b24      	ldr	r3, [pc, #144]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740c:	0e1b      	lsrs	r3, r3, #24
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007414:	4b20      	ldr	r3, [pc, #128]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	019a      	lsls	r2, r3, #6
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	041b      	lsls	r3, r3, #16
 800742c:	431a      	orrs	r2, r3
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	061b      	lsls	r3, r3, #24
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	071b      	lsls	r3, r3, #28
 800743a:	4917      	ldr	r1, [pc, #92]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800743c:	4313      	orrs	r3, r2
 800743e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007442:	4b15      	ldr	r3, [pc, #84]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007450:	4911      	ldr	r1, [pc, #68]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007458:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a0e      	ldr	r2, [pc, #56]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800745e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007464:	f7fb fa84 	bl	8002970 <HAL_GetTick>
 8007468:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800746a:	e008      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800746c:	f7fb fa80 	bl	8002970 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b64      	cmp	r3, #100	; 0x64
 8007478:	d901      	bls.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e007      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800747e:	4b06      	ldr	r3, [pc, #24]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800748a:	d1ef      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3720      	adds	r7, #32
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	40023800 	.word	0x40023800

0800749c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e01d      	b.n	80074ea <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f004 fc17 	bl	800bcf4 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2203      	movs	r2, #3
 80074ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f80f 	bl	80074f2 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80074f2:	b5b0      	push	{r4, r5, r7, lr}
 80074f4:	b08e      	sub	sp, #56	; 0x38
 80074f6:	af04      	add	r7, sp, #16
 80074f8:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80074fe:	2300      	movs	r3, #0
 8007500:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007502:	2300      	movs	r3, #0
 8007504:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007506:	2300      	movs	r3, #0
 8007508:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800750a:	2300      	movs	r3, #0
 800750c:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800750e:	2300      	movs	r3, #0
 8007510:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007512:	2376      	movs	r3, #118	; 0x76
 8007514:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681d      	ldr	r5, [r3, #0]
 800751a:	466c      	mov	r4, sp
 800751c:	f107 0318 	add.w	r3, r7, #24
 8007520:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007524:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007528:	f107 030c 	add.w	r3, r7, #12
 800752c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800752e:	4628      	mov	r0, r5
 8007530:	f001 fd90 	bl	8009054 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007542:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4618      	mov	r0, r3
 800754a:	f001 fdcd 	bl	80090e8 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800755c:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 800755e:	2002      	movs	r0, #2
 8007560:	f7fb fa12 	bl	8002988 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fee3 	bl	8008330 <SD_PowerON>
 800756a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00b      	beq.n	800758a <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e013      	b.n	80075b2 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fe07 	bl	800819e <SD_InitCard>
 8007590:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e000      	b.n	80075b2 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3728      	adds	r7, #40	; 0x28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bdb0      	pop	{r4, r5, r7, pc}

080075ba <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80075ba:	b590      	push	{r4, r7, lr}
 80075bc:	b08f      	sub	sp, #60	; 0x3c
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
 80075c6:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80075c8:	2300      	movs	r3, #0
 80075ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80075cc:	f7fb f9d0 	bl	8002970 <HAL_GetTick>
 80075d0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 80075d2:	2300      	movs	r3, #0
 80075d4:	633b      	str	r3, [r7, #48]	; 0x30
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d107      	bne.n	80075f0 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e176      	b.n	80078de <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	f040 8169 	bne.w	80078d0 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	441a      	add	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800760e:	429a      	cmp	r2, r3
 8007610:	d907      	bls.n	8007622 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007616:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e15d      	b.n	80078de <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2203      	movs	r2, #3
 8007626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2200      	movs	r2, #0
 8007630:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007636:	2b01      	cmp	r3, #1
 8007638:	d002      	beq.n	8007640 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	025b      	lsls	r3, r3, #9
 800763e:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007648:	4618      	mov	r0, r3
 800764a:	f001 fde1 	bl	8009210 <SDMMC_CmdBlockLength>
 800764e:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8007650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007652:	2b00      	cmp	r3, #0
 8007654:	d010      	beq.n	8007678 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007666:	431a      	orrs	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e132      	b.n	80078de <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007678:	f04f 33ff 	mov.w	r3, #4294967295
 800767c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	025b      	lsls	r3, r3, #9
 8007682:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007684:	2390      	movs	r3, #144	; 0x90
 8007686:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007688:	2302      	movs	r3, #2
 800768a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800768c:	2300      	movs	r3, #0
 800768e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007690:	2301      	movs	r3, #1
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f107 0210 	add.w	r2, r7, #16
 800769c:	4611      	mov	r1, r2
 800769e:	4618      	mov	r0, r3
 80076a0:	f001 fd8a 	bl	80091b8 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d90a      	bls.n	80076c0 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2202      	movs	r2, #2
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 fdf2 	bl	80092a0 <SDMMC_CmdReadMultiBlock>
 80076bc:	6378      	str	r0, [r7, #52]	; 0x34
 80076be:	e009      	b.n	80076d4 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2201      	movs	r2, #1
 80076c4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 fdc3 	bl	8009258 <SDMMC_CmdReadSingleBlock>
 80076d2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80076d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d04a      	beq.n	8007770 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80076e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ea:	431a      	orrs	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e0f0      	b.n	80078de <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d016      	beq.n	8007738 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800770a:	2300      	movs	r3, #0
 800770c:	633b      	str	r3, [r7, #48]	; 0x30
 800770e:	e00d      	b.n	800772c <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6819      	ldr	r1, [r3, #0]
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800771a:	18d4      	adds	r4, r2, r3
 800771c:	4608      	mov	r0, r1
 800771e:	f001 fcc5 	bl	80090ac <SDMMC_ReadFIFO>
 8007722:	4603      	mov	r3, r0
 8007724:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	3301      	adds	r3, #1
 800772a:	633b      	str	r3, [r7, #48]	; 0x30
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	2b07      	cmp	r3, #7
 8007730:	d9ee      	bls.n	8007710 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	3320      	adds	r3, #32
 8007736:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <HAL_SD_ReadBlocks+0x194>
 800773e:	f7fb f917 	bl	8002970 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800774a:	429a      	cmp	r2, r3
 800774c:	d810      	bhi.n	8007770 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e0b6      	b.n	80078de <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007776:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800777a:	2b00      	cmp	r3, #0
 800777c:	d0be      	beq.n	80076fc <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007788:	2b00      	cmp	r3, #0
 800778a:	d020      	beq.n	80077ce <HAL_SD_ReadBlocks+0x214>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d91d      	bls.n	80077ce <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007796:	2b03      	cmp	r3, #3
 8007798:	d019      	beq.n	80077ce <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f001 fdea 	bl	8009378 <SDMMC_CmdStopTransfer>
 80077a4:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80077a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d010      	beq.n	80077ce <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80077b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077bc:	431a      	orrs	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e087      	b.n	80078de <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d4:	f003 0308 	and.w	r3, r3, #8
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d010      	beq.n	80077fe <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ea:	f043 0208 	orr.w	r2, r3, #8
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e06f      	b.n	80078de <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d010      	beq.n	800782e <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007814:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	f043 0202 	orr.w	r2, r3, #2
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e057      	b.n	80078de <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007834:	f003 0320 	and.w	r3, r3, #32
 8007838:	2b00      	cmp	r3, #0
 800783a:	d037      	beq.n	80078ac <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007844:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784a:	f043 0220 	orr.w	r2, r3, #32
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e03f      	b.n	80078de <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4618      	mov	r0, r3
 8007864:	f001 fc22 	bl	80090ac <SDMMC_ReadFIFO>
 8007868:	4602      	mov	r2, r0
 800786a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786c:	601a      	str	r2, [r3, #0]
      tempbuff++;
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	3304      	adds	r3, #4
 8007872:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <HAL_SD_ReadBlocks+0x2d0>
 800787a:	f7fb f879 	bl	8002970 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007886:	429a      	cmp	r2, r3
 8007888:	d810      	bhi.n	80078ac <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007898:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e018      	b.n	80078de <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1d1      	bne.n	800785e <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80078c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e006      	b.n	80078de <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
  }
}
 80078de:	4618      	mov	r0, r3
 80078e0:	373c      	adds	r7, #60	; 0x3c
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd90      	pop	{r4, r7, pc}

080078e6 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b08e      	sub	sp, #56	; 0x38
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	607a      	str	r2, [r7, #4]
 80078f2:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80078f8:	f7fb f83a 	bl	8002970 <HAL_GetTick>
 80078fc:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 80078fe:	2300      	movs	r3, #0
 8007900:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d107      	bne.n	800791c <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e147      	b.n	8007bac <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b01      	cmp	r3, #1
 8007926:	f040 813a 	bne.w	8007b9e <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	441a      	add	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800793a:	429a      	cmp	r2, r3
 800793c:	d907      	bls.n	800794e <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e12e      	b.n	8007bac <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2203      	movs	r2, #3
 8007952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2200      	movs	r2, #0
 800795c:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007962:	2b01      	cmp	r3, #1
 8007964:	d002      	beq.n	800796c <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	025b      	lsls	r3, r3, #9
 800796a:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007974:	4618      	mov	r0, r3
 8007976:	f001 fc4b 	bl	8009210 <SDMMC_CmdBlockLength>
 800797a:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800797c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797e:	2b00      	cmp	r3, #0
 8007980:	d010      	beq.n	80079a4 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800798a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007992:	431a      	orrs	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e103      	b.n	8007bac <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d90a      	bls.n	80079c0 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2220      	movs	r2, #32
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6879      	ldr	r1, [r7, #4]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f001 fcba 	bl	8009330 <SDMMC_CmdWriteMultiBlock>
 80079bc:	6378      	str	r0, [r7, #52]	; 0x34
 80079be:	e009      	b.n	80079d4 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2210      	movs	r2, #16
 80079c4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f001 fc8b 	bl	80092e8 <SDMMC_CmdWriteSingleBlock>
 80079d2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80079d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d010      	beq.n	80079fc <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80079e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ea:	431a      	orrs	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e0d7      	b.n	8007bac <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007a00:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	025b      	lsls	r3, r3, #9
 8007a06:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a08:	2390      	movs	r3, #144	; 0x90
 8007a0a:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f107 0210 	add.w	r2, r7, #16
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 fbc8 	bl	80091b8 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007a28:	e037      	b.n	8007a9a <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d014      	beq.n	8007a62 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a3c:	e00b      	b.n	8007a56 <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a48:	4413      	add	r3, r2
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	f001 fb3b 	bl	80090c6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	3301      	adds	r3, #1
 8007a54:	633b      	str	r3, [r7, #48]	; 0x30
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	2b07      	cmp	r3, #7
 8007a5a:	d9f0      	bls.n	8007a3e <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	3320      	adds	r3, #32
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d007      	beq.n	8007a78 <HAL_SD_WriteBlocks+0x192>
 8007a68:	f7fa ff82 	bl	8002970 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d810      	bhi.n	8007a9a <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e088      	b.n	8007bac <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0c0      	beq.n	8007a2a <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d020      	beq.n	8007af8 <HAL_SD_WriteBlocks+0x212>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d91d      	bls.n	8007af8 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d019      	beq.n	8007af8 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 fc55 	bl	8009378 <SDMMC_CmdStopTransfer>
 8007ace:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d010      	beq.n	8007af8 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007ade:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e059      	b.n	8007bac <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afe:	f003 0308 	and.w	r3, r3, #8
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d010      	beq.n	8007b28 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	f043 0208 	orr.w	r2, r3, #8
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e041      	b.n	8007bac <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d010      	beq.n	8007b58 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	f043 0202 	orr.w	r2, r3, #2
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e029      	b.n	8007bac <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d010      	beq.n	8007b88 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	f043 0210 	orr.w	r2, r3, #16
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e011      	b.n	8007bac <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b90:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e006      	b.n	8007bac <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
  }
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3738      	adds	r7, #56	; 0x38
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc6:	0e1b      	lsrs	r3, r3, #24
 8007bc8:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	099b      	lsrs	r3, r3, #6
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	f003 0303 	and.w	r3, r3, #3
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	089b      	lsrs	r3, r3, #2
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	f003 030f 	and.w	r3, r3, #15
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 0303 	and.w	r3, r3, #3
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bfc:	0c1b      	lsrs	r3, r3, #16
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c0e:	0a1b      	lsrs	r3, r3, #8
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c30:	0e1b      	lsrs	r3, r3, #24
 8007c32:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	011b      	lsls	r3, r3, #4
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c44:	0c1b      	lsrs	r3, r3, #16
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	88db      	ldrh	r3, [r3, #6]
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	091b      	lsrs	r3, r3, #4
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f003 030f 	and.w	r3, r3, #15
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f003 030f 	and.w	r3, r3, #15
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c76:	0a1b      	lsrs	r3, r3, #8
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	09db      	lsrs	r3, r3, #7
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	099b      	lsrs	r3, r3, #6
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	091b      	lsrs	r3, r3, #4
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f040 8086 	bne.w	8007dd8 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	029b      	lsls	r3, r3, #10
 8007cd0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf2:	0e1b      	lsrs	r3, r3, #24
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	691a      	ldr	r2, [r3, #16]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	099b      	lsrs	r3, r3, #6
 8007d00:	f003 0303 	and.w	r3, r3, #3
 8007d04:	431a      	orrs	r2, r3
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	08db      	lsrs	r3, r3, #3
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	f003 0307 	and.w	r3, r3, #7
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2c:	0c1b      	lsrs	r3, r3, #16
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	095b      	lsrs	r3, r3, #5
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	089b      	lsrs	r3, r3, #2
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	f003 0307 	and.w	r3, r3, #7
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 0306 	and.w	r3, r3, #6
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d68:	0a1b      	lsrs	r3, r3, #8
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	7e1b      	ldrb	r3, [r3, #24]
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	09db      	lsrs	r3, r3, #7
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	4313      	orrs	r3, r2
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	7e1b      	ldrb	r3, [r3, #24]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	3302      	adds	r3, #2
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	409a      	lsls	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da2:	fb02 f203 	mul.w	r2, r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	7a1b      	ldrb	r3, [r3, #8]
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	2301      	movs	r3, #1
 8007db4:	4093      	lsls	r3, r2
 8007db6:	461a      	mov	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007dc4:	0a52      	lsrs	r2, r2, #9
 8007dc6:	fb02 f203 	mul.w	r2, r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd4:	661a      	str	r2, [r3, #96]	; 0x60
 8007dd6:	e04d      	b.n	8007e74 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d138      	bne.n	8007e52 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	041b      	lsls	r3, r3, #16
 8007dec:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df8:	0e1b      	lsrs	r3, r3, #24
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	691a      	ldr	r2, [r3, #16]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	021b      	lsls	r3, r3, #8
 8007e06:	431a      	orrs	r2, r3
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e10:	0c1b      	lsrs	r3, r3, #16
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e26:	0a1b      	lsrs	r3, r3, #8
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	3301      	adds	r3, #1
 8007e32:	029a      	lsls	r2, r3, #10
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	655a      	str	r2, [r3, #84]	; 0x54
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e46:	659a      	str	r2, [r3, #88]	; 0x58
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	661a      	str	r2, [r3, #96]	; 0x60
 8007e50:	e010      	b.n	8007e74 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e0c1      	b.n	8007ff8 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	099b      	lsrs	r3, r3, #6
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	7e9b      	ldrb	r3, [r3, #26]
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	09db      	lsrs	r3, r3, #7
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eca:	0e1b      	lsrs	r3, r3, #24
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	09db      	lsrs	r3, r3, #7
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	095b      	lsrs	r3, r3, #5
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	089b      	lsrs	r3, r3, #2
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f003 030c 	and.w	r3, r3, #12
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f16:	0c1b      	lsrs	r3, r3, #16
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	7fdb      	ldrb	r3, [r3, #31]
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	099b      	lsrs	r3, r3, #6
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f003 0303 	and.w	r3, r3, #3
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	095b      	lsrs	r3, r3, #5
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f64:	0a1b      	lsrs	r3, r3, #8
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	09db      	lsrs	r3, r3, #7
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	099b      	lsrs	r3, r3, #6
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	095b      	lsrs	r3, r3, #5
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	091b      	lsrs	r3, r3, #4
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	089b      	lsrs	r3, r3, #2
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 0303 	and.w	r3, r3, #3
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 0303 	and.w	r3, r3, #3
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800805c:	b5b0      	push	{r4, r5, r7, lr}
 800805e:	b08e      	sub	sp, #56	; 0x38
 8008060:	af04      	add	r7, sp, #16
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008066:	2300      	movs	r3, #0
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2203      	movs	r2, #3
 800806e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008076:	2b03      	cmp	r3, #3
 8008078:	d02e      	beq.n	80080d8 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008080:	d106      	bne.n	8008090 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008086:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	639a      	str	r2, [r3, #56]	; 0x38
 800808e:	e029      	b.n	80080e4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008096:	d10a      	bne.n	80080ae <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fa1b 	bl	80084d4 <SD_WideBus_Enable>
 800809e:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	639a      	str	r2, [r3, #56]	; 0x38
 80080ac:	e01a      	b.n	80080e4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10a      	bne.n	80080ca <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fa5a 	bl	800856e <SD_WideBus_Disable>
 80080ba:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	639a      	str	r2, [r3, #56]	; 0x38
 80080c8:	e00c      	b.n	80080e4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	639a      	str	r2, [r3, #56]	; 0x38
 80080d6:	e005      	b.n	80080e4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80080f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e024      	b.n	800814c <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681d      	ldr	r5, [r3, #0]
 8008128:	466c      	mov	r4, sp
 800812a:	f107 0318 	add.w	r3, r7, #24
 800812e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008132:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008136:	f107 030c 	add.w	r3, r7, #12
 800813a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800813c:	4628      	mov	r0, r5
 800813e:	f000 ff89 	bl	8009054 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3728      	adds	r7, #40	; 0x28
 8008150:	46bd      	mov	sp, r7
 8008152:	bdb0      	pop	{r4, r5, r7, pc}

08008154 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800815c:	2304      	movs	r3, #4
 800815e:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008160:	2300      	movs	r3, #0
 8008162:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8008168:	f107 030c 	add.w	r3, r7, #12
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f986 	bl	8008480 <SD_SendStatus>
 8008174:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d005      	beq.n	8008188 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	431a      	orrs	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	0a5b      	lsrs	r3, r3, #9
 800818c:	b2db      	uxtb	r3, r3
 800818e:	f003 030f 	and.w	r3, r3, #15
 8008192:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800819e:	b5b0      	push	{r4, r5, r7, lr}
 80081a0:	b094      	sub	sp, #80	; 0x50
 80081a2:	af04      	add	r7, sp, #16
 80081a4:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80081a6:	2300      	movs	r3, #0
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 80081aa:	2301      	movs	r3, #1
 80081ac:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 ffa6 	bl	8009104 <SDMMC_GetPowerState>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d102      	bne.n	80081c4 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80081c2:	e0b1      	b.n	8008328 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d02f      	beq.n	800822c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 f9ec 	bl	80095ae <SDMMC_CmdSendCID>
 80081d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <SD_InitCard+0x44>
    {
      return errorstate;
 80081de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e0:	e0a2      	b.n	8008328 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2100      	movs	r1, #0
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 ffd0 	bl	800918e <SDMMC_GetResponse>
 80081ee:	4602      	mov	r2, r0
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2104      	movs	r1, #4
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 ffc7 	bl	800918e <SDMMC_GetResponse>
 8008200:	4602      	mov	r2, r0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2108      	movs	r1, #8
 800820c:	4618      	mov	r0, r3
 800820e:	f000 ffbe 	bl	800918e <SDMMC_GetResponse>
 8008212:	4602      	mov	r2, r0
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	210c      	movs	r1, #12
 800821e:	4618      	mov	r0, r3
 8008220:	f000 ffb5 	bl	800918e <SDMMC_GetResponse>
 8008224:	4602      	mov	r2, r0
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008230:	2b03      	cmp	r3, #3
 8008232:	d00d      	beq.n	8008250 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f107 020e 	add.w	r2, r7, #14
 800823c:	4611      	mov	r1, r2
 800823e:	4618      	mov	r0, r3
 8008240:	f001 f9f6 	bl	8009630 <SDMMC_CmdSetRelAdd>
 8008244:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <SD_InitCard+0xb2>
    {
      return errorstate;
 800824c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824e:	e06b      	b.n	8008328 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008254:	2b03      	cmp	r3, #3
 8008256:	d036      	beq.n	80082c6 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008258:	89fb      	ldrh	r3, [r7, #14]
 800825a:	461a      	mov	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008268:	041b      	lsls	r3, r3, #16
 800826a:	4619      	mov	r1, r3
 800826c:	4610      	mov	r0, r2
 800826e:	f001 f9be 	bl	80095ee <SDMMC_CmdSendCSD>
 8008272:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <SD_InitCard+0xe0>
    {
      return errorstate;
 800827a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827c:	e054      	b.n	8008328 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2100      	movs	r1, #0
 8008284:	4618      	mov	r0, r3
 8008286:	f000 ff82 	bl	800918e <SDMMC_GetResponse>
 800828a:	4602      	mov	r2, r0
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2104      	movs	r1, #4
 8008296:	4618      	mov	r0, r3
 8008298:	f000 ff79 	bl	800918e <SDMMC_GetResponse>
 800829c:	4602      	mov	r2, r0
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2108      	movs	r1, #8
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 ff70 	bl	800918e <SDMMC_GetResponse>
 80082ae:	4602      	mov	r2, r0
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	210c      	movs	r1, #12
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 ff67 	bl	800918e <SDMMC_GetResponse>
 80082c0:	4602      	mov	r2, r0
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2104      	movs	r1, #4
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 ff5e 	bl	800918e <SDMMC_GetResponse>
 80082d2:	4603      	mov	r3, r0
 80082d4:	0d1a      	lsrs	r2, r3, #20
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80082da:	f107 0310 	add.w	r3, r7, #16
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff fc67 	bl	8007bb4 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6819      	ldr	r1, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ee:	041b      	lsls	r3, r3, #16
 80082f0:	f04f 0400 	mov.w	r4, #0
 80082f4:	461a      	mov	r2, r3
 80082f6:	4623      	mov	r3, r4
 80082f8:	4608      	mov	r0, r1
 80082fa:	f001 f861 	bl	80093c0 <SDMMC_CmdSelDesel>
 80082fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <SD_InitCard+0x16c>
  {
    return errorstate;
 8008306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008308:	e00e      	b.n	8008328 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681d      	ldr	r5, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	466c      	mov	r4, sp
 8008312:	f103 0210 	add.w	r2, r3, #16
 8008316:	ca07      	ldmia	r2, {r0, r1, r2}
 8008318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800831c:	3304      	adds	r3, #4
 800831e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008320:	4628      	mov	r0, r5
 8008322:	f000 fe97 	bl	8009054 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3740      	adds	r7, #64	; 0x40
 800832c:	46bd      	mov	sp, r7
 800832e:	bdb0      	pop	{r4, r5, r7, pc}

08008330 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 800833c:	2300      	movs	r3, #0
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	2300      	movs	r3, #0
 8008342:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008344:	2300      	movs	r3, #0
 8008346:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4618      	mov	r0, r3
 800834e:	f001 f85c 	bl	800940a <SDMMC_CmdGoIdleState>
 8008352:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <SD_PowerON+0x2e>
  {
    return errorstate;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	e08c      	b.n	8008478 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4618      	mov	r0, r3
 8008364:	f001 f871 	bl	800944a <SDMMC_CmdOperCond>
 8008368:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d03d      	beq.n	80083ec <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008376:	e032      	b.n	80083de <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	60ba      	str	r2, [r7, #8]
 800837e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008382:	4293      	cmp	r3, r2
 8008384:	d102      	bne.n	800838c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008386:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800838a:	e075      	b.n	8008478 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2100      	movs	r1, #0
 8008392:	4618      	mov	r0, r3
 8008394:	f001 f87a 	bl	800948c <SDMMC_CmdAppCommand>
 8008398:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083a4:	e068      	b.n	8008478 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2100      	movs	r1, #0
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 f891 	bl	80094d4 <SDMMC_CmdAppOperCommand>
 80083b2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083be:	e05b      	b.n	8008478 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2100      	movs	r1, #0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fee1 	bl	800918e <SDMMC_GetResponse>
 80083cc:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	0fdb      	lsrs	r3, r3, #31
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	bf0c      	ite	eq
 80083d6:	2301      	moveq	r3, #1
 80083d8:	2300      	movne	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0c9      	beq.n	8008378 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	645a      	str	r2, [r3, #68]	; 0x44
 80083ea:	e044      	b.n	8008476 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80083f2:	e031      	b.n	8008458 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	60ba      	str	r2, [r7, #8]
 80083fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083fe:	4293      	cmp	r3, r2
 8008400:	d102      	bne.n	8008408 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008406:	e037      	b.n	8008478 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2100      	movs	r1, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f001 f83c 	bl	800948c <SDMMC_CmdAppCommand>
 8008414:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <SD_PowerON+0xf0>
      {
        return errorstate;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	e02b      	b.n	8008478 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008428:	4618      	mov	r0, r3
 800842a:	f001 f853 	bl	80094d4 <SDMMC_CmdAppOperCommand>
 800842e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <SD_PowerON+0x10a>
      {
        return errorstate;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	e01e      	b.n	8008478 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2100      	movs	r1, #0
 8008440:	4618      	mov	r0, r3
 8008442:	f000 fea4 	bl	800918e <SDMMC_GetResponse>
 8008446:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	0fdb      	lsrs	r3, r3, #31
 800844c:	2b01      	cmp	r3, #1
 800844e:	bf0c      	ite	eq
 8008450:	2301      	moveq	r3, #1
 8008452:	2300      	movne	r3, #0
 8008454:	b2db      	uxtb	r3, r3
 8008456:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0ca      	beq.n	80083f4 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	645a      	str	r2, [r3, #68]	; 0x44
 800846e:	e002      	b.n	8008476 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800848a:	2300      	movs	r3, #0
 800848c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d102      	bne.n	800849a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8008494:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008498:	e018      	b.n	80084cc <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a2:	041b      	lsls	r3, r3, #16
 80084a4:	4619      	mov	r1, r3
 80084a6:	4610      	mov	r0, r2
 80084a8:	f001 f8e5 	bl	8009676 <SDMMC_CmdSendStatus>
 80084ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <SD_SendStatus+0x38>
  {
    return errorstate;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	e009      	b.n	80084cc <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2100      	movs	r1, #0
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fe65 	bl	800918e <SDMMC_GetResponse>
 80084c4:	4602      	mov	r2, r0
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80084dc:	2300      	movs	r3, #0
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	2300      	movs	r3, #0
 80084e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2100      	movs	r1, #0
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fe4d 	bl	800918e <SDMMC_GetResponse>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084fe:	d102      	bne.n	8008506 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008504:	e02f      	b.n	8008566 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008506:	f107 030c 	add.w	r3, r7, #12
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f87b 	bl	8008608 <SD_FindSCR>
 8008512:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	e023      	b.n	8008566 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01c      	beq.n	8008562 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008530:	041b      	lsls	r3, r3, #16
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f000 ffa9 	bl	800948c <SDMMC_CmdAppCommand>
 800853a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	e00f      	b.n	8008566 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2102      	movs	r1, #2
 800854c:	4618      	mov	r0, r3
 800854e:	f000 ffe7 	bl	8009520 <SDMMC_CmdBusWidth>
 8008552:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	e003      	b.n	8008566 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800855e:	2300      	movs	r3, #0
 8008560:	e001      	b.n	8008566 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008562:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b086      	sub	sp, #24
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	2300      	movs	r3, #0
 800857c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800857e:	2300      	movs	r3, #0
 8008580:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2100      	movs	r1, #0
 8008588:	4618      	mov	r0, r3
 800858a:	f000 fe00 	bl	800918e <SDMMC_GetResponse>
 800858e:	4603      	mov	r3, r0
 8008590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008598:	d102      	bne.n	80085a0 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800859a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800859e:	e02f      	b.n	8008600 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80085a0:	f107 030c 	add.w	r3, r7, #12
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f82e 	bl	8008608 <SD_FindSCR>
 80085ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	e023      	b.n	8008600 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d01c      	beq.n	80085fc <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ca:	041b      	lsls	r3, r3, #16
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f000 ff5c 	bl	800948c <SDMMC_CmdAppCommand>
 80085d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	e00f      	b.n	8008600 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2100      	movs	r1, #0
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 ff9a 	bl	8009520 <SDMMC_CmdBusWidth>
 80085ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	e003      	b.n	8008600 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	e001      	b.n	8008600 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008608:	b590      	push	{r4, r7, lr}
 800860a:	b08f      	sub	sp, #60	; 0x3c
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008612:	2300      	movs	r3, #0
 8008614:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008616:	f7fa f9ab 	bl	8002970 <HAL_GetTick>
 800861a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8008620:	2300      	movs	r3, #0
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	2300      	movs	r3, #0
 8008626:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2108      	movs	r1, #8
 800862e:	4618      	mov	r0, r3
 8008630:	f000 fdee 	bl	8009210 <SDMMC_CmdBlockLength>
 8008634:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <SD_FindSCR+0x38>
  {
    return errorstate;
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	e0a8      	b.n	8008792 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008648:	041b      	lsls	r3, r3, #16
 800864a:	4619      	mov	r1, r3
 800864c:	4610      	mov	r0, r2
 800864e:	f000 ff1d 	bl	800948c <SDMMC_CmdAppCommand>
 8008652:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <SD_FindSCR+0x56>
  {
    return errorstate;
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	e099      	b.n	8008792 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800865e:	f04f 33ff 	mov.w	r3, #4294967295
 8008662:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8008664:	2308      	movs	r3, #8
 8008666:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008668:	2330      	movs	r3, #48	; 0x30
 800866a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800866c:	2302      	movs	r3, #2
 800866e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008670:	2300      	movs	r3, #0
 8008672:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008674:	2301      	movs	r3, #1
 8008676:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f107 0214 	add.w	r2, r7, #20
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fd98 	bl	80091b8 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4618      	mov	r0, r3
 800868e:	f000 ff6b 	bl	8009568 <SDMMC_CmdSendSCR>
 8008692:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	2b00      	cmp	r3, #0
 8008698:	d022      	beq.n	80086e0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	e079      	b.n	8008792 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00e      	beq.n	80086ca <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6819      	ldr	r1, [r3, #0]
 80086b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	f107 020c 	add.w	r2, r7, #12
 80086b8:	18d4      	adds	r4, r2, r3
 80086ba:	4608      	mov	r0, r1
 80086bc:	f000 fcf6 	bl	80090ac <SDMMC_ReadFIFO>
 80086c0:	4603      	mov	r3, r0
 80086c2:	6023      	str	r3, [r4, #0]
      index++;
 80086c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c6:	3301      	adds	r3, #1
 80086c8:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80086ca:	f7fa f951 	bl	8002970 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d8:	d102      	bne.n	80086e0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80086da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086de:	e058      	b.n	8008792 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086e6:	f240 432a 	movw	r3, #1066	; 0x42a
 80086ea:	4013      	ands	r3, r2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0d6      	beq.n	800869e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2208      	movs	r2, #8
 8008704:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008706:	2308      	movs	r3, #8
 8008708:	e043      	b.n	8008792 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d005      	beq.n	8008724 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2202      	movs	r2, #2
 800871e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008720:	2302      	movs	r3, #2
 8008722:	e036      	b.n	8008792 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2220      	movs	r2, #32
 8008738:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800873a:	2320      	movs	r3, #32
 800873c:	e029      	b.n	8008792 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008746:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	061a      	lsls	r2, r3, #24
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008754:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	0a1b      	lsrs	r3, r3, #8
 800875a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800875e:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800876a:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800876c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	061a      	lsls	r2, r3, #24
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800877a:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	0a1b      	lsrs	r3, r3, #8
 8008780:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008784:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	0e1b      	lsrs	r3, r3, #24
 800878a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	373c      	adds	r7, #60	; 0x3c
 8008796:	46bd      	mov	sp, r7
 8008798:	bd90      	pop	{r4, r7, pc}

0800879a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e025      	b.n	80087fa <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d106      	bne.n	80087c8 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f003 fbfc 	bl	800bfc0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3304      	adds	r3, #4
 80087d8:	4619      	mov	r1, r3
 80087da:	4610      	mov	r0, r2
 80087dc:	f000 fb14 	bl	8008e08 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6818      	ldr	r0, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	461a      	mov	r2, r3
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	f000 fb7e 	bl	8008eec <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	60b9      	str	r1, [r7, #8]
 800880c:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b02      	cmp	r3, #2
 8008818:	d101      	bne.n	800881e <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800881a:	2302      	movs	r3, #2
 800881c:	e018      	b.n	8008850 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2202      	movs	r2, #2
 8008822:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	68b9      	ldr	r1, [r7, #8]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 fbdc 	bl	8008fec <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d104      	bne.n	8008846 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2205      	movs	r2, #5
 8008840:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008844:	e003      	b.n	800884e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b02      	cmp	r3, #2
 800886c:	d101      	bne.n	8008872 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800886e:	2302      	movs	r3, #2
 8008870:	e00e      	b.n	8008890 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 fbd4 	bl	800902e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e01d      	b.n	80088e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d106      	bne.n	80088c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f003 fa98 	bl	800bdf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3304      	adds	r3, #4
 80088d4:	4619      	mov	r1, r3
 80088d6:	4610      	mov	r0, r2
 80088d8:	f000 f97c 	bl	8008bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0201 	orr.w	r2, r2, #1
 8008906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689a      	ldr	r2, [r3, #8]
 800890e:	4b0c      	ldr	r3, [pc, #48]	; (8008940 <HAL_TIM_Base_Start_IT+0x50>)
 8008910:	4013      	ands	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b06      	cmp	r3, #6
 8008918:	d00b      	beq.n	8008932 <HAL_TIM_Base_Start_IT+0x42>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008920:	d007      	beq.n	8008932 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0201 	orr.w	r2, r2, #1
 8008930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	00010007 	.word	0x00010007

08008944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b02      	cmp	r3, #2
 8008958:	d122      	bne.n	80089a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b02      	cmp	r3, #2
 8008966:	d11b      	bne.n	80089a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f06f 0202 	mvn.w	r2, #2
 8008970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	f003 0303 	and.w	r3, r3, #3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f905 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 800898c:	e005      	b.n	800899a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f8f7 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f908 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	f003 0304 	and.w	r3, r3, #4
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	d122      	bne.n	80089f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d11b      	bne.n	80089f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f06f 0204 	mvn.w	r2, #4
 80089c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2202      	movs	r2, #2
 80089ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f8db 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 80089e0:	e005      	b.n	80089ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f8cd 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f8de 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0308 	and.w	r3, r3, #8
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	d122      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d11b      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f06f 0208 	mvn.w	r2, #8
 8008a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2204      	movs	r2, #4
 8008a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f8b1 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 8008a34:	e005      	b.n	8008a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f8a3 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f8b4 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0310 	and.w	r3, r3, #16
 8008a52:	2b10      	cmp	r3, #16
 8008a54:	d122      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d11b      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f06f 0210 	mvn.w	r2, #16
 8008a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2208      	movs	r2, #8
 8008a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f887 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 8008a88:	e005      	b.n	8008a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f879 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f88a 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d10e      	bne.n	8008ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d107      	bne.n	8008ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f06f 0201 	mvn.w	r2, #1
 8008ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f001 f99e 	bl	8009e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad2:	2b80      	cmp	r3, #128	; 0x80
 8008ad4:	d10e      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae0:	2b80      	cmp	r3, #128	; 0x80
 8008ae2:	d107      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f976 	bl	8008de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b02:	d10e      	bne.n	8008b22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b0e:	2b80      	cmp	r3, #128	; 0x80
 8008b10:	d107      	bne.n	8008b22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f969 	bl	8008df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2c:	2b40      	cmp	r3, #64	; 0x40
 8008b2e:	d10e      	bne.n	8008b4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3a:	2b40      	cmp	r3, #64	; 0x40
 8008b3c:	d107      	bne.n	8008b4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f838 	bl	8008bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	f003 0320 	and.w	r3, r3, #32
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d10e      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f003 0320 	and.w	r3, r3, #32
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d107      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f06f 0220 	mvn.w	r2, #32
 8008b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f929 	bl	8008dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
	...

08008bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a40      	ldr	r2, [pc, #256]	; (8008ce8 <TIM_Base_SetConfig+0x114>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d013      	beq.n	8008c14 <TIM_Base_SetConfig+0x40>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bf2:	d00f      	beq.n	8008c14 <TIM_Base_SetConfig+0x40>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a3d      	ldr	r2, [pc, #244]	; (8008cec <TIM_Base_SetConfig+0x118>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00b      	beq.n	8008c14 <TIM_Base_SetConfig+0x40>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a3c      	ldr	r2, [pc, #240]	; (8008cf0 <TIM_Base_SetConfig+0x11c>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d007      	beq.n	8008c14 <TIM_Base_SetConfig+0x40>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a3b      	ldr	r2, [pc, #236]	; (8008cf4 <TIM_Base_SetConfig+0x120>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_Base_SetConfig+0x40>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a3a      	ldr	r2, [pc, #232]	; (8008cf8 <TIM_Base_SetConfig+0x124>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d108      	bne.n	8008c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a2f      	ldr	r2, [pc, #188]	; (8008ce8 <TIM_Base_SetConfig+0x114>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d02b      	beq.n	8008c86 <TIM_Base_SetConfig+0xb2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c34:	d027      	beq.n	8008c86 <TIM_Base_SetConfig+0xb2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a2c      	ldr	r2, [pc, #176]	; (8008cec <TIM_Base_SetConfig+0x118>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d023      	beq.n	8008c86 <TIM_Base_SetConfig+0xb2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a2b      	ldr	r2, [pc, #172]	; (8008cf0 <TIM_Base_SetConfig+0x11c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d01f      	beq.n	8008c86 <TIM_Base_SetConfig+0xb2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a2a      	ldr	r2, [pc, #168]	; (8008cf4 <TIM_Base_SetConfig+0x120>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d01b      	beq.n	8008c86 <TIM_Base_SetConfig+0xb2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a29      	ldr	r2, [pc, #164]	; (8008cf8 <TIM_Base_SetConfig+0x124>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d017      	beq.n	8008c86 <TIM_Base_SetConfig+0xb2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a28      	ldr	r2, [pc, #160]	; (8008cfc <TIM_Base_SetConfig+0x128>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d013      	beq.n	8008c86 <TIM_Base_SetConfig+0xb2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a27      	ldr	r2, [pc, #156]	; (8008d00 <TIM_Base_SetConfig+0x12c>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d00f      	beq.n	8008c86 <TIM_Base_SetConfig+0xb2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a26      	ldr	r2, [pc, #152]	; (8008d04 <TIM_Base_SetConfig+0x130>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00b      	beq.n	8008c86 <TIM_Base_SetConfig+0xb2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a25      	ldr	r2, [pc, #148]	; (8008d08 <TIM_Base_SetConfig+0x134>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d007      	beq.n	8008c86 <TIM_Base_SetConfig+0xb2>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a24      	ldr	r2, [pc, #144]	; (8008d0c <TIM_Base_SetConfig+0x138>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d003      	beq.n	8008c86 <TIM_Base_SetConfig+0xb2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a23      	ldr	r2, [pc, #140]	; (8008d10 <TIM_Base_SetConfig+0x13c>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d108      	bne.n	8008c98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a0a      	ldr	r2, [pc, #40]	; (8008ce8 <TIM_Base_SetConfig+0x114>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d003      	beq.n	8008ccc <TIM_Base_SetConfig+0xf8>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a0c      	ldr	r2, [pc, #48]	; (8008cf8 <TIM_Base_SetConfig+0x124>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d103      	bne.n	8008cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	691a      	ldr	r2, [r3, #16]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	615a      	str	r2, [r3, #20]
}
 8008cda:	bf00      	nop
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	40010000 	.word	0x40010000
 8008cec:	40000400 	.word	0x40000400
 8008cf0:	40000800 	.word	0x40000800
 8008cf4:	40000c00 	.word	0x40000c00
 8008cf8:	40010400 	.word	0x40010400
 8008cfc:	40014000 	.word	0x40014000
 8008d00:	40014400 	.word	0x40014400
 8008d04:	40014800 	.word	0x40014800
 8008d08:	40001800 	.word	0x40001800
 8008d0c:	40001c00 	.word	0x40001c00
 8008d10:	40002000 	.word	0x40002000

08008d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e045      	b.n	8008db8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a1c      	ldr	r2, [pc, #112]	; (8008dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d004      	beq.n	8008d60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a1b      	ldr	r2, [pc, #108]	; (8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d108      	bne.n	8008d72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d8a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	40010000 	.word	0x40010000
 8008dc8:	40010400 	.word	0x40010400

08008dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d027      	beq.n	8008e72 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	4b2f      	ldr	r3, [pc, #188]	; (8008ee8 <FMC_SDRAM_Init+0xe0>)
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e38:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008e3e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008e44:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008e4a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008e50:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008e56:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008e5c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008e62:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	e032      	b.n	8008ed8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e7e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008e88:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008e8e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <FMC_SDRAM_Init+0xe0>)
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008eac:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008eb2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008eb8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008ebe:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008ec4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	ffff8000 	.word	0xffff8000

08008eec <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d02e      	beq.n	8008f64 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008f12:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f22:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008f2c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008f36:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008f40:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008f4a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f54:	4313      	orrs	r3, r2
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	609a      	str	r2, [r3, #8]
 8008f62:	e039      	b.n	8008fd8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4b1e      	ldr	r3, [pc, #120]	; (8008fe8 <FMC_SDRAM_Timing_Init+0xfc>)
 8008f6e:	4013      	ands	r3, r2
 8008f70:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008f82:	4313      	orrs	r3, r2
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008f96:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008fa6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008fb0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008fba:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	ff0f0fff 	.word	0xff0f0fff

08008fec <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009004:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	3b01      	subs	r3, #1
 800900c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800900e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009016:	4313      	orrs	r3, r2
 8009018:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	371c      	adds	r7, #28
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800902e:	b480      	push	{r7}
 8009030:	b083      	sub	sp, #12
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	695a      	ldr	r2, [r3, #20]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	005b      	lsls	r3, r3, #1
 8009040:	431a      	orrs	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009054:	b084      	sub	sp, #16
 8009056:	b480      	push	{r7}
 8009058:	b085      	sub	sp, #20
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	f107 001c 	add.w	r0, r7, #28
 8009062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800906a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800906c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800906e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009072:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009076:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800907a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800907c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800907e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	4313      	orrs	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <SDMMC_Init+0x54>)
 800908c:	4013      	ands	r3, r2
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	431a      	orrs	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	b004      	add	sp, #16
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	ffff8100 	.word	0xffff8100

080090ac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2203      	movs	r2, #3
 80090f4:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 0303 	and.w	r3, r3, #3
}
 8009114:	4618      	mov	r0, r3
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800913e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009144:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800914a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4313      	orrs	r3, r2
 8009150:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	4b06      	ldr	r3, [pc, #24]	; (8009170 <SDMMC_SendCommand+0x50>)
 8009158:	4013      	ands	r3, r2
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	431a      	orrs	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	fffff000 	.word	0xfffff000

08009174 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	b2db      	uxtb	r3, r3
}
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	3314      	adds	r3, #20
 80091a0:	461a      	mov	r2, r3
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	4413      	add	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
}  
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091de:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80091e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80091ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	431a      	orrs	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009202:	2300      	movs	r3, #0

}
 8009204:	4618      	mov	r0, r3
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800921a:	2300      	movs	r3, #0
 800921c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009222:	2310      	movs	r3, #16
 8009224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009226:	2340      	movs	r3, #64	; 0x40
 8009228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800922e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009232:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009234:	f107 0308 	add.w	r3, r7, #8
 8009238:	4619      	mov	r1, r3
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7ff ff70 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009240:	f241 3288 	movw	r2, #5000	; 0x1388
 8009244:	2110      	movs	r1, #16
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa64 	bl	8009714 <SDMMC_GetCmdResp1>
 800924c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800924e:	69fb      	ldr	r3, [r7, #28]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3720      	adds	r7, #32
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009262:	2300      	movs	r3, #0
 8009264:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800926a:	2311      	movs	r3, #17
 800926c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800926e:	2340      	movs	r3, #64	; 0x40
 8009270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009272:	2300      	movs	r3, #0
 8009274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800927a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800927c:	f107 0308 	add.w	r3, r7, #8
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7ff ff4c 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009288:	f241 3288 	movw	r2, #5000	; 0x1388
 800928c:	2111      	movs	r1, #17
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fa40 	bl	8009714 <SDMMC_GetCmdResp1>
 8009294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009296:	69fb      	ldr	r3, [r7, #28]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3720      	adds	r7, #32
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80092aa:	2300      	movs	r3, #0
 80092ac:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80092b2:	2312      	movs	r3, #18
 80092b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092b6:	2340      	movs	r3, #64	; 0x40
 80092b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092ba:	2300      	movs	r3, #0
 80092bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092c2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092c4:	f107 0308 	add.w	r3, r7, #8
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7ff ff28 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80092d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d4:	2112      	movs	r1, #18
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa1c 	bl	8009714 <SDMMC_GetCmdResp1>
 80092dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092de:	69fb      	ldr	r3, [r7, #28]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3720      	adds	r7, #32
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80092f2:	2300      	movs	r3, #0
 80092f4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80092fa:	2318      	movs	r3, #24
 80092fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092fe:	2340      	movs	r3, #64	; 0x40
 8009300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009302:	2300      	movs	r3, #0
 8009304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800930a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800930c:	f107 0308 	add.w	r3, r7, #8
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff ff04 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009318:	f241 3288 	movw	r2, #5000	; 0x1388
 800931c:	2118      	movs	r1, #24
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f9f8 	bl	8009714 <SDMMC_GetCmdResp1>
 8009324:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009326:	69fb      	ldr	r3, [r7, #28]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3720      	adds	r7, #32
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b088      	sub	sp, #32
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800933a:	2300      	movs	r3, #0
 800933c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009342:	2319      	movs	r3, #25
 8009344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009346:	2340      	movs	r3, #64	; 0x40
 8009348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800934a:	2300      	movs	r3, #0
 800934c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800934e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009352:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009354:	f107 0308 	add.w	r3, r7, #8
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff fee0 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009360:	f241 3288 	movw	r2, #5000	; 0x1388
 8009364:	2119      	movs	r1, #25
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f9d4 	bl	8009714 <SDMMC_GetCmdResp1>
 800936c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800936e:	69fb      	ldr	r3, [r7, #28]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3720      	adds	r7, #32
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009380:	2300      	movs	r3, #0
 8009382:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009388:	230c      	movs	r3, #12
 800938a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800938c:	2340      	movs	r3, #64	; 0x40
 800938e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009390:	2300      	movs	r3, #0
 8009392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009398:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800939a:	f107 0308 	add.w	r3, r7, #8
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7ff febd 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80093a6:	4a05      	ldr	r2, [pc, #20]	; (80093bc <SDMMC_CmdStopTransfer+0x44>)
 80093a8:	210c      	movs	r1, #12
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f9b2 	bl	8009714 <SDMMC_GetCmdResp1>
 80093b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093b2:	69fb      	ldr	r3, [r7, #28]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3720      	adds	r7, #32
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	05f5e100 	.word	0x05f5e100

080093c0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08a      	sub	sp, #40	; 0x28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093cc:	2300      	movs	r3, #0
 80093ce:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80093d4:	2307      	movs	r3, #7
 80093d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093d8:	2340      	movs	r3, #64	; 0x40
 80093da:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093dc:	2300      	movs	r3, #0
 80093de:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093e4:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093e6:	f107 0310 	add.w	r3, r7, #16
 80093ea:	4619      	mov	r1, r3
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7ff fe97 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80093f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f6:	2107      	movs	r1, #7
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 f98b 	bl	8009714 <SDMMC_GetCmdResp1>
 80093fe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009402:	4618      	mov	r0, r3
 8009404:	3728      	adds	r7, #40	; 0x28
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b088      	sub	sp, #32
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009412:	2300      	movs	r3, #0
 8009414:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800941a:	2300      	movs	r3, #0
 800941c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800941e:	2300      	movs	r3, #0
 8009420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800942a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800942c:	f107 0308 	add.w	r3, r7, #8
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff fe74 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f941 	bl	80096c0 <SDMMC_GetCmdError>
 800943e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009440:	69fb      	ldr	r3, [r7, #28]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3720      	adds	r7, #32
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b088      	sub	sp, #32
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009452:	2300      	movs	r3, #0
 8009454:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009456:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800945a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800945c:	2308      	movs	r3, #8
 800945e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009460:	2340      	movs	r3, #64	; 0x40
 8009462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009464:	2300      	movs	r3, #0
 8009466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800946c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800946e:	f107 0308 	add.w	r3, r7, #8
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff fe53 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fb12 	bl	8009aa4 <SDMMC_GetCmdResp7>
 8009480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009482:	69fb      	ldr	r3, [r7, #28]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3720      	adds	r7, #32
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009496:	2300      	movs	r3, #0
 8009498:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800949e:	2337      	movs	r3, #55	; 0x37
 80094a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094a2:	2340      	movs	r3, #64	; 0x40
 80094a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ae:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094b0:	f107 0308 	add.w	r3, r7, #8
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7ff fe32 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80094bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80094c0:	2137      	movs	r1, #55	; 0x37
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f926 	bl	8009714 <SDMMC_GetCmdResp1>
 80094c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ca:	69fb      	ldr	r3, [r7, #28]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3720      	adds	r7, #32
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b088      	sub	sp, #32
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094de:	2300      	movs	r3, #0
 80094e0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	4b0d      	ldr	r3, [pc, #52]	; (800951c <SDMMC_CmdAppOperCommand+0x48>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80094ea:	2329      	movs	r3, #41	; 0x29
 80094ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094ee:	2340      	movs	r3, #64	; 0x40
 80094f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094f2:	2300      	movs	r3, #0
 80094f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094fa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094fc:	f107 0308 	add.w	r3, r7, #8
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff fe0c 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fa29 	bl	8009960 <SDMMC_GetCmdResp3>
 800950e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009510:	69fb      	ldr	r3, [r7, #28]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3720      	adds	r7, #32
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	80100000 	.word	0x80100000

08009520 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b088      	sub	sp, #32
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800952a:	2300      	movs	r3, #0
 800952c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009532:	2306      	movs	r3, #6
 8009534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009536:	2340      	movs	r3, #64	; 0x40
 8009538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800953a:	2300      	movs	r3, #0
 800953c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800953e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009542:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009544:	f107 0308 	add.w	r3, r7, #8
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff fde8 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009550:	f241 3288 	movw	r2, #5000	; 0x1388
 8009554:	2106      	movs	r1, #6
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f8dc 	bl	8009714 <SDMMC_GetCmdResp1>
 800955c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800955e:	69fb      	ldr	r3, [r7, #28]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3720      	adds	r7, #32
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009570:	2300      	movs	r3, #0
 8009572:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 8009574:	2300      	movs	r3, #0
 8009576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009578:	2333      	movs	r3, #51	; 0x33
 800957a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800957c:	2340      	movs	r3, #64	; 0x40
 800957e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009588:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800958a:	f107 0308 	add.w	r3, r7, #8
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff fdc5 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009596:	f241 3288 	movw	r2, #5000	; 0x1388
 800959a:	2133      	movs	r1, #51	; 0x33
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f8b9 	bl	8009714 <SDMMC_GetCmdResp1>
 80095a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095a4:	69fb      	ldr	r3, [r7, #28]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3720      	adds	r7, #32
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b088      	sub	sp, #32
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095b6:	2300      	movs	r3, #0
 80095b8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80095be:	2302      	movs	r3, #2
 80095c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80095c2:	23c0      	movs	r3, #192	; 0xc0
 80095c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ce:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095d0:	f107 0308 	add.w	r3, r7, #8
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7ff fda2 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f97f 	bl	80098e0 <SDMMC_GetCmdResp2>
 80095e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095e4:	69fb      	ldr	r3, [r7, #28]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3720      	adds	r7, #32
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b088      	sub	sp, #32
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009600:	2309      	movs	r3, #9
 8009602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009604:	23c0      	movs	r3, #192	; 0xc0
 8009606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009608:	2300      	movs	r3, #0
 800960a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800960c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009610:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009612:	f107 0308 	add.w	r3, r7, #8
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7ff fd81 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f95e 	bl	80098e0 <SDMMC_GetCmdResp2>
 8009624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009626:	69fb      	ldr	r3, [r7, #28]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3720      	adds	r7, #32
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b088      	sub	sp, #32
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800963a:	2300      	movs	r3, #0
 800963c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009642:	2303      	movs	r3, #3
 8009644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009646:	2340      	movs	r3, #64	; 0x40
 8009648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800964a:	2300      	movs	r3, #0
 800964c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800964e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009652:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009654:	f107 0308 	add.w	r3, r7, #8
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff fd60 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	2103      	movs	r1, #3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f9af 	bl	80099c8 <SDMMC_GetCmdResp6>
 800966a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800966c:	69fb      	ldr	r3, [r7, #28]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3720      	adds	r7, #32
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b088      	sub	sp, #32
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009680:	2300      	movs	r3, #0
 8009682:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009688:	230d      	movs	r3, #13
 800968a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800968c:	2340      	movs	r3, #64	; 0x40
 800968e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009690:	2300      	movs	r3, #0
 8009692:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009698:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800969a:	f107 0308 	add.w	r3, r7, #8
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff fd3d 	bl	8009120 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80096a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096aa:	210d      	movs	r1, #13
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f831 	bl	8009714 <SDMMC_GetCmdResp1>
 80096b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096b4:	69fb      	ldr	r3, [r7, #28]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3720      	adds	r7, #32
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80096c0:	b490      	push	{r4, r7}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80096c8:	4b10      	ldr	r3, [pc, #64]	; (800970c <SDMMC_GetCmdError+0x4c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a10      	ldr	r2, [pc, #64]	; (8009710 <SDMMC_GetCmdError+0x50>)
 80096ce:	fba2 2303 	umull	r2, r3, r2, r3
 80096d2:	0a5b      	lsrs	r3, r3, #9
 80096d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80096dc:	4623      	mov	r3, r4
 80096de:	1e5c      	subs	r4, r3, #1
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d102      	bne.n	80096ea <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096e8:	e00a      	b.n	8009700 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d0f2      	beq.n	80096dc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80096fc:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bc90      	pop	{r4, r7}
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20000080 	.word	0x20000080
 8009710:	10624dd3 	.word	0x10624dd3

08009714 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009714:	b590      	push	{r4, r7, lr}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	460b      	mov	r3, r1
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8009722:	4b6c      	ldr	r3, [pc, #432]	; (80098d4 <SDMMC_GetCmdResp1+0x1c0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a6c      	ldr	r2, [pc, #432]	; (80098d8 <SDMMC_GetCmdResp1+0x1c4>)
 8009728:	fba2 2303 	umull	r2, r3, r2, r3
 800972c:	0a5b      	lsrs	r3, r3, #9
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009734:	4623      	mov	r3, r4
 8009736:	1e5c      	subs	r4, r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	d102      	bne.n	8009742 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800973c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009740:	e0c3      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009746:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800974a:	2b00      	cmp	r3, #0
 800974c:	d0f2      	beq.n	8009734 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009752:	f003 0304 	and.w	r3, r3, #4
 8009756:	2b00      	cmp	r3, #0
 8009758:	d004      	beq.n	8009764 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2204      	movs	r2, #4
 800975e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009760:	2304      	movs	r3, #4
 8009762:	e0b2      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	d004      	beq.n	800977a <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2201      	movs	r2, #1
 8009774:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009776:	2301      	movs	r3, #1
 8009778:	e0a7      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f7ff fcfa 	bl	8009174 <SDMMC_GetCommandResponse>
 8009780:	4603      	mov	r3, r0
 8009782:	461a      	mov	r2, r3
 8009784:	7afb      	ldrb	r3, [r7, #11]
 8009786:	4293      	cmp	r3, r2
 8009788:	d001      	beq.n	800978e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800978a:	2301      	movs	r3, #1
 800978c:	e09d      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009794:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009796:	2100      	movs	r1, #0
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff fcf8 	bl	800918e <SDMMC_GetResponse>
 800979e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	4b4e      	ldr	r3, [pc, #312]	; (80098dc <SDMMC_GetCmdResp1+0x1c8>)
 80097a4:	4013      	ands	r3, r2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80097aa:	2300      	movs	r3, #0
 80097ac:	e08d      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	da02      	bge.n	80097ba <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80097b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097b8:	e087      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80097c4:	2340      	movs	r3, #64	; 0x40
 80097c6:	e080      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80097d2:	2380      	movs	r3, #128	; 0x80
 80097d4:	e079      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80097e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097e4:	e071      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80097f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097f4:	e069      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d002      	beq.n	8009806 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009804:	e061      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009814:	e059      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009824:	e051      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009834:	e049      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009840:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009844:	e041      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8009850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009854:	e039      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009864:	e031      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009870:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009874:	e029      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009880:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009884:	e021      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009890:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009894:	e019      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80098a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80098a4:	e011      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80098b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80098b4:	e009      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80098c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80098c4:	e001      	b.n	80098ca <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	371c      	adds	r7, #28
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd90      	pop	{r4, r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20000080 	.word	0x20000080
 80098d8:	10624dd3 	.word	0x10624dd3
 80098dc:	fdffe008 	.word	0xfdffe008

080098e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80098e0:	b490      	push	{r4, r7}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80098e8:	4b1b      	ldr	r3, [pc, #108]	; (8009958 <SDMMC_GetCmdResp2+0x78>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a1b      	ldr	r2, [pc, #108]	; (800995c <SDMMC_GetCmdResp2+0x7c>)
 80098ee:	fba2 2303 	umull	r2, r3, r2, r3
 80098f2:	0a5b      	lsrs	r3, r3, #9
 80098f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80098fc:	4623      	mov	r3, r4
 80098fe:	1e5c      	subs	r4, r3, #1
 8009900:	2b00      	cmp	r3, #0
 8009902:	d102      	bne.n	800990a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009904:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009908:	e020      	b.n	800994c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0f2      	beq.n	80098fc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991a:	f003 0304 	and.w	r3, r3, #4
 800991e:	2b00      	cmp	r3, #0
 8009920:	d004      	beq.n	800992c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2204      	movs	r2, #4
 8009926:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009928:	2304      	movs	r3, #4
 800992a:	e00f      	b.n	800994c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009930:	f003 0301 	and.w	r3, r3, #1
 8009934:	2b00      	cmp	r3, #0
 8009936:	d004      	beq.n	8009942 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800993e:	2301      	movs	r3, #1
 8009940:	e004      	b.n	800994c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009948:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bc90      	pop	{r4, r7}
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	20000080 	.word	0x20000080
 800995c:	10624dd3 	.word	0x10624dd3

08009960 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009960:	b490      	push	{r4, r7}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009968:	4b15      	ldr	r3, [pc, #84]	; (80099c0 <SDMMC_GetCmdResp3+0x60>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a15      	ldr	r2, [pc, #84]	; (80099c4 <SDMMC_GetCmdResp3+0x64>)
 800996e:	fba2 2303 	umull	r2, r3, r2, r3
 8009972:	0a5b      	lsrs	r3, r3, #9
 8009974:	f241 3288 	movw	r2, #5000	; 0x1388
 8009978:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800997c:	4623      	mov	r3, r4
 800997e:	1e5c      	subs	r4, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d102      	bne.n	800998a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009988:	e015      	b.n	80099b6 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0f2      	beq.n	800997c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800999a:	f003 0304 	and.w	r3, r3, #4
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d004      	beq.n	80099ac <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2204      	movs	r2, #4
 80099a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099a8:	2304      	movs	r3, #4
 80099aa:	e004      	b.n	80099b6 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80099b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bc90      	pop	{r4, r7}
 80099be:	4770      	bx	lr
 80099c0:	20000080 	.word	0x20000080
 80099c4:	10624dd3 	.word	0x10624dd3

080099c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80099c8:	b590      	push	{r4, r7, lr}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	460b      	mov	r3, r1
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80099d6:	4b31      	ldr	r3, [pc, #196]	; (8009a9c <SDMMC_GetCmdResp6+0xd4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a31      	ldr	r2, [pc, #196]	; (8009aa0 <SDMMC_GetCmdResp6+0xd8>)
 80099dc:	fba2 2303 	umull	r2, r3, r2, r3
 80099e0:	0a5b      	lsrs	r3, r3, #9
 80099e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099e6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80099ea:	4623      	mov	r3, r4
 80099ec:	1e5c      	subs	r4, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d102      	bne.n	80099f8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099f6:	e04c      	b.n	8009a92 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d0f2      	beq.n	80099ea <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d004      	beq.n	8009a1a <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2204      	movs	r2, #4
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a16:	2304      	movs	r3, #4
 8009a18:	e03b      	b.n	8009a92 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d004      	beq.n	8009a30 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e030      	b.n	8009a92 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f7ff fb9f 	bl	8009174 <SDMMC_GetCommandResponse>
 8009a36:	4603      	mov	r3, r0
 8009a38:	461a      	mov	r2, r3
 8009a3a:	7afb      	ldrb	r3, [r7, #11]
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d001      	beq.n	8009a44 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e026      	b.n	8009a92 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009a4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f7ff fb9d 	bl	800918e <SDMMC_GetResponse>
 8009a54:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d106      	bne.n	8009a6e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	0c1b      	lsrs	r3, r3, #16
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e011      	b.n	8009a92 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a7c:	e009      	b.n	8009a92 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d002      	beq.n	8009a8e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a8c:	e001      	b.n	8009a92 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	371c      	adds	r7, #28
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd90      	pop	{r4, r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20000080 	.word	0x20000080
 8009aa0:	10624dd3 	.word	0x10624dd3

08009aa4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009aa4:	b490      	push	{r4, r7}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009aac:	4b18      	ldr	r3, [pc, #96]	; (8009b10 <SDMMC_GetCmdResp7+0x6c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a18      	ldr	r2, [pc, #96]	; (8009b14 <SDMMC_GetCmdResp7+0x70>)
 8009ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab6:	0a5b      	lsrs	r3, r3, #9
 8009ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009abc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009ac0:	4623      	mov	r3, r4
 8009ac2:	1e5c      	subs	r4, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ac8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009acc:	e01a      	b.n	8009b04 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d0f2      	beq.n	8009ac0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ade:	f003 0304 	and.w	r3, r3, #4
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2240      	movs	r2, #64	; 0x40
 8009aea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009aec:	2304      	movs	r3, #4
 8009aee:	e009      	b.n	8009b04 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2240      	movs	r2, #64	; 0x40
 8009b00:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009b02:	2300      	movs	r3, #0
  
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bc90      	pop	{r4, r7}
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	20000080 	.word	0x20000080
 8009b14:	10624dd3 	.word	0x10624dd3

08009b18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	4613      	mov	r3, r2
 8009b24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009b26:	2301      	movs	r3, #1
 8009b28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009b2e:	4b1f      	ldr	r3, [pc, #124]	; (8009bac <FATFS_LinkDriverEx+0x94>)
 8009b30:	7a5b      	ldrb	r3, [r3, #9]
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d131      	bne.n	8009b9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009b38:	4b1c      	ldr	r3, [pc, #112]	; (8009bac <FATFS_LinkDriverEx+0x94>)
 8009b3a:	7a5b      	ldrb	r3, [r3, #9]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	461a      	mov	r2, r3
 8009b40:	4b1a      	ldr	r3, [pc, #104]	; (8009bac <FATFS_LinkDriverEx+0x94>)
 8009b42:	2100      	movs	r1, #0
 8009b44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009b46:	4b19      	ldr	r3, [pc, #100]	; (8009bac <FATFS_LinkDriverEx+0x94>)
 8009b48:	7a5b      	ldrb	r3, [r3, #9]
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	4a17      	ldr	r2, [pc, #92]	; (8009bac <FATFS_LinkDriverEx+0x94>)
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009b56:	4b15      	ldr	r3, [pc, #84]	; (8009bac <FATFS_LinkDriverEx+0x94>)
 8009b58:	7a5b      	ldrb	r3, [r3, #9]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	4b13      	ldr	r3, [pc, #76]	; (8009bac <FATFS_LinkDriverEx+0x94>)
 8009b60:	4413      	add	r3, r2
 8009b62:	79fa      	ldrb	r2, [r7, #7]
 8009b64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009b66:	4b11      	ldr	r3, [pc, #68]	; (8009bac <FATFS_LinkDriverEx+0x94>)
 8009b68:	7a5b      	ldrb	r3, [r3, #9]
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	1c5a      	adds	r2, r3, #1
 8009b6e:	b2d1      	uxtb	r1, r2
 8009b70:	4a0e      	ldr	r2, [pc, #56]	; (8009bac <FATFS_LinkDriverEx+0x94>)
 8009b72:	7251      	strb	r1, [r2, #9]
 8009b74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009b76:	7dbb      	ldrb	r3, [r7, #22]
 8009b78:	3330      	adds	r3, #48	; 0x30
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	3301      	adds	r3, #1
 8009b84:	223a      	movs	r2, #58	; 0x3a
 8009b86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	3302      	adds	r3, #2
 8009b8c:	222f      	movs	r2, #47	; 0x2f
 8009b8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	3303      	adds	r3, #3
 8009b94:	2200      	movs	r2, #0
 8009b96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	371c      	adds	r7, #28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	20000314 	.word	0x20000314

08009bb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009bba:	2200      	movs	r2, #0
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff ffaa 	bl	8009b18 <FATFS_LinkDriverEx>
 8009bc4:	4603      	mov	r3, r0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
	...

08009bd0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009bda:	f000 f879 	bl	8009cd0 <BSP_SD_IsDetected>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d001      	beq.n	8009be8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009be4:	2302      	movs	r3, #2
 8009be6:	e012      	b.n	8009c0e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8009be8:	480b      	ldr	r0, [pc, #44]	; (8009c18 <BSP_SD_Init+0x48>)
 8009bea:	f7fd fc57 	bl	800749c <HAL_SD_Init>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009bf2:	79fb      	ldrb	r3, [r7, #7]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d109      	bne.n	8009c0c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009bf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009bfc:	4806      	ldr	r0, [pc, #24]	; (8009c18 <BSP_SD_Init+0x48>)
 8009bfe:	f7fe fa2d 	bl	800805c <HAL_SD_ConfigWideBusOperation>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20000964 	.word	0x20000964

08009c1c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af02      	add	r7, sp, #8
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
 8009c28:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	68f9      	ldr	r1, [r7, #12]
 8009c38:	4806      	ldr	r0, [pc, #24]	; (8009c54 <BSP_SD_ReadBlocks+0x38>)
 8009c3a:	f7fd fcbe 	bl	80075ba <HAL_SD_ReadBlocks>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	20000964 	.word	0x20000964

08009c58 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
 8009c64:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	68f9      	ldr	r1, [r7, #12]
 8009c74:	4806      	ldr	r0, [pc, #24]	; (8009c90 <BSP_SD_WriteBlocks+0x38>)
 8009c76:	f7fd fe36 	bl	80078e6 <HAL_SD_WriteBlocks>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8009c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3718      	adds	r7, #24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20000964 	.word	0x20000964

08009c94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009c98:	4805      	ldr	r0, [pc, #20]	; (8009cb0 <BSP_SD_GetCardState+0x1c>)
 8009c9a:	f7fe fa5b 	bl	8008154 <HAL_SD_GetCardState>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b04      	cmp	r3, #4
 8009ca2:	bf14      	ite	ne
 8009ca4:	2301      	movne	r3, #1
 8009ca6:	2300      	moveq	r3, #0
 8009ca8:	b2db      	uxtb	r3, r3
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000964 	.word	0x20000964

08009cb4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8009cbc:	6879      	ldr	r1, [r7, #4]
 8009cbe:	4803      	ldr	r0, [pc, #12]	; (8009ccc <BSP_SD_GetCardInfo+0x18>)
 8009cc0:	f7fe f9a0 	bl	8008004 <HAL_SD_GetCardInfo>
}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	20000964 	.word	0x20000964

08009cd0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8009cda:	f000 f81d 	bl	8009d18 <BSP_PlatformIsDetected>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	b2db      	uxtb	r3, r3
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009cf8:	4904      	ldr	r1, [pc, #16]	; (8009d0c <MX_FATFS_Init+0x18>)
 8009cfa:	4805      	ldr	r0, [pc, #20]	; (8009d10 <MX_FATFS_Init+0x1c>)
 8009cfc:	f7ff ff58 	bl	8009bb0 <FATFS_LinkDriver>
 8009d00:	4603      	mov	r3, r0
 8009d02:	461a      	mov	r2, r3
 8009d04:	4b03      	ldr	r3, [pc, #12]	; (8009d14 <MX_FATFS_Init+0x20>)
 8009d06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009d08:	bf00      	nop
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	200004e0 	.word	0x200004e0
 8009d10:	0800fda0 	.word	0x0800fda0
 8009d14:	200004dc 	.word	0x200004dc

08009d18 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009d26:	4806      	ldr	r0, [pc, #24]	; (8009d40 <BSP_PlatformIsDetected+0x28>)
 8009d28:	f7fb faae 	bl	8005288 <HAL_GPIO_ReadPin>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009d32:	2300      	movs	r3, #0
 8009d34:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8009d36:	79fb      	ldrb	r3, [r7, #7]
}  
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	40022000 	.word	0x40022000

08009d44 <SCB_EnableICache>:
{
 8009d44:	b480      	push	{r7}
 8009d46:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009d48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009d4c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009d50:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <SCB_EnableICache+0x3c>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009d58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009d5c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009d60:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <SCB_EnableICache+0x3c>)
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	4a06      	ldr	r2, [pc, #24]	; (8009d80 <SCB_EnableICache+0x3c>)
 8009d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d6a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009d6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009d70:	f3bf 8f6f 	isb	sy
}
 8009d74:	bf00      	nop
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	e000ed00 	.word	0xe000ed00

08009d84 <SCB_EnableDCache>:
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8009d8a:	4b1d      	ldr	r3, [pc, #116]	; (8009e00 <SCB_EnableDCache+0x7c>)
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009d92:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8009d96:	4b1a      	ldr	r3, [pc, #104]	; (8009e00 <SCB_EnableDCache+0x7c>)
 8009d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d9c:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	0b5b      	lsrs	r3, r3, #13
 8009da2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009da6:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	08db      	lsrs	r3, r3, #3
 8009dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009db0:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	015a      	lsls	r2, r3, #5
 8009db6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8009dba:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009dc0:	490f      	ldr	r1, [pc, #60]	; (8009e00 <SCB_EnableDCache+0x7c>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	1e5a      	subs	r2, r3, #1
 8009dcc:	60ba      	str	r2, [r7, #8]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1ef      	bne.n	8009db2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	1e5a      	subs	r2, r3, #1
 8009dd6:	60fa      	str	r2, [r7, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1e5      	bne.n	8009da8 <SCB_EnableDCache+0x24>
 8009ddc:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8009de0:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <SCB_EnableDCache+0x7c>)
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	4a06      	ldr	r2, [pc, #24]	; (8009e00 <SCB_EnableDCache+0x7c>)
 8009de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dea:	6153      	str	r3, [r2, #20]
 8009dec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009df0:	f3bf 8f6f 	isb	sy
}
 8009df4:	bf00      	nop
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	e000ed00 	.word	0xe000ed00

08009e04 <HAL_TIM_PeriodElapsedCallback>:
uint32_t colorposs = LCD_COLOR_DARKGRAY;
unsigned int nBytes;


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a12      	ldr	r2, [pc, #72]	; (8009e5c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d102      	bne.n	8009e1c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		flagTemp=1;
 8009e16:	4b12      	ldr	r3, [pc, #72]	; (8009e60 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8009e18:	2201      	movs	r2, #1
 8009e1a:	701a      	strb	r2, [r3, #0]
	}

	if(htim->Instance == TIM6)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a10      	ldr	r2, [pc, #64]	; (8009e64 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d113      	bne.n	8009e4e <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		updateDisplay=1;
 8009e26:	4b10      	ldr	r3, [pc, #64]	; (8009e68 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8009e28:	2201      	movs	r2, #1
 8009e2a:	701a      	strb	r2, [r3, #0]
		countTotal++;
 8009e2c:	4b0f      	ldr	r3, [pc, #60]	; (8009e6c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3301      	adds	r3, #1
 8009e32:	4a0e      	ldr	r2, [pc, #56]	; (8009e6c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8009e34:	6013      	str	r3, [r2, #0]
		countPlay--;
 8009e36:	4b0e      	ldr	r3, [pc, #56]	; (8009e70 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	4a0c      	ldr	r2, [pc, #48]	; (8009e70 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8009e3e:	6013      	str	r3, [r2, #0]
		if(countPlay==0)
 8009e40:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <HAL_TIM_PeriodElapsedCallback+0x4a>
			countPlay=20;
 8009e48:	4b09      	ldr	r3, [pc, #36]	; (8009e70 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8009e4a:	2214      	movs	r2, #20
 8009e4c:	601a      	str	r2, [r3, #0]
	}
}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	40001400 	.word	0x40001400
 8009e60:	20000321 	.word	0x20000321
 8009e64:	40001000 	.word	0x40001000
 8009e68:	20000320 	.word	0x20000320
 8009e6c:	20000324 	.word	0x20000324
 8009e70:	20000064 	.word	0x20000064

08009e74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_13){
 8009e7e:	88fb      	ldrh	r3, [r7, #6]
 8009e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e84:	d108      	bne.n	8009e98 <HAL_GPIO_EXTI_Callback+0x24>
		BSP_TS_GetState(&TS_State);
 8009e86:	4809      	ldr	r0, [pc, #36]	; (8009eac <HAL_GPIO_EXTI_Callback+0x38>)
 8009e88:	f7f8 fbd6 	bl	8002638 <BSP_TS_GetState>
		flagTS=1;
 8009e8c:	4b08      	ldr	r3, [pc, #32]	; (8009eb0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8009e8e:	2201      	movs	r2, #1
 8009e90:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 8009e92:	2032      	movs	r0, #50	; 0x32
 8009e94:	f7f8 fd78 	bl	8002988 <HAL_Delay>
	}

	if(GPIO_Pin == GPIO_PIN_0){
 8009e98:	88fb      	ldrh	r3, [r7, #6]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d102      	bne.n	8009ea4 <HAL_GPIO_EXTI_Callback+0x30>
		flagMenu=1;
 8009e9e:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <HAL_GPIO_EXTI_Callback+0x40>)
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	701a      	strb	r2, [r3, #0]
	}
}
 8009ea4:	bf00      	nop
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	20000b74 	.word	0x20000b74
 8009eb0:	20000322 	.word	0x20000322
 8009eb4:	20000323 	.word	0x20000323

08009eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009eb8:	b598      	push	{r3, r4, r7, lr}
 8009eba:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8009ebc:	f7ff ff42 	bl	8009d44 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8009ec0:	f7ff ff60 	bl	8009d84 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009ec4:	f7f8 fd02 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009ec8:	f000 f898 	bl	8009ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009ecc:	f000 fc48 	bl	800a760 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8009ed0:	f000 f98a 	bl	800a1e8 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8009ed4:	f000 f9c0 	bl	800a258 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8009ed8:	f000 fbf4 	bl	800a6c4 <MX_FMC_Init>
  MX_LTDC_Init();
 8009edc:	f000 fab0 	bl	800a440 <MX_LTDC_Init>
  MX_SDMMC2_SD_Init();
 8009ee0:	f000 fb60 	bl	800a5a4 <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 8009ee4:	f7ff ff06 	bl	8009cf4 <MX_FATFS_Init>
  MX_ADC1_Init();
 8009ee8:	f000 f92a 	bl	800a140 <MX_ADC1_Init>
  MX_TIM6_Init();
 8009eec:	f000 fb7a 	bl	800a5e4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8009ef0:	f000 fbb0 	bl	800a654 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8009ef4:	2001      	movs	r0, #1
 8009ef6:	f7f6 ff01 	bl	8000cfc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8009efa:	2000      	movs	r0, #0
 8009efc:	f7f6 fefe 	bl	8000cfc <BSP_LED_Init>
  LCD_Config1();
 8009f00:	f000 fce8 	bl	800a8d4 <LCD_Config1>
  HAL_ADC_Start(&hadc1);
 8009f04:	4834      	ldr	r0, [pc, #208]	; (8009fd8 <main+0x120>)
 8009f06:	f7f8 fda5 	bl	8002a54 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8009f0a:	4834      	ldr	r0, [pc, #208]	; (8009fdc <main+0x124>)
 8009f0c:	f7fe fcf0 	bl	80088f0 <HAL_TIM_Base_Start_IT>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8009f10:	f7f7 fa92 	bl	8001438 <BSP_LCD_GetXSize>
 8009f14:	4603      	mov	r3, r0
 8009f16:	b29c      	uxth	r4, r3
 8009f18:	f7f7 fa9a 	bl	8001450 <BSP_LCD_GetYSize>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	4619      	mov	r1, r3
 8009f22:	4620      	mov	r0, r4
 8009f24:	f7f8 faf6 	bl	8002514 <BSP_TS_Init>
  BSP_TS_ITConfig();
 8009f28:	f7f8 fb54 	bl	80025d4 <BSP_TS_ITConfig>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printMenu();
 8009f2c:	f000 fd94 	bl	800aa58 <printMenu>
  state=MENU;
 8009f30:	4b2b      	ldr	r3, [pc, #172]	; (8009fe0 <main+0x128>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	701a      	strb	r2, [r3, #0]
  {

	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  if(flagTemp){
 8009f36:	4b2b      	ldr	r3, [pc, #172]	; (8009fe4 <main+0x12c>)
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <main+0x8a>
		  displayTemp();
 8009f3e:	f000 fd2b 	bl	800a998 <displayTemp>
	  }

	  switch (state){
 8009f42:	4b27      	ldr	r3, [pc, #156]	; (8009fe0 <main+0x128>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d00f      	beq.n	8009f6a <main+0xb2>
 8009f4a:	2b06      	cmp	r3, #6
 8009f4c:	d02c      	beq.n	8009fa8 <main+0xf0>
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d135      	bne.n	8009fbe <main+0x106>

	  case MENU:

		  if(flagTS){
 8009f52:	4b25      	ldr	r3, [pc, #148]	; (8009fe8 <main+0x130>)
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d007      	beq.n	8009f6a <main+0xb2>
			  LCD_Config2();
 8009f5a:	f000 fcd1 	bl	800a900 <LCD_Config2>
			  touchMenu();
 8009f5e:	f000 fe7b 	bl	800ac58 <touchMenu>
			  updateDisplay=1;
 8009f62:	4b22      	ldr	r3, [pc, #136]	; (8009fec <main+0x134>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	701a      	strb	r2, [r3, #0]

			  break;
 8009f68:	e029      	b.n	8009fbe <main+0x106>
	  //case SINGLE:

		  //já lá vamos, semelhante ao multi

	  case MULTI:
		  if(updateDisplay==1)
 8009f6a:	4b20      	ldr	r3, [pc, #128]	; (8009fec <main+0x134>)
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d119      	bne.n	8009fa8 <main+0xf0>

		  {
			  updateDisplay=0;
 8009f74:	4b1d      	ldr	r3, [pc, #116]	; (8009fec <main+0x134>)
 8009f76:	2200      	movs	r2, #0
 8009f78:	701a      	strb	r2, [r3, #0]

			  printBoard();
 8009f7a:	f000 ff11 	bl	800ada0 <printBoard>
			  InitialPos();
 8009f7e:	f000 ff7b 	bl	800ae78 <InitialPos>
			  printTime();
 8009f82:	f000 ffa9 	bl	800aed8 <printTime>
			  HAL_TIM_Base_Start_IT(&htim6);
 8009f86:	481a      	ldr	r0, [pc, #104]	; (8009ff0 <main+0x138>)
 8009f88:	f7fe fcb2 	bl	80088f0 <HAL_TIM_Base_Start_IT>
			  printScore();
 8009f8c:	f001 f810 	bl	800afb0 <printScore>
			  virtualBoardUpdate();
 8009f90:	f001 f878 	bl	800b084 <virtualBoardUpdate>
			  clearPrePossMov();
 8009f94:	f001 f960 	bl	800b258 <clearPrePossMov>
			  LCDBoardUpdate();
 8009f98:	f001 fb2a 	bl	800b5f0 <LCDBoardUpdate>
			  Player++;
 8009f9c:	4b15      	ldr	r3, [pc, #84]	; (8009ff4 <main+0x13c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	4a14      	ldr	r2, [pc, #80]	; (8009ff4 <main+0x13c>)
 8009fa4:	6013      	str	r3, [r2, #0]
			  break;
 8009fa6:	e00a      	b.n	8009fbe <main+0x106>
		  }

	  case RULES:
		  if(updateDisplay==1)
 8009fa8:	4b10      	ldr	r3, [pc, #64]	; (8009fec <main+0x134>)
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d104      	bne.n	8009fbc <main+0x104>

		  {
			  updateDisplay=0;
 8009fb2:	4b0e      	ldr	r3, [pc, #56]	; (8009fec <main+0x134>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	701a      	strb	r2, [r3, #0]
			  readRules();
 8009fb8:	f001 fbfa 	bl	800b7b0 <readRules>
		  }

		  break;
 8009fbc:	bf00      	nop
	  }



	  if(flagMenu){
 8009fbe:	4b0e      	ldr	r3, [pc, #56]	; (8009ff8 <main+0x140>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d0b7      	beq.n	8009f36 <main+0x7e>
	 		  printMenu();
 8009fc6:	f000 fd47 	bl	800aa58 <printMenu>
	 		  state=MENU;
 8009fca:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <main+0x128>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	701a      	strb	r2, [r3, #0]
	 		  flagTS=0;
 8009fd0:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <main+0x130>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	701a      	strb	r2, [r3, #0]
	  if(flagTemp){
 8009fd6:	e7ae      	b.n	8009f36 <main+0x7e>
 8009fd8:	20000a90 	.word	0x20000a90
 8009fdc:	20000bb4 	.word	0x20000bb4
 8009fe0:	20000960 	.word	0x20000960
 8009fe4:	20000321 	.word	0x20000321
 8009fe8:	20000322 	.word	0x20000322
 8009fec:	20000320 	.word	0x20000320
 8009ff0:	20000adc 	.word	0x20000adc
 8009ff4:	20000068 	.word	0x20000068
 8009ff8:	20000323 	.word	0x20000323

08009ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b0b8      	sub	sp, #224	; 0xe0
 800a000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a002:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a006:	2234      	movs	r2, #52	; 0x34
 800a008:	2100      	movs	r1, #0
 800a00a:	4618      	mov	r0, r3
 800a00c:	f002 f8f5 	bl	800c1fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a010:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a014:	2200      	movs	r2, #0
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	605a      	str	r2, [r3, #4]
 800a01a:	609a      	str	r2, [r3, #8]
 800a01c:	60da      	str	r2, [r3, #12]
 800a01e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a020:	f107 0308 	add.w	r3, r7, #8
 800a024:	2290      	movs	r2, #144	; 0x90
 800a026:	2100      	movs	r1, #0
 800a028:	4618      	mov	r0, r3
 800a02a:	f002 f8e6 	bl	800c1fa <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a02e:	4b41      	ldr	r3, [pc, #260]	; (800a134 <SystemClock_Config+0x138>)
 800a030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a032:	4a40      	ldr	r2, [pc, #256]	; (800a134 <SystemClock_Config+0x138>)
 800a034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a038:	6413      	str	r3, [r2, #64]	; 0x40
 800a03a:	4b3e      	ldr	r3, [pc, #248]	; (800a134 <SystemClock_Config+0x138>)
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a042:	607b      	str	r3, [r7, #4]
 800a044:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a046:	4b3c      	ldr	r3, [pc, #240]	; (800a138 <SystemClock_Config+0x13c>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a3b      	ldr	r2, [pc, #236]	; (800a138 <SystemClock_Config+0x13c>)
 800a04c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	4b39      	ldr	r3, [pc, #228]	; (800a138 <SystemClock_Config+0x13c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a05a:	603b      	str	r3, [r7, #0]
 800a05c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a05e:	2301      	movs	r3, #1
 800a060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a06c:	2302      	movs	r3, #2
 800a06e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a072:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a076:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800a07a:	2319      	movs	r3, #25
 800a07c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 800a080:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a088:	2302      	movs	r3, #2
 800a08a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800a08e:	2308      	movs	r3, #8
 800a090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a094:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fc f9cd 	bl	8006438 <HAL_RCC_OscConfig>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d001      	beq.n	800a0a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800a0a4:	f001 fc50 	bl	800b948 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800a0a8:	f7fc f976 	bl	8006398 <HAL_PWREx_EnableOverDrive>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800a0b2:	f001 fc49 	bl	800b948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a0b6:	230f      	movs	r3, #15
 800a0b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a0bc:	2302      	movs	r3, #2
 800a0be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a0c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a0cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a0d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800a0d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a0dc:	2106      	movs	r1, #6
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fc fc1c 	bl	800691c <HAL_RCC_ClockConfig>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800a0ea:	f001 fc2d 	bl	800b948 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC2
 800a0ee:	4b13      	ldr	r3, [pc, #76]	; (800a13c <SystemClock_Config+0x140>)
 800a0f0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800a0f2:	23c0      	movs	r3, #192	; 0xc0
 800a0f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800a0fe:	2300      	movs	r3, #0
 800a100:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800a102:	2301      	movs	r3, #1
 800a104:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800a106:	2300      	movs	r3, #0
 800a108:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a10a:	2300      	movs	r3, #0
 800a10c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800a110:	2300      	movs	r3, #0
 800a112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a116:	f107 0308 	add.w	r3, r7, #8
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fc fd98 	bl	8006c50 <HAL_RCCEx_PeriphCLKConfig>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800a126:	f001 fc0f 	bl	800b948 <Error_Handler>
  }
}
 800a12a:	bf00      	nop
 800a12c:	37e0      	adds	r7, #224	; 0xe0
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	40023800 	.word	0x40023800
 800a138:	40007000 	.word	0x40007000
 800a13c:	04200008 	.word	0x04200008

0800a140 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a146:	463b      	mov	r3, r7
 800a148:	2200      	movs	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]
 800a14c:	605a      	str	r2, [r3, #4]
 800a14e:	609a      	str	r2, [r3, #8]
 800a150:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800a152:	4b21      	ldr	r3, [pc, #132]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a154:	4a21      	ldr	r2, [pc, #132]	; (800a1dc <MX_ADC1_Init+0x9c>)
 800a156:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800a158:	4b1f      	ldr	r3, [pc, #124]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a15a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a15e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a160:	4b1d      	ldr	r3, [pc, #116]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a162:	2200      	movs	r2, #0
 800a164:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800a166:	4b1c      	ldr	r3, [pc, #112]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a168:	2200      	movs	r2, #0
 800a16a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800a16c:	4b1a      	ldr	r3, [pc, #104]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a16e:	2201      	movs	r2, #1
 800a170:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a172:	4b19      	ldr	r3, [pc, #100]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a17a:	4b17      	ldr	r3, [pc, #92]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a180:	4b15      	ldr	r3, [pc, #84]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a182:	4a17      	ldr	r2, [pc, #92]	; (800a1e0 <MX_ADC1_Init+0xa0>)
 800a184:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a186:	4b14      	ldr	r3, [pc, #80]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a188:	2200      	movs	r2, #0
 800a18a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800a18c:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a18e:	2201      	movs	r2, #1
 800a190:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a192:	4b11      	ldr	r3, [pc, #68]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a19a:	4b0f      	ldr	r3, [pc, #60]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a1a0:	480d      	ldr	r0, [pc, #52]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a1a2:	f7f8 fc13 	bl	80029cc <HAL_ADC_Init>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800a1ac:	f001 fbcc 	bl	800b948 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800a1b0:	4b0c      	ldr	r3, [pc, #48]	; (800a1e4 <MX_ADC1_Init+0xa4>)
 800a1b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a1bc:	463b      	mov	r3, r7
 800a1be:	4619      	mov	r1, r3
 800a1c0:	4805      	ldr	r0, [pc, #20]	; (800a1d8 <MX_ADC1_Init+0x98>)
 800a1c2:	f7f8 fd99 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800a1cc:	f001 fbbc 	bl	800b948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a1d0:	bf00      	nop
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	20000a90 	.word	0x20000a90
 800a1dc:	40012000 	.word	0x40012000
 800a1e0:	0f000001 	.word	0x0f000001
 800a1e4:	10000012 	.word	0x10000012

0800a1e8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800a1ec:	4b18      	ldr	r3, [pc, #96]	; (800a250 <MX_DMA2D_Init+0x68>)
 800a1ee:	4a19      	ldr	r2, [pc, #100]	; (800a254 <MX_DMA2D_Init+0x6c>)
 800a1f0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800a1f2:	4b17      	ldr	r3, [pc, #92]	; (800a250 <MX_DMA2D_Init+0x68>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800a1f8:	4b15      	ldr	r3, [pc, #84]	; (800a250 <MX_DMA2D_Init+0x68>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800a1fe:	4b14      	ldr	r3, [pc, #80]	; (800a250 <MX_DMA2D_Init+0x68>)
 800a200:	2200      	movs	r2, #0
 800a202:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800a204:	4b12      	ldr	r3, [pc, #72]	; (800a250 <MX_DMA2D_Init+0x68>)
 800a206:	2200      	movs	r2, #0
 800a208:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800a20a:	4b11      	ldr	r3, [pc, #68]	; (800a250 <MX_DMA2D_Init+0x68>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800a210:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <MX_DMA2D_Init+0x68>)
 800a212:	2200      	movs	r2, #0
 800a214:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800a216:	4b0e      	ldr	r3, [pc, #56]	; (800a250 <MX_DMA2D_Init+0x68>)
 800a218:	2200      	movs	r2, #0
 800a21a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800a21c:	4b0c      	ldr	r3, [pc, #48]	; (800a250 <MX_DMA2D_Init+0x68>)
 800a21e:	2200      	movs	r2, #0
 800a220:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800a222:	4b0b      	ldr	r3, [pc, #44]	; (800a250 <MX_DMA2D_Init+0x68>)
 800a224:	2200      	movs	r2, #0
 800a226:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800a228:	4809      	ldr	r0, [pc, #36]	; (800a250 <MX_DMA2D_Init+0x68>)
 800a22a:	f7f9 fa61 	bl	80036f0 <HAL_DMA2D_Init>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800a234:	f001 fb88 	bl	800b948 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800a238:	2101      	movs	r1, #1
 800a23a:	4805      	ldr	r0, [pc, #20]	; (800a250 <MX_DMA2D_Init+0x68>)
 800a23c:	f7f9 fbc6 	bl	80039cc <HAL_DMA2D_ConfigLayer>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800a246:	f001 fb7f 	bl	800b948 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800a24a:	bf00      	nop
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000b1c 	.word	0x20000b1c
 800a254:	4002b000 	.word	0x4002b000

0800a258 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b0aa      	sub	sp, #168	; 0xa8
 800a25c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800a25e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	605a      	str	r2, [r3, #4]
 800a268:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800a26a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a26e:	2224      	movs	r2, #36	; 0x24
 800a270:	2100      	movs	r1, #0
 800a272:	4618      	mov	r0, r3
 800a274:	f001 ffc1 	bl	800c1fa <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800a278:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	605a      	str	r2, [r3, #4]
 800a282:	609a      	str	r2, [r3, #8]
 800a284:	60da      	str	r2, [r3, #12]
 800a286:	611a      	str	r2, [r3, #16]
 800a288:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800a28a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a28e:	2234      	movs	r2, #52	; 0x34
 800a290:	2100      	movs	r1, #0
 800a292:	4618      	mov	r0, r3
 800a294:	f001 ffb1 	bl	800c1fa <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800a298:	463b      	mov	r3, r7
 800a29a:	222c      	movs	r2, #44	; 0x2c
 800a29c:	2100      	movs	r1, #0
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f001 ffab 	bl	800c1fa <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800a2a4:	4b64      	ldr	r3, [pc, #400]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a2a6:	4a65      	ldr	r2, [pc, #404]	; (800a43c <MX_DSIHOST_DSI_Init+0x1e4>)
 800a2a8:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800a2aa:	4b63      	ldr	r3, [pc, #396]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800a2b0:	4b61      	ldr	r3, [pc, #388]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a2b2:	2204      	movs	r2, #4
 800a2b4:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800a2b6:	4b60      	ldr	r3, [pc, #384]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800a2bc:	2314      	movs	r3, #20
 800a2be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800a2ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4858      	ldr	r0, [pc, #352]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a2d6:	f7f9 fcfb 	bl	8003cd0 <HAL_DSI_Init>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800a2e0:	f001 fb32 	bl	800b948 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800a2fe:	2300      	movs	r3, #0
 800a300:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800a304:	2300      	movs	r3, #0
 800a306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800a316:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a31a:	4619      	mov	r1, r3
 800a31c:	4846      	ldr	r0, [pc, #280]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a31e:	f7fa fb13 	bl	8004948 <HAL_DSI_ConfigHostTimeouts>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800a328:	f001 fb0e 	bl	800b948 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800a32c:	231c      	movs	r3, #28
 800a32e:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800a330:	2321      	movs	r3, #33	; 0x21
 800a332:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800a334:	230f      	movs	r3, #15
 800a336:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800a338:	2319      	movs	r3, #25
 800a33a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800a33c:	2300      	movs	r3, #0
 800a33e:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800a344:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a348:	4619      	mov	r1, r3
 800a34a:	483b      	ldr	r0, [pc, #236]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a34c:	f7fa fa92 	bl	8004874 <HAL_DSI_ConfigPhyTimer>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800a356:	f001 faf7 	bl	800b948 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800a35a:	2104      	movs	r1, #4
 800a35c:	4836      	ldr	r0, [pc, #216]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a35e:	f7fa fa61 	bl	8004824 <HAL_DSI_ConfigFlowControl>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800a368:	f001 faee 	bl	800b948 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800a36c:	f242 7110 	movw	r1, #10000	; 0x2710
 800a370:	4831      	ldr	r0, [pc, #196]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a372:	f7fa fca7 	bl	8004cc4 <HAL_DSI_SetLowPowerRXFilter>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800a37c:	f001 fae4 	bl	800b948 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800a380:	2100      	movs	r1, #0
 800a382:	482d      	ldr	r0, [pc, #180]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a384:	f7f9 fe32 	bl	8003fec <HAL_DSI_ConfigErrorMonitor>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800a38e:	f001 fadb 	bl	800b948 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800a392:	2300      	movs	r3, #0
 800a394:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800a396:	2300      	movs	r3, #0
 800a398:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 800a39a:	2300      	movs	r3, #0
 800a39c:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800a3c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	481a      	ldr	r0, [pc, #104]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a3ce:	f7fa f9cb 	bl	8004768 <HAL_DSI_ConfigCommand>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 800a3d8:	f001 fab6 	bl	800b948 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800a3e0:	2305      	movs	r3, #5
 800a3e2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 800a3e4:	f44f 7320 	mov.w	r3, #640	; 0x280
 800a3e8:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800a3ea:	2310      	movs	r3, #16
 800a3ec:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800a3f2:	2304      	movs	r3, #4
 800a3f4:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800a3fe:	2300      	movs	r3, #0
 800a400:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800a402:	2340      	movs	r3, #64	; 0x40
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800a406:	2300      	movs	r3, #0
 800a408:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800a40a:	463b      	mov	r3, r7
 800a40c:	4619      	mov	r1, r3
 800a40e:	480a      	ldr	r0, [pc, #40]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a410:	f7fa f8d0 	bl	80045b4 <HAL_DSI_ConfigAdaptedCommandMode>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 800a41a:	f001 fa95 	bl	800b948 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800a41e:	2100      	movs	r1, #0
 800a420:	4805      	ldr	r0, [pc, #20]	; (800a438 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a422:	f7f9 fe9f 	bl	8004164 <HAL_DSI_SetGenericVCID>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 800a42c:	f001 fa8c 	bl	800b948 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800a430:	bf00      	nop
 800a432:	37a8      	adds	r7, #168	; 0xa8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000944 	.word	0x20000944
 800a43c:	40016c00 	.word	0x40016c00

0800a440 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b09a      	sub	sp, #104	; 0x68
 800a444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800a446:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a44a:	2234      	movs	r2, #52	; 0x34
 800a44c:	2100      	movs	r1, #0
 800a44e:	4618      	mov	r0, r3
 800a450:	f001 fed3 	bl	800c1fa <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800a454:	463b      	mov	r3, r7
 800a456:	2234      	movs	r2, #52	; 0x34
 800a458:	2100      	movs	r1, #0
 800a45a:	4618      	mov	r0, r3
 800a45c:	f001 fecd 	bl	800c1fa <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800a460:	4b4e      	ldr	r3, [pc, #312]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a462:	4a4f      	ldr	r2, [pc, #316]	; (800a5a0 <MX_LTDC_Init+0x160>)
 800a464:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800a466:	4b4d      	ldr	r3, [pc, #308]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a468:	2200      	movs	r2, #0
 800a46a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800a46c:	4b4b      	ldr	r3, [pc, #300]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a46e:	2200      	movs	r2, #0
 800a470:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800a472:	4b4a      	ldr	r3, [pc, #296]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a474:	2200      	movs	r2, #0
 800a476:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800a478:	4b48      	ldr	r3, [pc, #288]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800a47e:	4b47      	ldr	r3, [pc, #284]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a480:	2207      	movs	r2, #7
 800a482:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800a484:	4b45      	ldr	r3, [pc, #276]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a486:	2203      	movs	r2, #3
 800a488:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800a48a:	4b44      	ldr	r3, [pc, #272]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a48c:	220e      	movs	r2, #14
 800a48e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800a490:	4b42      	ldr	r3, [pc, #264]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a492:	2205      	movs	r2, #5
 800a494:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800a496:	4b41      	ldr	r3, [pc, #260]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a498:	f240 228e 	movw	r2, #654	; 0x28e
 800a49c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800a49e:	4b3f      	ldr	r3, [pc, #252]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a4a0:	f240 12e5 	movw	r2, #485	; 0x1e5
 800a4a4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800a4a6:	4b3d      	ldr	r3, [pc, #244]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a4a8:	f44f 7225 	mov.w	r2, #660	; 0x294
 800a4ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800a4ae:	4b3b      	ldr	r3, [pc, #236]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a4b0:	f240 12e7 	movw	r2, #487	; 0x1e7
 800a4b4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800a4b6:	4b39      	ldr	r3, [pc, #228]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800a4be:	4b37      	ldr	r3, [pc, #220]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800a4c6:	4b35      	ldr	r3, [pc, #212]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800a4ce:	4833      	ldr	r0, [pc, #204]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a4d0:	f7fb fc6a 	bl	8005da8 <HAL_LTDC_Init>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800a4da:	f001 fa35 	bl	800b948 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800a4fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4fe:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800a500:	2305      	movs	r3, #5
 800a502:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800a504:	2300      	movs	r3, #0
 800a506:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800a516:	2300      	movs	r3, #0
 800a518:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800a522:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a526:	2200      	movs	r2, #0
 800a528:	4619      	mov	r1, r3
 800a52a:	481c      	ldr	r0, [pc, #112]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a52c:	f7fb fd0c 	bl	8005f48 <HAL_LTDC_ConfigLayer>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800a536:	f001 fa07 	bl	800b948 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800a542:	2300      	movs	r3, #0
 800a544:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800a54a:	2300      	movs	r3, #0
 800a54c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800a54e:	2300      	movs	r3, #0
 800a550:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800a556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a55a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800a55c:	2305      	movs	r3, #5
 800a55e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800a564:	2300      	movs	r3, #0
 800a566:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800a57e:	463b      	mov	r3, r7
 800a580:	2201      	movs	r2, #1
 800a582:	4619      	mov	r1, r3
 800a584:	4805      	ldr	r0, [pc, #20]	; (800a59c <MX_LTDC_Init+0x15c>)
 800a586:	f7fb fcdf 	bl	8005f48 <HAL_LTDC_ConfigLayer>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800a590:	f001 f9da 	bl	800b948 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800a594:	bf00      	nop
 800a596:	3768      	adds	r7, #104	; 0x68
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	200009e8 	.word	0x200009e8
 800a5a0:	40016800 	.word	0x40016800

0800a5a4 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800a5a8:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <MX_SDMMC2_SD_Init+0x38>)
 800a5aa:	4a0d      	ldr	r2, [pc, #52]	; (800a5e0 <MX_SDMMC2_SD_Init+0x3c>)
 800a5ac:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800a5ae:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <MX_SDMMC2_SD_Init+0x38>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800a5b4:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <MX_SDMMC2_SD_Init+0x38>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a5ba:	4b08      	ldr	r3, [pc, #32]	; (800a5dc <MX_SDMMC2_SD_Init+0x38>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800a5c0:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <MX_SDMMC2_SD_Init+0x38>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a5c6:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <MX_SDMMC2_SD_Init+0x38>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 800a5cc:	4b03      	ldr	r3, [pc, #12]	; (800a5dc <MX_SDMMC2_SD_Init+0x38>)
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800a5d2:	bf00      	nop
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	20000964 	.word	0x20000964
 800a5e0:	40011c00 	.word	0x40011c00

0800a5e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a5ea:	1d3b      	adds	r3, r7, #4
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	605a      	str	r2, [r3, #4]
 800a5f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a5f4:	4b15      	ldr	r3, [pc, #84]	; (800a64c <MX_TIM6_Init+0x68>)
 800a5f6:	4a16      	ldr	r2, [pc, #88]	; (800a650 <MX_TIM6_Init+0x6c>)
 800a5f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 800a5fa:	4b14      	ldr	r3, [pc, #80]	; (800a64c <MX_TIM6_Init+0x68>)
 800a5fc:	f242 720f 	movw	r2, #9999	; 0x270f
 800a600:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a602:	4b12      	ldr	r3, [pc, #72]	; (800a64c <MX_TIM6_Init+0x68>)
 800a604:	2200      	movs	r2, #0
 800a606:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800a608:	4b10      	ldr	r3, [pc, #64]	; (800a64c <MX_TIM6_Init+0x68>)
 800a60a:	f242 720f 	movw	r2, #9999	; 0x270f
 800a60e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a610:	4b0e      	ldr	r3, [pc, #56]	; (800a64c <MX_TIM6_Init+0x68>)
 800a612:	2200      	movs	r2, #0
 800a614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a616:	480d      	ldr	r0, [pc, #52]	; (800a64c <MX_TIM6_Init+0x68>)
 800a618:	f7fe f93e 	bl	8008898 <HAL_TIM_Base_Init>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800a622:	f001 f991 	bl	800b948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a626:	2300      	movs	r3, #0
 800a628:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a62a:	2300      	movs	r3, #0
 800a62c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a62e:	1d3b      	adds	r3, r7, #4
 800a630:	4619      	mov	r1, r3
 800a632:	4806      	ldr	r0, [pc, #24]	; (800a64c <MX_TIM6_Init+0x68>)
 800a634:	f7fe fb6e 	bl	8008d14 <HAL_TIMEx_MasterConfigSynchronization>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800a63e:	f001 f983 	bl	800b948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800a642:	bf00      	nop
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20000adc 	.word	0x20000adc
 800a650:	40001000 	.word	0x40001000

0800a654 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a65a:	1d3b      	adds	r3, r7, #4
 800a65c:	2200      	movs	r2, #0
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	605a      	str	r2, [r3, #4]
 800a662:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800a664:	4b15      	ldr	r3, [pc, #84]	; (800a6bc <MX_TIM7_Init+0x68>)
 800a666:	4a16      	ldr	r2, [pc, #88]	; (800a6c0 <MX_TIM7_Init+0x6c>)
 800a668:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19999;
 800a66a:	4b14      	ldr	r3, [pc, #80]	; (800a6bc <MX_TIM7_Init+0x68>)
 800a66c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800a670:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a672:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <MX_TIM7_Init+0x68>)
 800a674:	2200      	movs	r2, #0
 800a676:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800a678:	4b10      	ldr	r3, [pc, #64]	; (800a6bc <MX_TIM7_Init+0x68>)
 800a67a:	f242 720f 	movw	r2, #9999	; 0x270f
 800a67e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a680:	4b0e      	ldr	r3, [pc, #56]	; (800a6bc <MX_TIM7_Init+0x68>)
 800a682:	2200      	movs	r2, #0
 800a684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a686:	480d      	ldr	r0, [pc, #52]	; (800a6bc <MX_TIM7_Init+0x68>)
 800a688:	f7fe f906 	bl	8008898 <HAL_TIM_Base_Init>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800a692:	f001 f959 	bl	800b948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a696:	2300      	movs	r3, #0
 800a698:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a69a:	2300      	movs	r3, #0
 800a69c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800a69e:	1d3b      	adds	r3, r7, #4
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	4806      	ldr	r0, [pc, #24]	; (800a6bc <MX_TIM7_Init+0x68>)
 800a6a4:	f7fe fb36 	bl	8008d14 <HAL_TIMEx_MasterConfigSynchronization>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800a6ae:	f001 f94b 	bl	800b948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800a6b2:	bf00      	nop
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20000bb4 	.word	0x20000bb4
 800a6c0:	40001400 	.word	0x40001400

0800a6c4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b088      	sub	sp, #32
 800a6c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800a6ca:	1d3b      	adds	r3, r7, #4
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	605a      	str	r2, [r3, #4]
 800a6d2:	609a      	str	r2, [r3, #8]
 800a6d4:	60da      	str	r2, [r3, #12]
 800a6d6:	611a      	str	r2, [r3, #16]
 800a6d8:	615a      	str	r2, [r3, #20]
 800a6da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a6dc:	4b1e      	ldr	r3, [pc, #120]	; (800a758 <MX_FMC_Init+0x94>)
 800a6de:	4a1f      	ldr	r2, [pc, #124]	; (800a75c <MX_FMC_Init+0x98>)
 800a6e0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800a6e2:	4b1d      	ldr	r3, [pc, #116]	; (800a758 <MX_FMC_Init+0x94>)
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a6e8:	4b1b      	ldr	r3, [pc, #108]	; (800a758 <MX_FMC_Init+0x94>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800a6ee:	4b1a      	ldr	r3, [pc, #104]	; (800a758 <MX_FMC_Init+0x94>)
 800a6f0:	2208      	movs	r2, #8
 800a6f2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800a6f4:	4b18      	ldr	r3, [pc, #96]	; (800a758 <MX_FMC_Init+0x94>)
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a6fa:	4b17      	ldr	r3, [pc, #92]	; (800a758 <MX_FMC_Init+0x94>)
 800a6fc:	2240      	movs	r2, #64	; 0x40
 800a6fe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800a700:	4b15      	ldr	r3, [pc, #84]	; (800a758 <MX_FMC_Init+0x94>)
 800a702:	2280      	movs	r2, #128	; 0x80
 800a704:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a706:	4b14      	ldr	r3, [pc, #80]	; (800a758 <MX_FMC_Init+0x94>)
 800a708:	2200      	movs	r2, #0
 800a70a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800a70c:	4b12      	ldr	r3, [pc, #72]	; (800a758 <MX_FMC_Init+0x94>)
 800a70e:	2200      	movs	r2, #0
 800a710:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800a712:	4b11      	ldr	r3, [pc, #68]	; (800a758 <MX_FMC_Init+0x94>)
 800a714:	2200      	movs	r2, #0
 800a716:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a718:	4b0f      	ldr	r3, [pc, #60]	; (800a758 <MX_FMC_Init+0x94>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800a71e:	2310      	movs	r3, #16
 800a720:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800a722:	2310      	movs	r3, #16
 800a724:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800a726:	2310      	movs	r3, #16
 800a728:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800a72a:	2310      	movs	r3, #16
 800a72c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800a72e:	2310      	movs	r3, #16
 800a730:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800a732:	2310      	movs	r3, #16
 800a734:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800a736:	2310      	movs	r3, #16
 800a738:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a73a:	1d3b      	adds	r3, r7, #4
 800a73c:	4619      	mov	r1, r3
 800a73e:	4806      	ldr	r0, [pc, #24]	; (800a758 <MX_FMC_Init+0x94>)
 800a740:	f7fe f82b 	bl	800879a <HAL_SDRAM_Init>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800a74a:	f001 f8fd 	bl	800b948 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800a74e:	bf00      	nop
 800a750:	3720      	adds	r7, #32
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20000b80 	.word	0x20000b80
 800a75c:	a0000140 	.word	0xa0000140

0800a760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b08e      	sub	sp, #56	; 0x38
 800a764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	605a      	str	r2, [r3, #4]
 800a770:	609a      	str	r2, [r3, #8]
 800a772:	60da      	str	r2, [r3, #12]
 800a774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a776:	4b53      	ldr	r3, [pc, #332]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77a:	4a52      	ldr	r2, [pc, #328]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a77c:	f043 0310 	orr.w	r3, r3, #16
 800a780:	6313      	str	r3, [r2, #48]	; 0x30
 800a782:	4b50      	ldr	r3, [pc, #320]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a786:	f003 0310 	and.w	r3, r3, #16
 800a78a:	623b      	str	r3, [r7, #32]
 800a78c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a78e:	4b4d      	ldr	r3, [pc, #308]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a792:	4a4c      	ldr	r2, [pc, #304]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a794:	f043 0302 	orr.w	r3, r3, #2
 800a798:	6313      	str	r3, [r2, #48]	; 0x30
 800a79a:	4b4a      	ldr	r3, [pc, #296]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79e:	f003 0302 	and.w	r3, r3, #2
 800a7a2:	61fb      	str	r3, [r7, #28]
 800a7a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a7a6:	4b47      	ldr	r3, [pc, #284]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7aa:	4a46      	ldr	r2, [pc, #280]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a7ac:	f043 0308 	orr.w	r3, r3, #8
 800a7b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a7b2:	4b44      	ldr	r3, [pc, #272]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	61bb      	str	r3, [r7, #24]
 800a7bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a7be:	4b41      	ldr	r3, [pc, #260]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c2:	4a40      	ldr	r2, [pc, #256]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a7ca:	4b3e      	ldr	r3, [pc, #248]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d2:	617b      	str	r3, [r7, #20]
 800a7d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a7d6:	4b3b      	ldr	r3, [pc, #236]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7da:	4a3a      	ldr	r2, [pc, #232]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a7dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7e0:	6313      	str	r3, [r2, #48]	; 0x30
 800a7e2:	4b38      	ldr	r3, [pc, #224]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ea:	613b      	str	r3, [r7, #16]
 800a7ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a7ee:	4b35      	ldr	r3, [pc, #212]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f2:	4a34      	ldr	r2, [pc, #208]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a7f4:	f043 0320 	orr.w	r3, r3, #32
 800a7f8:	6313      	str	r3, [r2, #48]	; 0x30
 800a7fa:	4b32      	ldr	r3, [pc, #200]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fe:	f003 0320 	and.w	r3, r3, #32
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a806:	4b2f      	ldr	r3, [pc, #188]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80a:	4a2e      	ldr	r2, [pc, #184]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a810:	6313      	str	r3, [r2, #48]	; 0x30
 800a812:	4b2c      	ldr	r3, [pc, #176]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81a:	60bb      	str	r3, [r7, #8]
 800a81c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a81e:	4b29      	ldr	r3, [pc, #164]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a822:	4a28      	ldr	r2, [pc, #160]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a824:	f043 0301 	orr.w	r3, r3, #1
 800a828:	6313      	str	r3, [r2, #48]	; 0x30
 800a82a:	4b26      	ldr	r3, [pc, #152]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82e:	f003 0301 	and.w	r3, r3, #1
 800a832:	607b      	str	r3, [r7, #4]
 800a834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a836:	4b23      	ldr	r3, [pc, #140]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83a:	4a22      	ldr	r2, [pc, #136]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a83c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a840:	6313      	str	r3, [r2, #48]	; 0x30
 800a842:	4b20      	ldr	r3, [pc, #128]	; (800a8c4 <MX_GPIO_Init+0x164>)
 800a844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a84a:	603b      	str	r3, [r7, #0]
 800a84c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a84e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a854:	4b1c      	ldr	r3, [pc, #112]	; (800a8c8 <MX_GPIO_Init+0x168>)
 800a856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a858:	2300      	movs	r3, #0
 800a85a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a85c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a860:	4619      	mov	r1, r3
 800a862:	481a      	ldr	r0, [pc, #104]	; (800a8cc <MX_GPIO_Init+0x16c>)
 800a864:	f7fa fa5c 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a86c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a86e:	2300      	movs	r3, #0
 800a870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a872:	2300      	movs	r3, #0
 800a874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a87a:	4619      	mov	r1, r3
 800a87c:	4813      	ldr	r0, [pc, #76]	; (800a8cc <MX_GPIO_Init+0x16c>)
 800a87e:	f7fa fa4f 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a882:	2301      	movs	r3, #1
 800a884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a886:	4b10      	ldr	r3, [pc, #64]	; (800a8c8 <MX_GPIO_Init+0x168>)
 800a888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a88e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a892:	4619      	mov	r1, r3
 800a894:	480e      	ldr	r0, [pc, #56]	; (800a8d0 <MX_GPIO_Init+0x170>)
 800a896:	f7fa fa43 	bl	8004d20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800a89a:	2200      	movs	r2, #0
 800a89c:	2100      	movs	r1, #0
 800a89e:	2006      	movs	r0, #6
 800a8a0:	f7f8 fd33 	bl	800330a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a8a4:	2006      	movs	r0, #6
 800a8a6:	f7f8 fd4c 	bl	8003342 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	2028      	movs	r0, #40	; 0x28
 800a8b0:	f7f8 fd2b 	bl	800330a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a8b4:	2028      	movs	r0, #40	; 0x28
 800a8b6:	f7f8 fd44 	bl	8003342 <HAL_NVIC_EnableIRQ>

}
 800a8ba:	bf00      	nop
 800a8bc:	3738      	adds	r7, #56	; 0x38
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	40023800 	.word	0x40023800
 800a8c8:	10110000 	.word	0x10110000
 800a8cc:	40022000 	.word	0x40022000
 800a8d0:	40020000 	.word	0x40020000

0800a8d4 <LCD_Config1>:

/* USER CODE BEGIN 4 */
static void LCD_Config1(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
	uint32_t  lcd_status = LCD_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	607b      	str	r3, [r7, #4]

	/* Initialize the LCD */
	lcd_status = BSP_LCD_Init();
 800a8de:	f7f6 fc26 	bl	800112e <BSP_LCD_Init>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	607b      	str	r3, [r7, #4]
	while(lcd_status != LCD_OK);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1fc      	bne.n	800a8e6 <LCD_Config1+0x12>

	BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER_BACKGROUND, LCD_FB_START_ADDRESS);
 800a8ec:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	f7f6 fdb9 	bl	8001468 <BSP_LCD_LayerDefaultInit>

}
 800a8f6:	bf00      	nop
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
	...

0800a900 <LCD_Config2>:
static void LCD_Config2(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	af00      	add	r7, sp, #0

	//BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER_BACKGROUND);

	/* Clear the LCD */
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a904:	f04f 30ff 	mov.w	r0, #4294967295
 800a908:	f7f6 ff00 	bl	800170c <BSP_LCD_Clear>

	/* Set LCD Example description */
	HAL_Delay(50);
 800a90c:	2032      	movs	r0, #50	; 0x32
 800a90e:	f7f8 f83b 	bl	8002988 <HAL_Delay>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800a912:	481c      	ldr	r0, [pc, #112]	; (800a984 <LCD_Config2+0x84>)
 800a914:	f7f6 fe08 	bl	8001528 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font12);
 800a918:	481b      	ldr	r0, [pc, #108]	; (800a988 <LCD_Config2+0x88>)
 800a91a:	f7f6 fe37 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800a91e:	481b      	ldr	r0, [pc, #108]	; (800a98c <LCD_Config2+0x8c>)
 800a920:	f7f6 fe02 	bl	8001528 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 40);
 800a924:	f7f6 fd88 	bl	8001438 <BSP_LCD_GetXSize>
 800a928:	4603      	mov	r3, r0
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	2328      	movs	r3, #40	; 0x28
 800a92e:	2100      	movs	r1, #0
 800a930:	2000      	movs	r0, #0
 800a932:	f7f7 f98b 	bl	8001c4c <BSP_LCD_FillRect>
	HAL_Delay(50);
 800a936:	2032      	movs	r0, #50	; 0x32
 800a938:	f7f8 f826 	bl	8002988 <HAL_Delay>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a93c:	f04f 30ff 	mov.w	r0, #4294967295
 800a940:	f7f6 fdf2 	bl	8001528 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800a944:	4811      	ldr	r0, [pc, #68]	; (800a98c <LCD_Config2+0x8c>)
 800a946:	f7f6 fe07 	bl	8001558 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 800a94a:	4811      	ldr	r0, [pc, #68]	; (800a990 <LCD_Config2+0x90>)
 800a94c:	f7f6 fe1e 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"REVERSI by Pedro Leal", CENTER_MODE);
 800a950:	2301      	movs	r3, #1
 800a952:	4a10      	ldr	r2, [pc, #64]	; (800a994 <LCD_Config2+0x94>)
 800a954:	210a      	movs	r1, #10
 800a956:	2000      	movs	r0, #0
 800a958:	f7f6 ff44 	bl	80017e4 <BSP_LCD_DisplayStringAt>
	HAL_Delay(50);
 800a95c:	2032      	movs	r0, #50	; 0x32
 800a95e:	f7f8 f813 	bl	8002988 <HAL_Delay>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a962:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a966:	f7f6 fddf 	bl	8001528 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a96a:	f04f 30ff 	mov.w	r0, #4294967295
 800a96e:	f7f6 fdf3 	bl	8001558 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 800a972:	4807      	ldr	r0, [pc, #28]	; (800a990 <LCD_Config2+0x90>)
 800a974:	f7f6 fe0a 	bl	800158c <BSP_LCD_SetFont>
	HAL_Delay(50);
 800a978:	2032      	movs	r0, #50	; 0x32
 800a97a:	f7f8 f805 	bl	8002988 <HAL_Delay>
	//BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER_FOREGROUND);
}
 800a97e:	bf00      	nop
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	ff000080 	.word	0xff000080
 800a988:	20000048 	.word	0x20000048
 800a98c:	ff0000ff 	.word	0xff0000ff
 800a990:	20000038 	.word	0x20000038
 800a994:	0800ca1c 	.word	0x0800ca1c

0800a998 <displayTemp>:

void displayTemp(){
 800a998:	b580      	push	{r7, lr}
 800a99a:	b09c      	sub	sp, #112	; 0x70
 800a99c:	af00      	add	r7, sp, #0

	uint32_t ConvertedValue;
	long int JTemp;
	char desc[100];

	flagTemp=0;
 800a99e:	4b26      	ldr	r3, [pc, #152]	; (800aa38 <displayTemp+0xa0>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef status=HAL_ADC_PollForConversion(&hadc1,TEMP_REFRESH_PERIOD); //se o valor aqui obtido estiver ok -> HAL_OK
 800a9a4:	21fb      	movs	r1, #251	; 0xfb
 800a9a6:	4825      	ldr	r0, [pc, #148]	; (800aa3c <displayTemp+0xa4>)
 800a9a8:	f7f8 f914 	bl	8002bd4 <HAL_ADC_PollForConversion>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(status==HAL_OK)//so corre quando o valor foi bem recebido e nao por excesso de tempo
 800a9b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d139      	bne.n	800aa2e <displayTemp+0x96>
	{
		ConvertedValue=HAL_ADC_GetValue(&hadc1); //get value
 800a9ba:	4820      	ldr	r0, [pc, #128]	; (800aa3c <displayTemp+0xa4>)
 800a9bc:	f7f8 f98e 	bl	8002cdc <HAL_ADC_GetValue>
 800a9c0:	66b8      	str	r0, [r7, #104]	; 0x68
		JTemp = ((((ConvertedValue * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 800a9c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9c4:	f640 42e4 	movw	r2, #3300	; 0xce4
 800a9c8:	fb02 f203 	mul.w	r2, r2, r3
 800a9cc:	4b1c      	ldr	r3, [pc, #112]	; (800aa40 <displayTemp+0xa8>)
 800a9ce:	fba3 1302 	umull	r1, r3, r3, r2
 800a9d2:	1ad2      	subs	r2, r2, r3
 800a9d4:	0852      	lsrs	r2, r2, #1
 800a9d6:	4413      	add	r3, r2
 800a9d8:	0ada      	lsrs	r2, r3, #11
 800a9da:	4613      	mov	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	005b      	lsls	r3, r3, #1
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	4b17      	ldr	r3, [pc, #92]	; (800aa44 <displayTemp+0xac>)
 800a9e6:	4413      	add	r3, r2
 800a9e8:	4a17      	ldr	r2, [pc, #92]	; (800aa48 <displayTemp+0xb0>)
 800a9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ee:	08db      	lsrs	r3, r3, #3
 800a9f0:	3319      	adds	r3, #25
 800a9f2:	667b      	str	r3, [r7, #100]	; 0x64
		/* Display the Temperature Value on the LCD */
		sprintf(desc, "Temp: %ldC", JTemp);
 800a9f4:	463b      	mov	r3, r7
 800a9f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a9f8:	4914      	ldr	r1, [pc, #80]	; (800aa4c <displayTemp+0xb4>)
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f001 fc06 	bl	800c20c <siprintf>
		//BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER_BACKGROUND);
		BSP_LCD_SetFont(&Font20);
 800aa00:	4813      	ldr	r0, [pc, #76]	; (800aa50 <displayTemp+0xb8>)
 800aa02:	f7f6 fdc3 	bl	800158c <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800aa06:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0a:	f7f6 fda5 	bl	8001558 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800aa0e:	4811      	ldr	r0, [pc, #68]	; (800aa54 <displayTemp+0xbc>)
 800aa10:	f7f6 fd8a 	bl	8001528 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)desc, RIGHT_MODE);
 800aa14:	463a      	mov	r2, r7
 800aa16:	2302      	movs	r3, #2
 800aa18:	210a      	movs	r1, #10
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	f7f6 fee2 	bl	80017e4 <BSP_LCD_DisplayStringAt>
		HAL_Delay(50);
 800aa20:	2032      	movs	r0, #50	; 0x32
 800aa22:	f7f7 ffb1 	bl	8002988 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800aa26:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800aa2a:	f7f6 fd7d 	bl	8001528 <BSP_LCD_SetTextColor>
	}
}
 800aa2e:	bf00      	nop
 800aa30:	3770      	adds	r7, #112	; 0x70
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	20000321 	.word	0x20000321
 800aa3c:	20000a90 	.word	0x20000a90
 800aa40:	00100101 	.word	0x00100101
 800aa44:	ffffe250 	.word	0xffffe250
 800aa48:	51eb851f 	.word	0x51eb851f
 800aa4c:	0800ca34 	.word	0x0800ca34
 800aa50:	20000040 	.word	0x20000040
 800aa54:	ff0000ff 	.word	0xff0000ff

0800aa58 <printMenu>:

void printMenu(){
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0

	LCD_Config2();
 800aa5e:	f7ff ff4f 	bl	800a900 <LCD_Config2>

	if(flagTemp)
 800aa62:	4b71      	ldr	r3, [pc, #452]	; (800ac28 <printMenu+0x1d0>)
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <printMenu+0x16>
		displayTemp();
 800aa6a:	f7ff ff95 	bl	800a998 <displayTemp>

	flagMenu=0;
 800aa6e:	4b6f      	ldr	r3, [pc, #444]	; (800ac2c <printMenu+0x1d4>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	701a      	strb	r2, [r3, #0]

	char string[20];

	BSP_LCD_DrawVLine(250, 50, 375);
 800aa74:	f240 1277 	movw	r2, #375	; 0x177
 800aa78:	2132      	movs	r1, #50	; 0x32
 800aa7a:	20fa      	movs	r0, #250	; 0xfa
 800aa7c:	f7f6 ffb4 	bl	80019e8 <BSP_LCD_DrawVLine>
	BSP_LCD_DrawHLine(250, 50, 300);
 800aa80:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa84:	2132      	movs	r1, #50	; 0x32
 800aa86:	20fa      	movs	r0, #250	; 0xfa
 800aa88:	f7f6 ff70 	bl	800196c <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(250, 85, 300);
 800aa8c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa90:	2155      	movs	r1, #85	; 0x55
 800aa92:	20fa      	movs	r0, #250	; 0xfa
 800aa94:	f7f6 ff6a 	bl	800196c <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(250, 425, 300);
 800aa98:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa9c:	f240 11a9 	movw	r1, #425	; 0x1a9
 800aaa0:	20fa      	movs	r0, #250	; 0xfa
 800aaa2:	f7f6 ff63 	bl	800196c <BSP_LCD_DrawHLine>
	BSP_LCD_DrawVLine(550, 50, 375);
 800aaa6:	f240 1277 	movw	r2, #375	; 0x177
 800aaaa:	2132      	movs	r1, #50	; 0x32
 800aaac:	f240 2026 	movw	r0, #550	; 0x226
 800aab0:	f7f6 ff9a 	bl	80019e8 <BSP_LCD_DrawVLine>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800aab4:	485e      	ldr	r0, [pc, #376]	; (800ac30 <printMenu+0x1d8>)
 800aab6:	f7f6 fd37 	bl	8001528 <BSP_LCD_SetTextColor>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800aaba:	485d      	ldr	r0, [pc, #372]	; (800ac30 <printMenu+0x1d8>)
 800aabc:	f7f6 fd34 	bl	8001528 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(250, 50, 300 , 35);
 800aac0:	2323      	movs	r3, #35	; 0x23
 800aac2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aac6:	2132      	movs	r1, #50	; 0x32
 800aac8:	20fa      	movs	r0, #250	; 0xfa
 800aaca:	f7f7 f8bf 	bl	8001c4c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800aace:	f04f 30ff 	mov.w	r0, #4294967295
 800aad2:	f7f6 fd29 	bl	8001528 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 800aad6:	4856      	ldr	r0, [pc, #344]	; (800ac30 <printMenu+0x1d8>)
 800aad8:	f7f6 fd3e 	bl	8001558 <BSP_LCD_SetBackColor>
	sprintf(string, "Menu");
 800aadc:	1d3b      	adds	r3, r7, #4
 800aade:	4a55      	ldr	r2, [pc, #340]	; (800ac34 <printMenu+0x1dc>)
 800aae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aae4:	6018      	str	r0, [r3, #0]
 800aae6:	3304      	adds	r3, #4
 800aae8:	7019      	strb	r1, [r3, #0]
	BSP_LCD_SetFont(&Font24);
 800aaea:	4853      	ldr	r0, [pc, #332]	; (800ac38 <printMenu+0x1e0>)
 800aaec:	f7f6 fd4e 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(10,60 , (uint8_t *)string, CENTER_MODE);
 800aaf0:	1d3a      	adds	r2, r7, #4
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	213c      	movs	r1, #60	; 0x3c
 800aaf6:	200a      	movs	r0, #10
 800aaf8:	f7f6 fe74 	bl	80017e4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800aafc:	484c      	ldr	r0, [pc, #304]	; (800ac30 <printMenu+0x1d8>)
 800aafe:	f7f6 fd13 	bl	8001528 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800ab02:	f04f 30ff 	mov.w	r0, #4294967295
 800ab06:	f7f6 fd27 	bl	8001558 <BSP_LCD_SetBackColor>
	sprintf(string, "1 vs 1");
 800ab0a:	1d3b      	adds	r3, r7, #4
 800ab0c:	4a4b      	ldr	r2, [pc, #300]	; (800ac3c <printMenu+0x1e4>)
 800ab0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab12:	6018      	str	r0, [r3, #0]
 800ab14:	3304      	adds	r3, #4
 800ab16:	8019      	strh	r1, [r3, #0]
 800ab18:	3302      	adds	r3, #2
 800ab1a:	0c0a      	lsrs	r2, r1, #16
 800ab1c:	701a      	strb	r2, [r3, #0]
	BSP_LCD_SetFont(&Font20);
 800ab1e:	4848      	ldr	r0, [pc, #288]	; (800ac40 <printMenu+0x1e8>)
 800ab20:	f7f6 fd34 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(10,110 , (uint8_t *)string, CENTER_MODE);
 800ab24:	1d3a      	adds	r2, r7, #4
 800ab26:	2301      	movs	r3, #1
 800ab28:	216e      	movs	r1, #110	; 0x6e
 800ab2a:	200a      	movs	r0, #10
 800ab2c:	f7f6 fe5a 	bl	80017e4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_FillCircle(285, 120, 10);
 800ab30:	220a      	movs	r2, #10
 800ab32:	2178      	movs	r1, #120	; 0x78
 800ab34:	f240 101d 	movw	r0, #285	; 0x11d
 800ab38:	f7f7 f8e2 	bl	8001d00 <BSP_LCD_FillCircle>
	sprintf(string, "1 vs PC");
 800ab3c:	1d3b      	adds	r3, r7, #4
 800ab3e:	4a41      	ldr	r2, [pc, #260]	; (800ac44 <printMenu+0x1ec>)
 800ab40:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab44:	e883 0003 	stmia.w	r3, {r0, r1}
	BSP_LCD_SetFont(&Font20);
 800ab48:	483d      	ldr	r0, [pc, #244]	; (800ac40 <printMenu+0x1e8>)
 800ab4a:	f7f6 fd1f 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(10,160 , (uint8_t *)string, CENTER_MODE);
 800ab4e:	1d3a      	adds	r2, r7, #4
 800ab50:	2301      	movs	r3, #1
 800ab52:	21a0      	movs	r1, #160	; 0xa0
 800ab54:	200a      	movs	r0, #10
 800ab56:	f7f6 fe45 	bl	80017e4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_FillCircle(285, 170, 10);
 800ab5a:	220a      	movs	r2, #10
 800ab5c:	21aa      	movs	r1, #170	; 0xaa
 800ab5e:	f240 101d 	movw	r0, #285	; 0x11d
 800ab62:	f7f7 f8cd 	bl	8001d00 <BSP_LCD_FillCircle>
	sprintf(string, "Last Score");
 800ab66:	1d3b      	adds	r3, r7, #4
 800ab68:	4a37      	ldr	r2, [pc, #220]	; (800ac48 <printMenu+0x1f0>)
 800ab6a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ab6c:	c303      	stmia	r3!, {r0, r1}
 800ab6e:	801a      	strh	r2, [r3, #0]
 800ab70:	3302      	adds	r3, #2
 800ab72:	0c12      	lsrs	r2, r2, #16
 800ab74:	701a      	strb	r2, [r3, #0]
	BSP_LCD_SetFont(&Font20);
 800ab76:	4832      	ldr	r0, [pc, #200]	; (800ac40 <printMenu+0x1e8>)
 800ab78:	f7f6 fd08 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(10,210 , (uint8_t *)string, CENTER_MODE);
 800ab7c:	1d3a      	adds	r2, r7, #4
 800ab7e:	2301      	movs	r3, #1
 800ab80:	21d2      	movs	r1, #210	; 0xd2
 800ab82:	200a      	movs	r0, #10
 800ab84:	f7f6 fe2e 	bl	80017e4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_FillCircle(285, 220, 10);
 800ab88:	220a      	movs	r2, #10
 800ab8a:	21dc      	movs	r1, #220	; 0xdc
 800ab8c:	f240 101d 	movw	r0, #285	; 0x11d
 800ab90:	f7f7 f8b6 	bl	8001d00 <BSP_LCD_FillCircle>
	sprintf(string, "Hi Score");
 800ab94:	1d3b      	adds	r3, r7, #4
 800ab96:	4a2d      	ldr	r2, [pc, #180]	; (800ac4c <printMenu+0x1f4>)
 800ab98:	ca07      	ldmia	r2, {r0, r1, r2}
 800ab9a:	c303      	stmia	r3!, {r0, r1}
 800ab9c:	701a      	strb	r2, [r3, #0]
	BSP_LCD_SetFont(&Font20);
 800ab9e:	4828      	ldr	r0, [pc, #160]	; (800ac40 <printMenu+0x1e8>)
 800aba0:	f7f6 fcf4 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(10,260 , (uint8_t *)string, CENTER_MODE);
 800aba4:	1d3a      	adds	r2, r7, #4
 800aba6:	2301      	movs	r3, #1
 800aba8:	f44f 7182 	mov.w	r1, #260	; 0x104
 800abac:	200a      	movs	r0, #10
 800abae:	f7f6 fe19 	bl	80017e4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_FillCircle(285, 270, 10);
 800abb2:	220a      	movs	r2, #10
 800abb4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800abb8:	f240 101d 	movw	r0, #285	; 0x11d
 800abbc:	f7f7 f8a0 	bl	8001d00 <BSP_LCD_FillCircle>
	sprintf(string, "Color");
 800abc0:	1d3b      	adds	r3, r7, #4
 800abc2:	4a23      	ldr	r2, [pc, #140]	; (800ac50 <printMenu+0x1f8>)
 800abc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800abc8:	6018      	str	r0, [r3, #0]
 800abca:	3304      	adds	r3, #4
 800abcc:	8019      	strh	r1, [r3, #0]
	BSP_LCD_SetFont(&Font20);
 800abce:	481c      	ldr	r0, [pc, #112]	; (800ac40 <printMenu+0x1e8>)
 800abd0:	f7f6 fcdc 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(10,310 , (uint8_t *)string, CENTER_MODE);
 800abd4:	1d3a      	adds	r2, r7, #4
 800abd6:	2301      	movs	r3, #1
 800abd8:	f44f 719b 	mov.w	r1, #310	; 0x136
 800abdc:	200a      	movs	r0, #10
 800abde:	f7f6 fe01 	bl	80017e4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_FillCircle(285, 320, 10);
 800abe2:	220a      	movs	r2, #10
 800abe4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800abe8:	f240 101d 	movw	r0, #285	; 0x11d
 800abec:	f7f7 f888 	bl	8001d00 <BSP_LCD_FillCircle>
	sprintf(string, "Rules");
 800abf0:	1d3b      	adds	r3, r7, #4
 800abf2:	4a18      	ldr	r2, [pc, #96]	; (800ac54 <printMenu+0x1fc>)
 800abf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800abf8:	6018      	str	r0, [r3, #0]
 800abfa:	3304      	adds	r3, #4
 800abfc:	8019      	strh	r1, [r3, #0]
	BSP_LCD_SetFont(&Font20);
 800abfe:	4810      	ldr	r0, [pc, #64]	; (800ac40 <printMenu+0x1e8>)
 800ac00:	f7f6 fcc4 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(10,360 , (uint8_t *)string, CENTER_MODE);
 800ac04:	1d3a      	adds	r2, r7, #4
 800ac06:	2301      	movs	r3, #1
 800ac08:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800ac0c:	200a      	movs	r0, #10
 800ac0e:	f7f6 fde9 	bl	80017e4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_FillCircle(285, 370, 10);
 800ac12:	220a      	movs	r2, #10
 800ac14:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800ac18:	f240 101d 	movw	r0, #285	; 0x11d
 800ac1c:	f7f7 f870 	bl	8001d00 <BSP_LCD_FillCircle>
}
 800ac20:	bf00      	nop
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	20000321 	.word	0x20000321
 800ac2c:	20000323 	.word	0x20000323
 800ac30:	ff000080 	.word	0xff000080
 800ac34:	0800ca40 	.word	0x0800ca40
 800ac38:	20000038 	.word	0x20000038
 800ac3c:	0800ca48 	.word	0x0800ca48
 800ac40:	20000040 	.word	0x20000040
 800ac44:	0800ca50 	.word	0x0800ca50
 800ac48:	0800ca58 	.word	0x0800ca58
 800ac4c:	0800ca64 	.word	0x0800ca64
 800ac50:	0800ca70 	.word	0x0800ca70
 800ac54:	0800ca78 	.word	0x0800ca78

0800ac58 <touchMenu>:


void touchMenu(){
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	af00      	add	r7, sp, #0

	if(TS_State.touchX[0]>=250 && TS_State.touchX[0]<=550 && TS_State.touchY[0]>=110 && TS_State.touchY[0]<=150)
 800ac5c:	4b4d      	ldr	r3, [pc, #308]	; (800ad94 <touchMenu+0x13c>)
 800ac5e:	885b      	ldrh	r3, [r3, #2]
 800ac60:	2bf9      	cmp	r3, #249	; 0xf9
 800ac62:	d913      	bls.n	800ac8c <touchMenu+0x34>
 800ac64:	4b4b      	ldr	r3, [pc, #300]	; (800ad94 <touchMenu+0x13c>)
 800ac66:	885b      	ldrh	r3, [r3, #2]
 800ac68:	f240 2226 	movw	r2, #550	; 0x226
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d80d      	bhi.n	800ac8c <touchMenu+0x34>
 800ac70:	4b48      	ldr	r3, [pc, #288]	; (800ad94 <touchMenu+0x13c>)
 800ac72:	88db      	ldrh	r3, [r3, #6]
 800ac74:	2b6d      	cmp	r3, #109	; 0x6d
 800ac76:	d909      	bls.n	800ac8c <touchMenu+0x34>
 800ac78:	4b46      	ldr	r3, [pc, #280]	; (800ad94 <touchMenu+0x13c>)
 800ac7a:	88db      	ldrh	r3, [r3, #6]
 800ac7c:	2b96      	cmp	r3, #150	; 0x96
 800ac7e:	d805      	bhi.n	800ac8c <touchMenu+0x34>
	{
		state = SINGLE;
 800ac80:	4b45      	ldr	r3, [pc, #276]	; (800ad98 <touchMenu+0x140>)
 800ac82:	2201      	movs	r2, #1
 800ac84:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 800ac86:	2032      	movs	r0, #50	; 0x32
 800ac88:	f7f7 fe7e 	bl	8002988 <HAL_Delay>
	}
	if(TS_State.touchX[0]>=250 && TS_State.touchX[0]<=550 && TS_State.touchY[0]>=160 && TS_State.touchY[0]<=200)
 800ac8c:	4b41      	ldr	r3, [pc, #260]	; (800ad94 <touchMenu+0x13c>)
 800ac8e:	885b      	ldrh	r3, [r3, #2]
 800ac90:	2bf9      	cmp	r3, #249	; 0xf9
 800ac92:	d913      	bls.n	800acbc <touchMenu+0x64>
 800ac94:	4b3f      	ldr	r3, [pc, #252]	; (800ad94 <touchMenu+0x13c>)
 800ac96:	885b      	ldrh	r3, [r3, #2]
 800ac98:	f240 2226 	movw	r2, #550	; 0x226
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d80d      	bhi.n	800acbc <touchMenu+0x64>
 800aca0:	4b3c      	ldr	r3, [pc, #240]	; (800ad94 <touchMenu+0x13c>)
 800aca2:	88db      	ldrh	r3, [r3, #6]
 800aca4:	2b9f      	cmp	r3, #159	; 0x9f
 800aca6:	d909      	bls.n	800acbc <touchMenu+0x64>
 800aca8:	4b3a      	ldr	r3, [pc, #232]	; (800ad94 <touchMenu+0x13c>)
 800acaa:	88db      	ldrh	r3, [r3, #6]
 800acac:	2bc8      	cmp	r3, #200	; 0xc8
 800acae:	d805      	bhi.n	800acbc <touchMenu+0x64>
	{
		state = MULTI;
 800acb0:	4b39      	ldr	r3, [pc, #228]	; (800ad98 <touchMenu+0x140>)
 800acb2:	2202      	movs	r2, #2
 800acb4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 800acb6:	2032      	movs	r0, #50	; 0x32
 800acb8:	f7f7 fe66 	bl	8002988 <HAL_Delay>
	}
	if(TS_State.touchX[0]>=250 && TS_State.touchX[0]<=550 && TS_State.touchY[0]>=210 && TS_State.touchY[0]<=250)
 800acbc:	4b35      	ldr	r3, [pc, #212]	; (800ad94 <touchMenu+0x13c>)
 800acbe:	885b      	ldrh	r3, [r3, #2]
 800acc0:	2bf9      	cmp	r3, #249	; 0xf9
 800acc2:	d913      	bls.n	800acec <touchMenu+0x94>
 800acc4:	4b33      	ldr	r3, [pc, #204]	; (800ad94 <touchMenu+0x13c>)
 800acc6:	885b      	ldrh	r3, [r3, #2]
 800acc8:	f240 2226 	movw	r2, #550	; 0x226
 800accc:	4293      	cmp	r3, r2
 800acce:	d80d      	bhi.n	800acec <touchMenu+0x94>
 800acd0:	4b30      	ldr	r3, [pc, #192]	; (800ad94 <touchMenu+0x13c>)
 800acd2:	88db      	ldrh	r3, [r3, #6]
 800acd4:	2bd1      	cmp	r3, #209	; 0xd1
 800acd6:	d909      	bls.n	800acec <touchMenu+0x94>
 800acd8:	4b2e      	ldr	r3, [pc, #184]	; (800ad94 <touchMenu+0x13c>)
 800acda:	88db      	ldrh	r3, [r3, #6]
 800acdc:	2bfa      	cmp	r3, #250	; 0xfa
 800acde:	d805      	bhi.n	800acec <touchMenu+0x94>
	{
		state = LASTSCORE;
 800ace0:	4b2d      	ldr	r3, [pc, #180]	; (800ad98 <touchMenu+0x140>)
 800ace2:	2203      	movs	r2, #3
 800ace4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 800ace6:	2032      	movs	r0, #50	; 0x32
 800ace8:	f7f7 fe4e 	bl	8002988 <HAL_Delay>
	}
	if(TS_State.touchX[0]>=250 && TS_State.touchX[0]<=550 && TS_State.touchY[0]>=260 && TS_State.touchY[0]<=300)
 800acec:	4b29      	ldr	r3, [pc, #164]	; (800ad94 <touchMenu+0x13c>)
 800acee:	885b      	ldrh	r3, [r3, #2]
 800acf0:	2bf9      	cmp	r3, #249	; 0xf9
 800acf2:	d915      	bls.n	800ad20 <touchMenu+0xc8>
 800acf4:	4b27      	ldr	r3, [pc, #156]	; (800ad94 <touchMenu+0x13c>)
 800acf6:	885b      	ldrh	r3, [r3, #2]
 800acf8:	f240 2226 	movw	r2, #550	; 0x226
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d80f      	bhi.n	800ad20 <touchMenu+0xc8>
 800ad00:	4b24      	ldr	r3, [pc, #144]	; (800ad94 <touchMenu+0x13c>)
 800ad02:	88db      	ldrh	r3, [r3, #6]
 800ad04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad08:	d30a      	bcc.n	800ad20 <touchMenu+0xc8>
 800ad0a:	4b22      	ldr	r3, [pc, #136]	; (800ad94 <touchMenu+0x13c>)
 800ad0c:	88db      	ldrh	r3, [r3, #6]
 800ad0e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ad12:	d805      	bhi.n	800ad20 <touchMenu+0xc8>
	{
		state = SCORE;
 800ad14:	4b20      	ldr	r3, [pc, #128]	; (800ad98 <touchMenu+0x140>)
 800ad16:	2204      	movs	r2, #4
 800ad18:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 800ad1a:	2032      	movs	r0, #50	; 0x32
 800ad1c:	f7f7 fe34 	bl	8002988 <HAL_Delay>
	}
	if(TS_State.touchX[0]>=250 && TS_State.touchX[0]<=550 && TS_State.touchY[0]>=310 && TS_State.touchY[0]<=350)
 800ad20:	4b1c      	ldr	r3, [pc, #112]	; (800ad94 <touchMenu+0x13c>)
 800ad22:	885b      	ldrh	r3, [r3, #2]
 800ad24:	2bf9      	cmp	r3, #249	; 0xf9
 800ad26:	d915      	bls.n	800ad54 <touchMenu+0xfc>
 800ad28:	4b1a      	ldr	r3, [pc, #104]	; (800ad94 <touchMenu+0x13c>)
 800ad2a:	885b      	ldrh	r3, [r3, #2]
 800ad2c:	f240 2226 	movw	r2, #550	; 0x226
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d80f      	bhi.n	800ad54 <touchMenu+0xfc>
 800ad34:	4b17      	ldr	r3, [pc, #92]	; (800ad94 <touchMenu+0x13c>)
 800ad36:	88db      	ldrh	r3, [r3, #6]
 800ad38:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800ad3c:	d30a      	bcc.n	800ad54 <touchMenu+0xfc>
 800ad3e:	4b15      	ldr	r3, [pc, #84]	; (800ad94 <touchMenu+0x13c>)
 800ad40:	88db      	ldrh	r3, [r3, #6]
 800ad42:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800ad46:	d805      	bhi.n	800ad54 <touchMenu+0xfc>
	{
		state = COLOR;
 800ad48:	4b13      	ldr	r3, [pc, #76]	; (800ad98 <touchMenu+0x140>)
 800ad4a:	2205      	movs	r2, #5
 800ad4c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 800ad4e:	2032      	movs	r0, #50	; 0x32
 800ad50:	f7f7 fe1a 	bl	8002988 <HAL_Delay>
	}
	if(TS_State.touchX[0]>=250 && TS_State.touchX[0]<=550 && TS_State.touchY[0]>=360 && TS_State.touchY[0]<=400)
 800ad54:	4b0f      	ldr	r3, [pc, #60]	; (800ad94 <touchMenu+0x13c>)
 800ad56:	885b      	ldrh	r3, [r3, #2]
 800ad58:	2bf9      	cmp	r3, #249	; 0xf9
 800ad5a:	d915      	bls.n	800ad88 <touchMenu+0x130>
 800ad5c:	4b0d      	ldr	r3, [pc, #52]	; (800ad94 <touchMenu+0x13c>)
 800ad5e:	885b      	ldrh	r3, [r3, #2]
 800ad60:	f240 2226 	movw	r2, #550	; 0x226
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d80f      	bhi.n	800ad88 <touchMenu+0x130>
 800ad68:	4b0a      	ldr	r3, [pc, #40]	; (800ad94 <touchMenu+0x13c>)
 800ad6a:	88db      	ldrh	r3, [r3, #6]
 800ad6c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800ad70:	d30a      	bcc.n	800ad88 <touchMenu+0x130>
 800ad72:	4b08      	ldr	r3, [pc, #32]	; (800ad94 <touchMenu+0x13c>)
 800ad74:	88db      	ldrh	r3, [r3, #6]
 800ad76:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800ad7a:	d805      	bhi.n	800ad88 <touchMenu+0x130>
	{
		state = RULES;
 800ad7c:	4b06      	ldr	r3, [pc, #24]	; (800ad98 <touchMenu+0x140>)
 800ad7e:	2206      	movs	r2, #6
 800ad80:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 800ad82:	2032      	movs	r0, #50	; 0x32
 800ad84:	f7f7 fe00 	bl	8002988 <HAL_Delay>
	}

	flagTS=0;
 800ad88:	4b04      	ldr	r3, [pc, #16]	; (800ad9c <touchMenu+0x144>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	701a      	strb	r2, [r3, #0]
}
 800ad8e:	bf00      	nop
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	20000b74 	.word	0x20000b74
 800ad98:	20000960 	.word	0x20000960
 800ad9c:	20000322 	.word	0x20000322

0800ada0 <printBoard>:

void printBoard(){
 800ada0:	b590      	push	{r4, r7, lr}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0

	//LCD_Config2();

	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800ada6:	4832      	ldr	r0, [pc, #200]	; (800ae70 <printBoard+0xd0>)
 800ada8:	f7f6 fbbe 	bl	8001528 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(50, 50, 50*8, 50*8);
 800adac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800adb0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800adb4:	2132      	movs	r1, #50	; 0x32
 800adb6:	2032      	movs	r0, #50	; 0x32
 800adb8:	f7f6 ff48 	bl	8001c4c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800adbc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800adc0:	f7f6 fbb2 	bl	8001528 <BSP_LCD_SetTextColor>
	for(int i = 0; i<=9; i++){
 800adc4:	2300      	movs	r3, #0
 800adc6:	607b      	str	r3, [r7, #4]
 800adc8:	e01a      	b.n	800ae00 <printBoard+0x60>
		BSP_LCD_DrawVLine((BSP_LCD_GetXSize()/16)*i, BSP_LCD_GetYSize()/10, 400);
 800adca:	f7f6 fb35 	bl	8001438 <BSP_LCD_GetXSize>
 800adce:	4603      	mov	r3, r0
 800add0:	091b      	lsrs	r3, r3, #4
 800add2:	b29a      	uxth	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	b29b      	uxth	r3, r3
 800add8:	fb12 f303 	smulbb	r3, r2, r3
 800addc:	b29c      	uxth	r4, r3
 800adde:	f7f6 fb37 	bl	8001450 <BSP_LCD_GetYSize>
 800ade2:	4602      	mov	r2, r0
 800ade4:	4b23      	ldr	r3, [pc, #140]	; (800ae74 <printBoard+0xd4>)
 800ade6:	fba3 2302 	umull	r2, r3, r3, r2
 800adea:	08db      	lsrs	r3, r3, #3
 800adec:	b29b      	uxth	r3, r3
 800adee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800adf2:	4619      	mov	r1, r3
 800adf4:	4620      	mov	r0, r4
 800adf6:	f7f6 fdf7 	bl	80019e8 <BSP_LCD_DrawVLine>
	for(int i = 0; i<=9; i++){
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	3301      	adds	r3, #1
 800adfe:	607b      	str	r3, [r7, #4]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b09      	cmp	r3, #9
 800ae04:	dde1      	ble.n	800adca <printBoard+0x2a>
	}
	for(int j = 0; j<=9; j++){
 800ae06:	2300      	movs	r3, #0
 800ae08:	603b      	str	r3, [r7, #0]
 800ae0a:	e023      	b.n	800ae54 <printBoard+0xb4>
		BSP_LCD_DrawHLine(BSP_LCD_GetXSize()/16, (BSP_LCD_GetYSize()/9.6)*j, 400);
 800ae0c:	f7f6 fb14 	bl	8001438 <BSP_LCD_GetXSize>
 800ae10:	4603      	mov	r3, r0
 800ae12:	091b      	lsrs	r3, r3, #4
 800ae14:	b29c      	uxth	r4, r3
 800ae16:	f7f6 fb1b 	bl	8001450 <BSP_LCD_GetYSize>
 800ae1a:	ee07 0a90 	vmov	s15, r0
 800ae1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ae22:	ed9f 5b11 	vldr	d5, [pc, #68]	; 800ae68 <printBoard+0xc8>
 800ae26:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	ee07 3a90 	vmov	s15, r3
 800ae30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae34:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ae38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ae3c:	ee17 3a90 	vmov	r3, s15
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ae46:	4619      	mov	r1, r3
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f7f6 fd8f 	bl	800196c <BSP_LCD_DrawHLine>
	for(int j = 0; j<=9; j++){
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	3301      	adds	r3, #1
 800ae52:	603b      	str	r3, [r7, #0]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b09      	cmp	r3, #9
 800ae58:	ddd8      	ble.n	800ae0c <printBoard+0x6c>
	}
}
 800ae5a:	bf00      	nop
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd90      	pop	{r4, r7, pc}
 800ae62:	bf00      	nop
 800ae64:	f3af 8000 	nop.w
 800ae68:	33333333 	.word	0x33333333
 800ae6c:	40233333 	.word	0x40233333
 800ae70:	ffd3d3d3 	.word	0xffd3d3d3
 800ae74:	cccccccd 	.word	0xcccccccd

0800ae78 <InitialPos>:

void InitialPos(){
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	af00      	add	r7, sp, #0
	//Posições iniciais
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA);
 800ae7c:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 800ae80:	f7f6 fb52 	bl	8001528 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(225,225, 20);
 800ae84:	2214      	movs	r2, #20
 800ae86:	21e1      	movs	r1, #225	; 0xe1
 800ae88:	20e1      	movs	r0, #225	; 0xe1
 800ae8a:	f7f6 ff39 	bl	8001d00 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA);
 800ae8e:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 800ae92:	f7f6 fb49 	bl	8001528 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(275, 275, 20);
 800ae96:	2214      	movs	r2, #20
 800ae98:	f240 1113 	movw	r1, #275	; 0x113
 800ae9c:	f240 1013 	movw	r0, #275	; 0x113
 800aea0:	f7f6 ff2e 	bl	8001d00 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 800aea4:	480b      	ldr	r0, [pc, #44]	; (800aed4 <InitialPos+0x5c>)
 800aea6:	f7f6 fb3f 	bl	8001528 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(275, 225, 20);
 800aeaa:	2214      	movs	r2, #20
 800aeac:	21e1      	movs	r1, #225	; 0xe1
 800aeae:	f240 1013 	movw	r0, #275	; 0x113
 800aeb2:	f7f6 ff25 	bl	8001d00 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 800aeb6:	4807      	ldr	r0, [pc, #28]	; (800aed4 <InitialPos+0x5c>)
 800aeb8:	f7f6 fb36 	bl	8001528 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(225, 275, 20);
 800aebc:	2214      	movs	r2, #20
 800aebe:	f240 1113 	movw	r1, #275	; 0x113
 800aec2:	20e1      	movs	r0, #225	; 0xe1
 800aec4:	f7f6 ff1c 	bl	8001d00 <BSP_LCD_FillCircle>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800aec8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800aecc:	f7f6 fb2c 	bl	8001528 <BSP_LCD_SetTextColor>
}
 800aed0:	bf00      	nop
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	ff008000 	.word	0xff008000

0800aed8 <printTime>:

void printTime(){
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b092      	sub	sp, #72	; 0x48
 800aedc:	af02      	add	r7, sp, #8

	char string[50];

	int h=countTotal/3600, m=(countTotal-3600*h)/60, s=(countTotal-3600*h-m*60);
 800aede:	4b2c      	ldr	r3, [pc, #176]	; (800af90 <printTime+0xb8>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a2c      	ldr	r2, [pc, #176]	; (800af94 <printTime+0xbc>)
 800aee4:	fb82 1203 	smull	r1, r2, r2, r3
 800aee8:	441a      	add	r2, r3
 800aeea:	12d2      	asrs	r2, r2, #11
 800aeec:	17db      	asrs	r3, r3, #31
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef4:	4a28      	ldr	r2, [pc, #160]	; (800af98 <printTime+0xc0>)
 800aef6:	fb02 f203 	mul.w	r2, r2, r3
 800aefa:	4b25      	ldr	r3, [pc, #148]	; (800af90 <printTime+0xb8>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4413      	add	r3, r2
 800af00:	4a26      	ldr	r2, [pc, #152]	; (800af9c <printTime+0xc4>)
 800af02:	fb82 1203 	smull	r1, r2, r2, r3
 800af06:	441a      	add	r2, r3
 800af08:	1152      	asrs	r2, r2, #5
 800af0a:	17db      	asrs	r3, r3, #31
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800af10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af12:	4a21      	ldr	r2, [pc, #132]	; (800af98 <printTime+0xc0>)
 800af14:	fb02 f203 	mul.w	r2, r2, r3
 800af18:	4b1d      	ldr	r3, [pc, #116]	; (800af90 <printTime+0xb8>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	18d1      	adds	r1, r2, r3
 800af1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af20:	4613      	mov	r3, r2
 800af22:	0112      	lsls	r2, r2, #4
 800af24:	1a9b      	subs	r3, r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	440b      	add	r3, r1
 800af2a:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(string, "Time Total: %2d:%2d:%2d", h,m,s);
 800af2c:	4638      	mov	r0, r7
 800af2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af36:	491a      	ldr	r1, [pc, #104]	; (800afa0 <printTime+0xc8>)
 800af38:	f001 f968 	bl	800c20c <siprintf>
	BSP_LCD_SetFont(&Font20);
 800af3c:	4819      	ldr	r0, [pc, #100]	; (800afa4 <printTime+0xcc>)
 800af3e:	f7f6 fb25 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize()/2 + 120, (uint8_t *)string, RIGHT_MODE);
 800af42:	f7f6 fa85 	bl	8001450 <BSP_LCD_GetYSize>
 800af46:	4603      	mov	r3, r0
 800af48:	085b      	lsrs	r3, r3, #1
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	3378      	adds	r3, #120	; 0x78
 800af4e:	b299      	uxth	r1, r3
 800af50:	463a      	mov	r2, r7
 800af52:	2302      	movs	r3, #2
 800af54:	2014      	movs	r0, #20
 800af56:	f7f6 fc45 	bl	80017e4 <BSP_LCD_DisplayStringAt>

	sprintf(string, "Time of Play: %d s", countPlay);
 800af5a:	4b13      	ldr	r3, [pc, #76]	; (800afa8 <printTime+0xd0>)
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	463b      	mov	r3, r7
 800af60:	4912      	ldr	r1, [pc, #72]	; (800afac <printTime+0xd4>)
 800af62:	4618      	mov	r0, r3
 800af64:	f001 f952 	bl	800c20c <siprintf>
	BSP_LCD_SetFont(&Font20);
 800af68:	480e      	ldr	r0, [pc, #56]	; (800afa4 <printTime+0xcc>)
 800af6a:	f7f6 fb0f 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize()/2 + 145, (uint8_t *)string, RIGHT_MODE);
 800af6e:	f7f6 fa6f 	bl	8001450 <BSP_LCD_GetYSize>
 800af72:	4603      	mov	r3, r0
 800af74:	085b      	lsrs	r3, r3, #1
 800af76:	b29b      	uxth	r3, r3
 800af78:	3391      	adds	r3, #145	; 0x91
 800af7a:	b299      	uxth	r1, r3
 800af7c:	463a      	mov	r2, r7
 800af7e:	2302      	movs	r3, #2
 800af80:	2014      	movs	r0, #20
 800af82:	f7f6 fc2f 	bl	80017e4 <BSP_LCD_DisplayStringAt>
}
 800af86:	bf00      	nop
 800af88:	3740      	adds	r7, #64	; 0x40
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	20000324 	.word	0x20000324
 800af94:	91a2b3c5 	.word	0x91a2b3c5
 800af98:	fffff1f0 	.word	0xfffff1f0
 800af9c:	88888889 	.word	0x88888889
 800afa0:	0800ca80 	.word	0x0800ca80
 800afa4:	20000040 	.word	0x20000040
 800afa8:	20000064 	.word	0x20000064
 800afac:	0800ca98 	.word	0x0800ca98

0800afb0 <printScore>:

void printScore(){
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b08a      	sub	sp, #40	; 0x28
 800afb4:	af00      	add	r7, sp, #0

	char string[35];
	//BSP_LCD_Clear(LCD_COLOR_WHITE);

	BSP_LCD_DrawVLine(460, 50, 400);
 800afb6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800afba:	2132      	movs	r1, #50	; 0x32
 800afbc:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800afc0:	f7f6 fd12 	bl	80019e8 <BSP_LCD_DrawVLine>
	BSP_LCD_DrawHLine(460, 50, 330);
 800afc4:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800afc8:	2132      	movs	r1, #50	; 0x32
 800afca:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800afce:	f7f6 fccd 	bl	800196c <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(460, 85, 330);
 800afd2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800afd6:	2155      	movs	r1, #85	; 0x55
 800afd8:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800afdc:	f7f6 fcc6 	bl	800196c <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(460, 450, 330);
 800afe0:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800afe4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800afe8:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800afec:	f7f6 fcbe 	bl	800196c <BSP_LCD_DrawHLine>
	BSP_LCD_DrawVLine(790, 50, 400);
 800aff0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800aff4:	2132      	movs	r1, #50	; 0x32
 800aff6:	f240 3016 	movw	r0, #790	; 0x316
 800affa:	f7f6 fcf5 	bl	80019e8 <BSP_LCD_DrawVLine>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800affe:	481a      	ldr	r0, [pc, #104]	; (800b068 <printScore+0xb8>)
 800b000:	f7f6 fa92 	bl	8001528 <BSP_LCD_SetTextColor>

	sprintf(string, "Game Info");
 800b004:	1d3b      	adds	r3, r7, #4
 800b006:	4a19      	ldr	r2, [pc, #100]	; (800b06c <printScore+0xbc>)
 800b008:	ca07      	ldmia	r2, {r0, r1, r2}
 800b00a:	c303      	stmia	r3!, {r0, r1}
 800b00c:	801a      	strh	r2, [r3, #0]
	BSP_LCD_SetFont(&Font24);
 800b00e:	4818      	ldr	r0, [pc, #96]	; (800b070 <printScore+0xc0>)
 800b010:	f7f6 fabc 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(90,55 , (uint8_t *)string, RIGHT_MODE);
 800b014:	1d3a      	adds	r2, r7, #4
 800b016:	2302      	movs	r3, #2
 800b018:	2137      	movs	r1, #55	; 0x37
 800b01a:	205a      	movs	r0, #90	; 0x5a
 800b01c:	f7f6 fbe2 	bl	80017e4 <BSP_LCD_DisplayStringAt>

	sprintf(string, "Player 1 Score: %d", ScorePlayer1);
 800b020:	4b14      	ldr	r3, [pc, #80]	; (800b074 <printScore+0xc4>)
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	1d3b      	adds	r3, r7, #4
 800b026:	4914      	ldr	r1, [pc, #80]	; (800b078 <printScore+0xc8>)
 800b028:	4618      	mov	r0, r3
 800b02a:	f001 f8ef 	bl	800c20c <siprintf>
	BSP_LCD_SetFont(&Font24);
 800b02e:	4810      	ldr	r0, [pc, #64]	; (800b070 <printScore+0xc0>)
 800b030:	f7f6 faac 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(30,200 , (uint8_t *)string, RIGHT_MODE);
 800b034:	1d3a      	adds	r2, r7, #4
 800b036:	2302      	movs	r3, #2
 800b038:	21c8      	movs	r1, #200	; 0xc8
 800b03a:	201e      	movs	r0, #30
 800b03c:	f7f6 fbd2 	bl	80017e4 <BSP_LCD_DisplayStringAt>

	sprintf(string, "Player 2 Score: %d", ScorePlayer2);
 800b040:	4b0e      	ldr	r3, [pc, #56]	; (800b07c <printScore+0xcc>)
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	1d3b      	adds	r3, r7, #4
 800b046:	490e      	ldr	r1, [pc, #56]	; (800b080 <printScore+0xd0>)
 800b048:	4618      	mov	r0, r3
 800b04a:	f001 f8df 	bl	800c20c <siprintf>
	BSP_LCD_SetFont(&Font24);
 800b04e:	4808      	ldr	r0, [pc, #32]	; (800b070 <printScore+0xc0>)
 800b050:	f7f6 fa9c 	bl	800158c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(30,255 , (uint8_t *)string, RIGHT_MODE);
 800b054:	1d3a      	adds	r2, r7, #4
 800b056:	2302      	movs	r3, #2
 800b058:	21ff      	movs	r1, #255	; 0xff
 800b05a:	201e      	movs	r0, #30
 800b05c:	f7f6 fbc2 	bl	80017e4 <BSP_LCD_DisplayStringAt>
}
 800b060:	bf00      	nop
 800b062:	3728      	adds	r7, #40	; 0x28
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	ff000080 	.word	0xff000080
 800b06c:	0800caac 	.word	0x0800caac
 800b070:	20000038 	.word	0x20000038
 800b074:	20000328 	.word	0x20000328
 800b078:	0800cab8 	.word	0x0800cab8
 800b07c:	2000032c 	.word	0x2000032c
 800b080:	0800cacc 	.word	0x0800cacc

0800b084 <virtualBoardUpdate>:

void virtualBoardUpdate(){
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0

	uint32_t col1, col2;

	if (Player%2 == 1){ // se for player 1
 800b08a:	4b6d      	ldr	r3, [pc, #436]	; (800b240 <virtualBoardUpdate+0x1bc>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	bfb8      	it	lt
 800b096:	425b      	neglt	r3, r3
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d106      	bne.n	800b0aa <virtualBoardUpdate+0x26>
			col1 = color1;
 800b09c:	4b69      	ldr	r3, [pc, #420]	; (800b244 <virtualBoardUpdate+0x1c0>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	607b      	str	r3, [r7, #4]
			col2 = color2;
 800b0a2:	4b69      	ldr	r3, [pc, #420]	; (800b248 <virtualBoardUpdate+0x1c4>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	603b      	str	r3, [r7, #0]
 800b0a8:	e005      	b.n	800b0b6 <virtualBoardUpdate+0x32>
		}
		else{
			col1 = color2;
 800b0aa:	4b67      	ldr	r3, [pc, #412]	; (800b248 <virtualBoardUpdate+0x1c4>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	607b      	str	r3, [r7, #4]
			col2 = color1;
 800b0b0:	4b64      	ldr	r3, [pc, #400]	; (800b244 <virtualBoardUpdate+0x1c0>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	603b      	str	r3, [r7, #0]
		}

	for (int i = 0; i < DIM; i++){
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	e0b8      	b.n	800b22e <virtualBoardUpdate+0x1aa>
		for (int j = 0; j < DIM; j++){
 800b0bc:	2300      	movs	r3, #0
 800b0be:	60bb      	str	r3, [r7, #8]
 800b0c0:	e0ae      	b.n	800b220 <virtualBoardUpdate+0x19c>
			if(BSP_LCD_ReadPixel(75+50*i,75+50*j)==color1)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	0092      	lsls	r2, r2, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	0091      	lsls	r1, r2, #2
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4413      	add	r3, r2
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	334b      	adds	r3, #75	; 0x4b
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	0089      	lsls	r1, r1, #2
 800b0e6:	440b      	add	r3, r1
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	0088      	lsls	r0, r1, #2
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	440b      	add	r3, r1
 800b0f2:	005b      	lsls	r3, r3, #1
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	334b      	adds	r3, #75	; 0x4b
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	f7f6 fa5f 	bl	80015c0 <BSP_LCD_ReadPixel>
 800b102:	4602      	mov	r2, r0
 800b104:	4b4f      	ldr	r3, [pc, #316]	; (800b244 <virtualBoardUpdate+0x1c0>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d107      	bne.n	800b11c <virtualBoardUpdate+0x98>
				board[i][j]=Mine;
 800b10c:	4a4f      	ldr	r2, [pc, #316]	; (800b24c <virtualBoardUpdate+0x1c8>)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	00db      	lsls	r3, r3, #3
 800b112:	441a      	add	r2, r3
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	4413      	add	r3, r2
 800b118:	226d      	movs	r2, #109	; 0x6d
 800b11a:	701a      	strb	r2, [r3, #0]
			if(BSP_LCD_ReadPixel(75+50*i,75+50*j)==color2)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	b29b      	uxth	r3, r3
 800b120:	461a      	mov	r2, r3
 800b122:	0092      	lsls	r2, r2, #2
 800b124:	4413      	add	r3, r2
 800b126:	461a      	mov	r2, r3
 800b128:	0091      	lsls	r1, r2, #2
 800b12a:	461a      	mov	r2, r3
 800b12c:	460b      	mov	r3, r1
 800b12e:	4413      	add	r3, r2
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	b29b      	uxth	r3, r3
 800b134:	334b      	adds	r3, #75	; 0x4b
 800b136:	b29a      	uxth	r2, r3
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	4619      	mov	r1, r3
 800b13e:	0089      	lsls	r1, r1, #2
 800b140:	440b      	add	r3, r1
 800b142:	4619      	mov	r1, r3
 800b144:	0088      	lsls	r0, r1, #2
 800b146:	4619      	mov	r1, r3
 800b148:	4603      	mov	r3, r0
 800b14a:	440b      	add	r3, r1
 800b14c:	005b      	lsls	r3, r3, #1
 800b14e:	b29b      	uxth	r3, r3
 800b150:	334b      	adds	r3, #75	; 0x4b
 800b152:	b29b      	uxth	r3, r3
 800b154:	4619      	mov	r1, r3
 800b156:	4610      	mov	r0, r2
 800b158:	f7f6 fa32 	bl	80015c0 <BSP_LCD_ReadPixel>
 800b15c:	4602      	mov	r2, r0
 800b15e:	4b3a      	ldr	r3, [pc, #232]	; (800b248 <virtualBoardUpdate+0x1c4>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	429a      	cmp	r2, r3
 800b164:	d107      	bne.n	800b176 <virtualBoardUpdate+0xf2>
				board[i][j]=Opponent;
 800b166:	4a39      	ldr	r2, [pc, #228]	; (800b24c <virtualBoardUpdate+0x1c8>)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	00db      	lsls	r3, r3, #3
 800b16c:	441a      	add	r2, r3
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	4413      	add	r3, r2
 800b172:	226f      	movs	r2, #111	; 0x6f
 800b174:	701a      	strb	r2, [r3, #0]
			if(BSP_LCD_ReadPixel(75+50*i,75+50*j)==colorboard || BSP_LCD_ReadPixel(75+50*i,75+50*j)==colorposs)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	b29b      	uxth	r3, r3
 800b17a:	461a      	mov	r2, r3
 800b17c:	0092      	lsls	r2, r2, #2
 800b17e:	4413      	add	r3, r2
 800b180:	461a      	mov	r2, r3
 800b182:	0091      	lsls	r1, r2, #2
 800b184:	461a      	mov	r2, r3
 800b186:	460b      	mov	r3, r1
 800b188:	4413      	add	r3, r2
 800b18a:	005b      	lsls	r3, r3, #1
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	334b      	adds	r3, #75	; 0x4b
 800b190:	b29a      	uxth	r2, r3
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	b29b      	uxth	r3, r3
 800b196:	4619      	mov	r1, r3
 800b198:	0089      	lsls	r1, r1, #2
 800b19a:	440b      	add	r3, r1
 800b19c:	4619      	mov	r1, r3
 800b19e:	0088      	lsls	r0, r1, #2
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	440b      	add	r3, r1
 800b1a6:	005b      	lsls	r3, r3, #1
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	334b      	adds	r3, #75	; 0x4b
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	f7f6 fa05 	bl	80015c0 <BSP_LCD_ReadPixel>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	4b25      	ldr	r3, [pc, #148]	; (800b250 <virtualBoardUpdate+0x1cc>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d024      	beq.n	800b20a <virtualBoardUpdate+0x186>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	0092      	lsls	r2, r2, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	0091      	lsls	r1, r2, #2
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4413      	add	r3, r2
 800b1d4:	005b      	lsls	r3, r3, #1
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	334b      	adds	r3, #75	; 0x4b
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	0089      	lsls	r1, r1, #2
 800b1e4:	440b      	add	r3, r1
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	0088      	lsls	r0, r1, #2
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	440b      	add	r3, r1
 800b1f0:	005b      	lsls	r3, r3, #1
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	334b      	adds	r3, #75	; 0x4b
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	f7f6 f9e0 	bl	80015c0 <BSP_LCD_ReadPixel>
 800b200:	4602      	mov	r2, r0
 800b202:	4b14      	ldr	r3, [pc, #80]	; (800b254 <virtualBoardUpdate+0x1d0>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	429a      	cmp	r2, r3
 800b208:	d107      	bne.n	800b21a <virtualBoardUpdate+0x196>
				board[i][j]=Empty;
 800b20a:	4a10      	ldr	r2, [pc, #64]	; (800b24c <virtualBoardUpdate+0x1c8>)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	00db      	lsls	r3, r3, #3
 800b210:	441a      	add	r2, r3
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	4413      	add	r3, r2
 800b216:	2265      	movs	r2, #101	; 0x65
 800b218:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < DIM; j++){
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	3301      	adds	r3, #1
 800b21e:	60bb      	str	r3, [r7, #8]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	2b07      	cmp	r3, #7
 800b224:	f77f af4d 	ble.w	800b0c2 <virtualBoardUpdate+0x3e>
	for (int i = 0; i < DIM; i++){
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3301      	adds	r3, #1
 800b22c:	60fb      	str	r3, [r7, #12]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2b07      	cmp	r3, #7
 800b232:	f77f af43 	ble.w	800b0bc <virtualBoardUpdate+0x38>
		}
	}
}
 800b236:	bf00      	nop
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20000068 	.word	0x20000068
 800b244:	20000070 	.word	0x20000070
 800b248:	2000006c 	.word	0x2000006c
 800b24c:	20000338 	.word	0x20000338
 800b250:	20000074 	.word	0x20000074
 800b254:	20000078 	.word	0x20000078

0800b258 <clearPrePossMov>:


void clearPrePossMov(){
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0

	for(int i = 0; i < DIM; i++){
 800b25e:	2300      	movs	r3, #0
 800b260:	607b      	str	r3, [r7, #4]
 800b262:	e01f      	b.n	800b2a4 <clearPrePossMov+0x4c>
		for(int j = 0; j < DIM; j++){
 800b264:	2300      	movs	r3, #0
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	e016      	b.n	800b298 <clearPrePossMov+0x40>
			if(board[i][j]=Poss)
 800b26a:	4a12      	ldr	r2, [pc, #72]	; (800b2b4 <clearPrePossMov+0x5c>)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	00db      	lsls	r3, r3, #3
 800b270:	441a      	add	r2, r3
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	4413      	add	r3, r2
 800b276:	2270      	movs	r2, #112	; 0x70
 800b278:	701a      	strb	r2, [r3, #0]
			{
				board[i][j]=Empty;
 800b27a:	4a0e      	ldr	r2, [pc, #56]	; (800b2b4 <clearPrePossMov+0x5c>)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	441a      	add	r2, r3
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	4413      	add	r3, r2
 800b286:	2265      	movs	r2, #101	; 0x65
 800b288:	701a      	strb	r2, [r3, #0]
			}
			checkPossMov(i,j);
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f813 	bl	800b2b8 <checkPossMov>
		for(int j = 0; j < DIM; j++){
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	3301      	adds	r3, #1
 800b296:	603b      	str	r3, [r7, #0]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	2b07      	cmp	r3, #7
 800b29c:	dde5      	ble.n	800b26a <clearPrePossMov+0x12>
	for(int i = 0; i < DIM; i++){
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	607b      	str	r3, [r7, #4]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b07      	cmp	r3, #7
 800b2a8:	dddc      	ble.n	800b264 <clearPrePossMov+0xc>
		}
	}
}
 800b2aa:	bf00      	nop
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000338 	.word	0x20000338

0800b2b8 <checkPossMov>:

void checkPossMov(int i, int j){
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]


	int iaux, jaux;

	iaux = i - 1;       //Testing UP+LEFT
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	60fb      	str	r3, [r7, #12]
	jaux = j - 1;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	60bb      	str	r3, [r7, #8]
	while (board[iaux][jaux] == Opponent) { 				//enquanto a posiçao que estamos a verificar estiver dentro dos
 800b2ce:	e022      	b.n	800b316 <checkPossMov+0x5e>
		iaux--;                                                         //limites do tabuleiro e for igual ao simbolo do adversario
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	60fb      	str	r3, [r7, #12]
		jaux--;                                                         //continuamos a movimentar o nosso estudo na direçao a testar
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	60bb      	str	r3, [r7, #8]

		if (board[iaux][jaux] == Mine) {
 800b2dc:	4a8f      	ldr	r2, [pc, #572]	; (800b51c <checkPossMov+0x264>)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	00db      	lsls	r3, r3, #3
 800b2e2:	441a      	add	r2, r3
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	2b6d      	cmp	r3, #109	; 0x6d
 800b2ec:	d113      	bne.n	800b316 <checkPossMov+0x5e>
			if (board[i][j] == Empty) {                             //substitui espaço em branco por jogada possivel
 800b2ee:	4a8b      	ldr	r2, [pc, #556]	; (800b51c <checkPossMov+0x264>)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	00db      	lsls	r3, r3, #3
 800b2f4:	441a      	add	r2, r3
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b65      	cmp	r3, #101	; 0x65
 800b2fe:	d10a      	bne.n	800b316 <checkPossMov+0x5e>
				board[i][j] = Poss;                                //assinalada por * (estrelinha)
 800b300:	4a86      	ldr	r2, [pc, #536]	; (800b51c <checkPossMov+0x264>)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	00db      	lsls	r3, r3, #3
 800b306:	441a      	add	r2, r3
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	4413      	add	r3, r2
 800b30c:	2270      	movs	r2, #112	; 0x70
 800b30e:	701a      	strb	r2, [r3, #0]
				dir[UPLEFT] = TRUE;                                 //True quando o teste de direçao funcionou, sera usado na funçao reverse
 800b310:	4b83      	ldr	r3, [pc, #524]	; (800b520 <checkPossMov+0x268>)
 800b312:	2201      	movs	r2, #1
 800b314:	701a      	strb	r2, [r3, #0]
	while (board[iaux][jaux] == Opponent) { 				//enquanto a posiçao que estamos a verificar estiver dentro dos
 800b316:	4a81      	ldr	r2, [pc, #516]	; (800b51c <checkPossMov+0x264>)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	00db      	lsls	r3, r3, #3
 800b31c:	441a      	add	r2, r3
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	4413      	add	r3, r2
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	2b6f      	cmp	r3, #111	; 0x6f
 800b326:	d0d3      	beq.n	800b2d0 <checkPossMov+0x18>
			}
		}
	}


	iaux = i - 1;       //Testing UP
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	60fb      	str	r3, [r7, #12]
	jaux = j;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	60bb      	str	r3, [r7, #8]
	while (board[iaux][jaux] == Opponent) {
 800b332:	e01f      	b.n	800b374 <checkPossMov+0xbc>
		iaux--;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	3b01      	subs	r3, #1
 800b338:	60fb      	str	r3, [r7, #12]

		if (board[iaux][jaux] == Mine) {
 800b33a:	4a78      	ldr	r2, [pc, #480]	; (800b51c <checkPossMov+0x264>)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	00db      	lsls	r3, r3, #3
 800b340:	441a      	add	r2, r3
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	4413      	add	r3, r2
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	2b6d      	cmp	r3, #109	; 0x6d
 800b34a:	d113      	bne.n	800b374 <checkPossMov+0xbc>
			if (board[i][j] == Empty) {                             //substitui espaço em branco por jogada possivel
 800b34c:	4a73      	ldr	r2, [pc, #460]	; (800b51c <checkPossMov+0x264>)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	00db      	lsls	r3, r3, #3
 800b352:	441a      	add	r2, r3
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	4413      	add	r3, r2
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	2b65      	cmp	r3, #101	; 0x65
 800b35c:	d10a      	bne.n	800b374 <checkPossMov+0xbc>
				board[i][j] = Poss;                                //assinalada por * (estrelinha)
 800b35e:	4a6f      	ldr	r2, [pc, #444]	; (800b51c <checkPossMov+0x264>)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	00db      	lsls	r3, r3, #3
 800b364:	441a      	add	r2, r3
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	4413      	add	r3, r2
 800b36a:	2270      	movs	r2, #112	; 0x70
 800b36c:	701a      	strb	r2, [r3, #0]
				dir[UPLEFT] = TRUE;                                 //True quando o teste de direçao funcionou, sera usado na funçao reverse
 800b36e:	4b6c      	ldr	r3, [pc, #432]	; (800b520 <checkPossMov+0x268>)
 800b370:	2201      	movs	r2, #1
 800b372:	701a      	strb	r2, [r3, #0]
	while (board[iaux][jaux] == Opponent) {
 800b374:	4a69      	ldr	r2, [pc, #420]	; (800b51c <checkPossMov+0x264>)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	441a      	add	r2, r3
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	4413      	add	r3, r2
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	2b6f      	cmp	r3, #111	; 0x6f
 800b384:	d0d6      	beq.n	800b334 <checkPossMov+0x7c>
			}
		}
	}


	iaux = i - 1;       //Testing UP+RIGHT
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	3b01      	subs	r3, #1
 800b38a:	60fb      	str	r3, [r7, #12]
	jaux = j + 1;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	3301      	adds	r3, #1
 800b390:	60bb      	str	r3, [r7, #8]
	while (board[iaux][jaux] == Opponent) {
 800b392:	e022      	b.n	800b3da <checkPossMov+0x122>
		iaux--;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	3b01      	subs	r3, #1
 800b398:	60fb      	str	r3, [r7, #12]
		jaux++;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	3301      	adds	r3, #1
 800b39e:	60bb      	str	r3, [r7, #8]

		if (board[iaux][jaux] == Mine) {
 800b3a0:	4a5e      	ldr	r2, [pc, #376]	; (800b51c <checkPossMov+0x264>)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	00db      	lsls	r3, r3, #3
 800b3a6:	441a      	add	r2, r3
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	2b6d      	cmp	r3, #109	; 0x6d
 800b3b0:	d113      	bne.n	800b3da <checkPossMov+0x122>
			if (board[i][j] == Empty) {                             //substitui espaço em branco por jogada possivel
 800b3b2:	4a5a      	ldr	r2, [pc, #360]	; (800b51c <checkPossMov+0x264>)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	00db      	lsls	r3, r3, #3
 800b3b8:	441a      	add	r2, r3
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	4413      	add	r3, r2
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	2b65      	cmp	r3, #101	; 0x65
 800b3c2:	d10a      	bne.n	800b3da <checkPossMov+0x122>
				board[i][j] = Poss;                                //assinalada por * (estrelinha)
 800b3c4:	4a55      	ldr	r2, [pc, #340]	; (800b51c <checkPossMov+0x264>)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	00db      	lsls	r3, r3, #3
 800b3ca:	441a      	add	r2, r3
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	2270      	movs	r2, #112	; 0x70
 800b3d2:	701a      	strb	r2, [r3, #0]
				dir[UPLEFT] = TRUE;                                 //True quando o teste de direçao funcionou, sera usado na funçao reverse
 800b3d4:	4b52      	ldr	r3, [pc, #328]	; (800b520 <checkPossMov+0x268>)
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	701a      	strb	r2, [r3, #0]
	while (board[iaux][jaux] == Opponent) {
 800b3da:	4a50      	ldr	r2, [pc, #320]	; (800b51c <checkPossMov+0x264>)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	441a      	add	r2, r3
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	2b6f      	cmp	r3, #111	; 0x6f
 800b3ea:	d0d3      	beq.n	800b394 <checkPossMov+0xdc>
			}
		}
	}


	iaux = i;       //Testing LEFT
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	60fb      	str	r3, [r7, #12]
	jaux = j - 1;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	60bb      	str	r3, [r7, #8]
	while (board[iaux][jaux] == Opponent) {
 800b3f6:	e01f      	b.n	800b438 <checkPossMov+0x180>
		jaux--;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	60bb      	str	r3, [r7, #8]

		if (board[iaux][jaux] == Mine) {
 800b3fe:	4a47      	ldr	r2, [pc, #284]	; (800b51c <checkPossMov+0x264>)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	00db      	lsls	r3, r3, #3
 800b404:	441a      	add	r2, r3
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	4413      	add	r3, r2
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	2b6d      	cmp	r3, #109	; 0x6d
 800b40e:	d113      	bne.n	800b438 <checkPossMov+0x180>
			if (board[i][j] == Empty) {                             //substitui espaço em branco por jogada possivel
 800b410:	4a42      	ldr	r2, [pc, #264]	; (800b51c <checkPossMov+0x264>)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	00db      	lsls	r3, r3, #3
 800b416:	441a      	add	r2, r3
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	4413      	add	r3, r2
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	2b65      	cmp	r3, #101	; 0x65
 800b420:	d10a      	bne.n	800b438 <checkPossMov+0x180>
				board[i][j] = Poss;                                //assinalada por * (estrelinha)
 800b422:	4a3e      	ldr	r2, [pc, #248]	; (800b51c <checkPossMov+0x264>)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	00db      	lsls	r3, r3, #3
 800b428:	441a      	add	r2, r3
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	4413      	add	r3, r2
 800b42e:	2270      	movs	r2, #112	; 0x70
 800b430:	701a      	strb	r2, [r3, #0]
				dir[UPLEFT] = TRUE;                                 //True quando o teste de direçao funcionou, sera usado na funçao reverse
 800b432:	4b3b      	ldr	r3, [pc, #236]	; (800b520 <checkPossMov+0x268>)
 800b434:	2201      	movs	r2, #1
 800b436:	701a      	strb	r2, [r3, #0]
	while (board[iaux][jaux] == Opponent) {
 800b438:	4a38      	ldr	r2, [pc, #224]	; (800b51c <checkPossMov+0x264>)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	00db      	lsls	r3, r3, #3
 800b43e:	441a      	add	r2, r3
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	4413      	add	r3, r2
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	2b6f      	cmp	r3, #111	; 0x6f
 800b448:	d0d6      	beq.n	800b3f8 <checkPossMov+0x140>
			}
		}
	}


	iaux = i;       //Testing RIGHT
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	60fb      	str	r3, [r7, #12]
	jaux = j + 1;
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	3301      	adds	r3, #1
 800b452:	60bb      	str	r3, [r7, #8]
	while (board[iaux][jaux] == Opponent) {
 800b454:	e01f      	b.n	800b496 <checkPossMov+0x1de>
		jaux++;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	3301      	adds	r3, #1
 800b45a:	60bb      	str	r3, [r7, #8]

		if (board[iaux][jaux] == Mine) {
 800b45c:	4a2f      	ldr	r2, [pc, #188]	; (800b51c <checkPossMov+0x264>)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	00db      	lsls	r3, r3, #3
 800b462:	441a      	add	r2, r3
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	4413      	add	r3, r2
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	2b6d      	cmp	r3, #109	; 0x6d
 800b46c:	d113      	bne.n	800b496 <checkPossMov+0x1de>
			if (board[i][j] == Empty) {                             //substitui espaço em branco por jogada possivel
 800b46e:	4a2b      	ldr	r2, [pc, #172]	; (800b51c <checkPossMov+0x264>)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	00db      	lsls	r3, r3, #3
 800b474:	441a      	add	r2, r3
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	4413      	add	r3, r2
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	2b65      	cmp	r3, #101	; 0x65
 800b47e:	d10a      	bne.n	800b496 <checkPossMov+0x1de>
				board[i][j] = Poss;                                //assinalada por * (estrelinha)
 800b480:	4a26      	ldr	r2, [pc, #152]	; (800b51c <checkPossMov+0x264>)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	00db      	lsls	r3, r3, #3
 800b486:	441a      	add	r2, r3
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	4413      	add	r3, r2
 800b48c:	2270      	movs	r2, #112	; 0x70
 800b48e:	701a      	strb	r2, [r3, #0]
				dir[UPLEFT] = TRUE;                                 //True quando o teste de direçao funcionou, sera usado na funçao reverse
 800b490:	4b23      	ldr	r3, [pc, #140]	; (800b520 <checkPossMov+0x268>)
 800b492:	2201      	movs	r2, #1
 800b494:	701a      	strb	r2, [r3, #0]
	while (board[iaux][jaux] == Opponent) {
 800b496:	4a21      	ldr	r2, [pc, #132]	; (800b51c <checkPossMov+0x264>)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	00db      	lsls	r3, r3, #3
 800b49c:	441a      	add	r2, r3
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	2b6f      	cmp	r3, #111	; 0x6f
 800b4a6:	d0d6      	beq.n	800b456 <checkPossMov+0x19e>
			}
		}
	}


	iaux = i + 1;       //Testing DOWN+LEFT
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	60fb      	str	r3, [r7, #12]
	jaux = j - 1;
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	60bb      	str	r3, [r7, #8]
	while (board[iaux][jaux] == Opponent) {
 800b4b4:	e022      	b.n	800b4fc <checkPossMov+0x244>
		iaux++;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	60fb      	str	r3, [r7, #12]
		jaux--;
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	60bb      	str	r3, [r7, #8]

		if (board[iaux][jaux] == Mine) {
 800b4c2:	4a16      	ldr	r2, [pc, #88]	; (800b51c <checkPossMov+0x264>)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	00db      	lsls	r3, r3, #3
 800b4c8:	441a      	add	r2, r3
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2b6d      	cmp	r3, #109	; 0x6d
 800b4d2:	d113      	bne.n	800b4fc <checkPossMov+0x244>
			if (board[i][j] == Empty) {                             //substitui espaço em branco por jogada possivel
 800b4d4:	4a11      	ldr	r2, [pc, #68]	; (800b51c <checkPossMov+0x264>)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	00db      	lsls	r3, r3, #3
 800b4da:	441a      	add	r2, r3
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	4413      	add	r3, r2
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	2b65      	cmp	r3, #101	; 0x65
 800b4e4:	d10a      	bne.n	800b4fc <checkPossMov+0x244>
				board[i][j] = Poss;                                //assinalada por * (estrelinha)
 800b4e6:	4a0d      	ldr	r2, [pc, #52]	; (800b51c <checkPossMov+0x264>)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	00db      	lsls	r3, r3, #3
 800b4ec:	441a      	add	r2, r3
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	2270      	movs	r2, #112	; 0x70
 800b4f4:	701a      	strb	r2, [r3, #0]
				dir[UPLEFT] = TRUE;                                 //True quando o teste de direçao funcionou, sera usado na funçao reverse
 800b4f6:	4b0a      	ldr	r3, [pc, #40]	; (800b520 <checkPossMov+0x268>)
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	701a      	strb	r2, [r3, #0]
	while (board[iaux][jaux] == Opponent) {
 800b4fc:	4a07      	ldr	r2, [pc, #28]	; (800b51c <checkPossMov+0x264>)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	00db      	lsls	r3, r3, #3
 800b502:	441a      	add	r2, r3
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	4413      	add	r3, r2
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	2b6f      	cmp	r3, #111	; 0x6f
 800b50c:	d0d3      	beq.n	800b4b6 <checkPossMov+0x1fe>
			}
		}
	}


	iaux = i + 1;       //Testing DOWN
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	3301      	adds	r3, #1
 800b512:	60fb      	str	r3, [r7, #12]
	jaux = j;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	60bb      	str	r3, [r7, #8]
	while (board[iaux][jaux] == Opponent) {
 800b518:	e024      	b.n	800b564 <checkPossMov+0x2ac>
 800b51a:	bf00      	nop
 800b51c:	20000338 	.word	0x20000338
 800b520:	20000330 	.word	0x20000330
		iaux++;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3301      	adds	r3, #1
 800b528:	60fb      	str	r3, [r7, #12]

		if (board[iaux][jaux] == Mine) {
 800b52a:	4a2f      	ldr	r2, [pc, #188]	; (800b5e8 <checkPossMov+0x330>)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	00db      	lsls	r3, r3, #3
 800b530:	441a      	add	r2, r3
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	4413      	add	r3, r2
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	2b6d      	cmp	r3, #109	; 0x6d
 800b53a:	d113      	bne.n	800b564 <checkPossMov+0x2ac>
			if (board[i][j] == Empty) {                             //substitui espaço em branco por jogada possivel
 800b53c:	4a2a      	ldr	r2, [pc, #168]	; (800b5e8 <checkPossMov+0x330>)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	00db      	lsls	r3, r3, #3
 800b542:	441a      	add	r2, r3
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	4413      	add	r3, r2
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	2b65      	cmp	r3, #101	; 0x65
 800b54c:	d10a      	bne.n	800b564 <checkPossMov+0x2ac>
				board[i][j] = Poss;                                //assinalada por * (estrelinha)
 800b54e:	4a26      	ldr	r2, [pc, #152]	; (800b5e8 <checkPossMov+0x330>)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	00db      	lsls	r3, r3, #3
 800b554:	441a      	add	r2, r3
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	4413      	add	r3, r2
 800b55a:	2270      	movs	r2, #112	; 0x70
 800b55c:	701a      	strb	r2, [r3, #0]
				dir[UPLEFT] = TRUE;                                 //True quando o teste de direçao funcionou, sera usado na funçao reverse
 800b55e:	4b23      	ldr	r3, [pc, #140]	; (800b5ec <checkPossMov+0x334>)
 800b560:	2201      	movs	r2, #1
 800b562:	701a      	strb	r2, [r3, #0]
	while (board[iaux][jaux] == Opponent) {
 800b564:	4a20      	ldr	r2, [pc, #128]	; (800b5e8 <checkPossMov+0x330>)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	00db      	lsls	r3, r3, #3
 800b56a:	441a      	add	r2, r3
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	4413      	add	r3, r2
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	2b6f      	cmp	r3, #111	; 0x6f
 800b574:	d0d6      	beq.n	800b524 <checkPossMov+0x26c>
			}
		}
	}


	iaux = i + 1;       //Testing DOWN+RIGHT
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3301      	adds	r3, #1
 800b57a:	60fb      	str	r3, [r7, #12]
	jaux = j + 1;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	3301      	adds	r3, #1
 800b580:	60bb      	str	r3, [r7, #8]
	while (board[iaux][jaux] == Opponent) {
 800b582:	e022      	b.n	800b5ca <checkPossMov+0x312>
		iaux++;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	3301      	adds	r3, #1
 800b588:	60fb      	str	r3, [r7, #12]
		jaux++;
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	3301      	adds	r3, #1
 800b58e:	60bb      	str	r3, [r7, #8]

		if (board[iaux][jaux] == Mine) {
 800b590:	4a15      	ldr	r2, [pc, #84]	; (800b5e8 <checkPossMov+0x330>)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	00db      	lsls	r3, r3, #3
 800b596:	441a      	add	r2, r3
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	4413      	add	r3, r2
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	2b6d      	cmp	r3, #109	; 0x6d
 800b5a0:	d113      	bne.n	800b5ca <checkPossMov+0x312>
			if (board[i][j] == Empty) {                             //substitui espaço em branco por jogada possivel
 800b5a2:	4a11      	ldr	r2, [pc, #68]	; (800b5e8 <checkPossMov+0x330>)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	441a      	add	r2, r3
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b65      	cmp	r3, #101	; 0x65
 800b5b2:	d10a      	bne.n	800b5ca <checkPossMov+0x312>
				board[i][j] = Poss;                                //assinalada por * (estrelinha)
 800b5b4:	4a0c      	ldr	r2, [pc, #48]	; (800b5e8 <checkPossMov+0x330>)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	00db      	lsls	r3, r3, #3
 800b5ba:	441a      	add	r2, r3
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	4413      	add	r3, r2
 800b5c0:	2270      	movs	r2, #112	; 0x70
 800b5c2:	701a      	strb	r2, [r3, #0]
				dir[UPLEFT] = TRUE;                                 //True quando o teste de direçao funcionou, sera usado na funçao reverse
 800b5c4:	4b09      	ldr	r3, [pc, #36]	; (800b5ec <checkPossMov+0x334>)
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	701a      	strb	r2, [r3, #0]
	while (board[iaux][jaux] == Opponent) {
 800b5ca:	4a07      	ldr	r2, [pc, #28]	; (800b5e8 <checkPossMov+0x330>)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	00db      	lsls	r3, r3, #3
 800b5d0:	441a      	add	r2, r3
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	2b6f      	cmp	r3, #111	; 0x6f
 800b5da:	d0d3      	beq.n	800b584 <checkPossMov+0x2cc>
			}
		}
	}
}
 800b5dc:	bf00      	nop
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr
 800b5e8:	20000338 	.word	0x20000338
 800b5ec:	20000330 	.word	0x20000330

0800b5f0 <LCDBoardUpdate>:

void LCDBoardUpdate(){
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0

	for (int i = 0; i < DIM; i++){
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	607b      	str	r3, [r7, #4]
 800b5fa:	e0c7      	b.n	800b78c <LCDBoardUpdate+0x19c>
		for (int j = 0; j < DIM; j++){
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	e0bd      	b.n	800b77e <LCDBoardUpdate+0x18e>
			if(board[i][j]==Mine){
 800b602:	4a66      	ldr	r2, [pc, #408]	; (800b79c <LCDBoardUpdate+0x1ac>)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	00db      	lsls	r3, r3, #3
 800b608:	441a      	add	r2, r3
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	4413      	add	r3, r2
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	2b6d      	cmp	r3, #109	; 0x6d
 800b612:	d125      	bne.n	800b660 <LCDBoardUpdate+0x70>
				BSP_LCD_SetTextColor(color1);
 800b614:	4b62      	ldr	r3, [pc, #392]	; (800b7a0 <LCDBoardUpdate+0x1b0>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4618      	mov	r0, r3
 800b61a:	f7f5 ff85 	bl	8001528 <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(75+50*i,75+50*j, 20);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	b29b      	uxth	r3, r3
 800b622:	461a      	mov	r2, r3
 800b624:	0092      	lsls	r2, r2, #2
 800b626:	4413      	add	r3, r2
 800b628:	461a      	mov	r2, r3
 800b62a:	0091      	lsls	r1, r2, #2
 800b62c:	461a      	mov	r2, r3
 800b62e:	460b      	mov	r3, r1
 800b630:	4413      	add	r3, r2
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	b29b      	uxth	r3, r3
 800b636:	334b      	adds	r3, #75	; 0x4b
 800b638:	b298      	uxth	r0, r3
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	461a      	mov	r2, r3
 800b640:	0092      	lsls	r2, r2, #2
 800b642:	4413      	add	r3, r2
 800b644:	461a      	mov	r2, r3
 800b646:	0091      	lsls	r1, r2, #2
 800b648:	461a      	mov	r2, r3
 800b64a:	460b      	mov	r3, r1
 800b64c:	4413      	add	r3, r2
 800b64e:	005b      	lsls	r3, r3, #1
 800b650:	b29b      	uxth	r3, r3
 800b652:	334b      	adds	r3, #75	; 0x4b
 800b654:	b29b      	uxth	r3, r3
 800b656:	2214      	movs	r2, #20
 800b658:	4619      	mov	r1, r3
 800b65a:	f7f6 fb51 	bl	8001d00 <BSP_LCD_FillCircle>
 800b65e:	e08b      	b.n	800b778 <LCDBoardUpdate+0x188>
			}
			else if(board[i][j]==Opponent){
 800b660:	4a4e      	ldr	r2, [pc, #312]	; (800b79c <LCDBoardUpdate+0x1ac>)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	00db      	lsls	r3, r3, #3
 800b666:	441a      	add	r2, r3
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	4413      	add	r3, r2
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b6f      	cmp	r3, #111	; 0x6f
 800b670:	d125      	bne.n	800b6be <LCDBoardUpdate+0xce>
				BSP_LCD_SetTextColor(color2);
 800b672:	4b4c      	ldr	r3, [pc, #304]	; (800b7a4 <LCDBoardUpdate+0x1b4>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4618      	mov	r0, r3
 800b678:	f7f5 ff56 	bl	8001528 <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(75+50*i,75+50*j, 20);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	b29b      	uxth	r3, r3
 800b680:	461a      	mov	r2, r3
 800b682:	0092      	lsls	r2, r2, #2
 800b684:	4413      	add	r3, r2
 800b686:	461a      	mov	r2, r3
 800b688:	0091      	lsls	r1, r2, #2
 800b68a:	461a      	mov	r2, r3
 800b68c:	460b      	mov	r3, r1
 800b68e:	4413      	add	r3, r2
 800b690:	005b      	lsls	r3, r3, #1
 800b692:	b29b      	uxth	r3, r3
 800b694:	334b      	adds	r3, #75	; 0x4b
 800b696:	b298      	uxth	r0, r3
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	461a      	mov	r2, r3
 800b69e:	0092      	lsls	r2, r2, #2
 800b6a0:	4413      	add	r3, r2
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	0091      	lsls	r1, r2, #2
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4413      	add	r3, r2
 800b6ac:	005b      	lsls	r3, r3, #1
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	334b      	adds	r3, #75	; 0x4b
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	2214      	movs	r2, #20
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	f7f6 fb22 	bl	8001d00 <BSP_LCD_FillCircle>
 800b6bc:	e05c      	b.n	800b778 <LCDBoardUpdate+0x188>
			}
			else if(board[i][j]==Empty){
 800b6be:	4a37      	ldr	r2, [pc, #220]	; (800b79c <LCDBoardUpdate+0x1ac>)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	00db      	lsls	r3, r3, #3
 800b6c4:	441a      	add	r2, r3
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	2b65      	cmp	r3, #101	; 0x65
 800b6ce:	d125      	bne.n	800b71c <LCDBoardUpdate+0x12c>
				BSP_LCD_SetTextColor(colorboard);
 800b6d0:	4b35      	ldr	r3, [pc, #212]	; (800b7a8 <LCDBoardUpdate+0x1b8>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7f5 ff27 	bl	8001528 <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(75+50*i,75+50*j, 20);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	461a      	mov	r2, r3
 800b6e0:	0092      	lsls	r2, r2, #2
 800b6e2:	4413      	add	r3, r2
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	0091      	lsls	r1, r2, #2
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4413      	add	r3, r2
 800b6ee:	005b      	lsls	r3, r3, #1
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	334b      	adds	r3, #75	; 0x4b
 800b6f4:	b298      	uxth	r0, r3
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	0092      	lsls	r2, r2, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	461a      	mov	r2, r3
 800b702:	0091      	lsls	r1, r2, #2
 800b704:	461a      	mov	r2, r3
 800b706:	460b      	mov	r3, r1
 800b708:	4413      	add	r3, r2
 800b70a:	005b      	lsls	r3, r3, #1
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	334b      	adds	r3, #75	; 0x4b
 800b710:	b29b      	uxth	r3, r3
 800b712:	2214      	movs	r2, #20
 800b714:	4619      	mov	r1, r3
 800b716:	f7f6 faf3 	bl	8001d00 <BSP_LCD_FillCircle>
 800b71a:	e02d      	b.n	800b778 <LCDBoardUpdate+0x188>
			}
			else if(board[i][j]==Poss){
 800b71c:	4a1f      	ldr	r2, [pc, #124]	; (800b79c <LCDBoardUpdate+0x1ac>)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	00db      	lsls	r3, r3, #3
 800b722:	441a      	add	r2, r3
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	4413      	add	r3, r2
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	2b70      	cmp	r3, #112	; 0x70
 800b72c:	d124      	bne.n	800b778 <LCDBoardUpdate+0x188>
				BSP_LCD_SetTextColor(colorposs);
 800b72e:	4b1f      	ldr	r3, [pc, #124]	; (800b7ac <LCDBoardUpdate+0x1bc>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4618      	mov	r0, r3
 800b734:	f7f5 fef8 	bl	8001528 <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(75+50*i,75+50*j, 5);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	461a      	mov	r2, r3
 800b73e:	0092      	lsls	r2, r2, #2
 800b740:	4413      	add	r3, r2
 800b742:	461a      	mov	r2, r3
 800b744:	0091      	lsls	r1, r2, #2
 800b746:	461a      	mov	r2, r3
 800b748:	460b      	mov	r3, r1
 800b74a:	4413      	add	r3, r2
 800b74c:	005b      	lsls	r3, r3, #1
 800b74e:	b29b      	uxth	r3, r3
 800b750:	334b      	adds	r3, #75	; 0x4b
 800b752:	b298      	uxth	r0, r3
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	b29b      	uxth	r3, r3
 800b758:	461a      	mov	r2, r3
 800b75a:	0092      	lsls	r2, r2, #2
 800b75c:	4413      	add	r3, r2
 800b75e:	461a      	mov	r2, r3
 800b760:	0091      	lsls	r1, r2, #2
 800b762:	461a      	mov	r2, r3
 800b764:	460b      	mov	r3, r1
 800b766:	4413      	add	r3, r2
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	334b      	adds	r3, #75	; 0x4b
 800b76e:	b29b      	uxth	r3, r3
 800b770:	2205      	movs	r2, #5
 800b772:	4619      	mov	r1, r3
 800b774:	f7f6 fac4 	bl	8001d00 <BSP_LCD_FillCircle>
		for (int j = 0; j < DIM; j++){
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	3301      	adds	r3, #1
 800b77c:	603b      	str	r3, [r7, #0]
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	2b07      	cmp	r3, #7
 800b782:	f77f af3e 	ble.w	800b602 <LCDBoardUpdate+0x12>
	for (int i = 0; i < DIM; i++){
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	3301      	adds	r3, #1
 800b78a:	607b      	str	r3, [r7, #4]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2b07      	cmp	r3, #7
 800b790:	f77f af34 	ble.w	800b5fc <LCDBoardUpdate+0xc>
			}
		}
	}
}
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	20000338 	.word	0x20000338
 800b7a0:	20000070 	.word	0x20000070
 800b7a4:	2000006c 	.word	0x2000006c
 800b7a8:	20000074 	.word	0x20000074
 800b7ac:	20000078 	.word	0x20000078

0800b7b0 <readRules>:
		putCircle(cX, cY);
	}
}
*/

void readRules(){
 800b7b0:	b5b0      	push	{r4, r5, r7, lr}
 800b7b2:	b0b2      	sub	sp, #200	; 0xc8
 800b7b4:	af00      	add	r7, sp, #0

    LCD_Config2();
 800b7b6:	f7ff f8a3 	bl	800a900 <LCD_Config2>

    char stringRules[200];
    sprintf(stringRules, "RULES");
 800b7ba:	463b      	mov	r3, r7
 800b7bc:	4a57      	ldr	r2, [pc, #348]	; (800b91c <readRules+0x16c>)
 800b7be:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b7c2:	6018      	str	r0, [r3, #0]
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	8019      	strh	r1, [r3, #0]
    BSP_LCD_SetFont(&Font24);
 800b7c8:	4855      	ldr	r0, [pc, #340]	; (800b920 <readRules+0x170>)
 800b7ca:	f7f5 fedf 	bl	800158c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(15,100 , (uint8_t *)stringRules, CENTER_MODE);
 800b7ce:	463a      	mov	r2, r7
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	2164      	movs	r1, #100	; 0x64
 800b7d4:	200f      	movs	r0, #15
 800b7d6:	f7f6 f805 	bl	80017e4 <BSP_LCD_DisplayStringAt>
    sprintf(stringRules, "Reversi is a strategy board game for two players,");
 800b7da:	463b      	mov	r3, r7
 800b7dc:	4a51      	ldr	r2, [pc, #324]	; (800b924 <readRules+0x174>)
 800b7de:	461c      	mov	r4, r3
 800b7e0:	4615      	mov	r5, r2
 800b7e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7ee:	682b      	ldr	r3, [r5, #0]
 800b7f0:	8023      	strh	r3, [r4, #0]
    BSP_LCD_SetFont(&Font12);
 800b7f2:	484d      	ldr	r0, [pc, #308]	; (800b928 <readRules+0x178>)
 800b7f4:	f7f5 feca 	bl	800158c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(8,180 , (uint8_t *)stringRules, LEFT_MODE);
 800b7f8:	463a      	mov	r2, r7
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	21b4      	movs	r1, #180	; 0xb4
 800b7fe:	2008      	movs	r0, #8
 800b800:	f7f5 fff0 	bl	80017e4 <BSP_LCD_DisplayStringAt>
    sprintf(stringRules, "played on an 8 x 8 uncheckered board.");
 800b804:	463b      	mov	r3, r7
 800b806:	4a49      	ldr	r2, [pc, #292]	; (800b92c <readRules+0x17c>)
 800b808:	461c      	mov	r4, r3
 800b80a:	4615      	mov	r5, r2
 800b80c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b80e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b814:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b818:	6020      	str	r0, [r4, #0]
 800b81a:	3404      	adds	r4, #4
 800b81c:	8021      	strh	r1, [r4, #0]
    BSP_LCD_SetFont(&Font12);
 800b81e:	4842      	ldr	r0, [pc, #264]	; (800b928 <readRules+0x178>)
 800b820:	f7f5 feb4 	bl	800158c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(8,200 , (uint8_t *)stringRules, LEFT_MODE);
 800b824:	463a      	mov	r2, r7
 800b826:	2303      	movs	r3, #3
 800b828:	21c8      	movs	r1, #200	; 0xc8
 800b82a:	2008      	movs	r0, #8
 800b82c:	f7f5 ffda 	bl	80017e4 <BSP_LCD_DisplayStringAt>
    sprintf(stringRules, "There are sixty-four identical game pieces called disks (often spelled discs),");
 800b830:	463b      	mov	r3, r7
 800b832:	4a3f      	ldr	r2, [pc, #252]	; (800b930 <readRules+0x180>)
 800b834:	4618      	mov	r0, r3
 800b836:	4611      	mov	r1, r2
 800b838:	234f      	movs	r3, #79	; 0x4f
 800b83a:	461a      	mov	r2, r3
 800b83c:	f000 fcd2 	bl	800c1e4 <memcpy>
    BSP_LCD_SetFont(&Font12);
 800b840:	4839      	ldr	r0, [pc, #228]	; (800b928 <readRules+0x178>)
 800b842:	f7f5 fea3 	bl	800158c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(8,220 , (uint8_t *)stringRules, LEFT_MODE);
 800b846:	463a      	mov	r2, r7
 800b848:	2303      	movs	r3, #3
 800b84a:	21dc      	movs	r1, #220	; 0xdc
 800b84c:	2008      	movs	r0, #8
 800b84e:	f7f5 ffc9 	bl	80017e4 <BSP_LCD_DisplayStringAt>
    sprintf(stringRules, "which are light on one side and dark on the other.");
 800b852:	463b      	mov	r3, r7
 800b854:	4a37      	ldr	r2, [pc, #220]	; (800b934 <readRules+0x184>)
 800b856:	461c      	mov	r4, r3
 800b858:	4615      	mov	r5, r2
 800b85a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b85c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b85e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b866:	682b      	ldr	r3, [r5, #0]
 800b868:	461a      	mov	r2, r3
 800b86a:	8022      	strh	r2, [r4, #0]
 800b86c:	3402      	adds	r4, #2
 800b86e:	0c1b      	lsrs	r3, r3, #16
 800b870:	7023      	strb	r3, [r4, #0]
    BSP_LCD_SetFont(&Font12);
 800b872:	482d      	ldr	r0, [pc, #180]	; (800b928 <readRules+0x178>)
 800b874:	f7f5 fe8a 	bl	800158c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(8,240 , (uint8_t *)stringRules, LEFT_MODE);
 800b878:	463a      	mov	r2, r7
 800b87a:	2303      	movs	r3, #3
 800b87c:	21f0      	movs	r1, #240	; 0xf0
 800b87e:	2008      	movs	r0, #8
 800b880:	f7f5 ffb0 	bl	80017e4 <BSP_LCD_DisplayStringAt>
    sprintf(stringRules, "Players take turns placing disks on the board with their assigned color facing up.");
 800b884:	463b      	mov	r3, r7
 800b886:	4a2c      	ldr	r2, [pc, #176]	; (800b938 <readRules+0x188>)
 800b888:	4618      	mov	r0, r3
 800b88a:	4611      	mov	r1, r2
 800b88c:	2353      	movs	r3, #83	; 0x53
 800b88e:	461a      	mov	r2, r3
 800b890:	f000 fca8 	bl	800c1e4 <memcpy>
    BSP_LCD_SetFont(&Font12);
 800b894:	4824      	ldr	r0, [pc, #144]	; (800b928 <readRules+0x178>)
 800b896:	f7f5 fe79 	bl	800158c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(8,260 , (uint8_t *)stringRules, LEFT_MODE);
 800b89a:	463a      	mov	r2, r7
 800b89c:	2303      	movs	r3, #3
 800b89e:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b8a2:	2008      	movs	r0, #8
 800b8a4:	f7f5 ff9e 	bl	80017e4 <BSP_LCD_DisplayStringAt>
    sprintf(stringRules, "During a play, any disks of the opponent's color that are in a straight line and bounded by the disk");
 800b8a8:	463b      	mov	r3, r7
 800b8aa:	4a24      	ldr	r2, [pc, #144]	; (800b93c <readRules+0x18c>)
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	2365      	movs	r3, #101	; 0x65
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	f000 fc96 	bl	800c1e4 <memcpy>
    BSP_LCD_SetFont(&Font12);
 800b8b8:	481b      	ldr	r0, [pc, #108]	; (800b928 <readRules+0x178>)
 800b8ba:	f7f5 fe67 	bl	800158c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(8,280 , (uint8_t *)stringRules, LEFT_MODE);
 800b8be:	463a      	mov	r2, r7
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	f44f 718c 	mov.w	r1, #280	; 0x118
 800b8c6:	2008      	movs	r0, #8
 800b8c8:	f7f5 ff8c 	bl	80017e4 <BSP_LCD_DisplayStringAt>
    sprintf(stringRules, "just placed and another disk of the current player's color are turned over to the current player's color.");
 800b8cc:	463b      	mov	r3, r7
 800b8ce:	4a1c      	ldr	r2, [pc, #112]	; (800b940 <readRules+0x190>)
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	236a      	movs	r3, #106	; 0x6a
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	f000 fc84 	bl	800c1e4 <memcpy>
    BSP_LCD_SetFont(&Font12);
 800b8dc:	4812      	ldr	r0, [pc, #72]	; (800b928 <readRules+0x178>)
 800b8de:	f7f5 fe55 	bl	800158c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(8,300 , (uint8_t *)stringRules, LEFT_MODE);
 800b8e2:	463a      	mov	r2, r7
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b8ea:	2008      	movs	r0, #8
 800b8ec:	f7f5 ff7a 	bl	80017e4 <BSP_LCD_DisplayStringAt>
    sprintf(stringRules, "The object of the game is to have the majority of disks turned to display your color when the last playable empty square is filled.");
 800b8f0:	463b      	mov	r3, r7
 800b8f2:	4a14      	ldr	r2, [pc, #80]	; (800b944 <readRules+0x194>)
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	2384      	movs	r3, #132	; 0x84
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	f000 fc72 	bl	800c1e4 <memcpy>
    BSP_LCD_SetFont(&Font12);
 800b900:	4809      	ldr	r0, [pc, #36]	; (800b928 <readRules+0x178>)
 800b902:	f7f5 fe43 	bl	800158c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(8,320 , (uint8_t *)stringRules, LEFT_MODE);
 800b906:	463a      	mov	r2, r7
 800b908:	2303      	movs	r3, #3
 800b90a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b90e:	2008      	movs	r0, #8
 800b910:	f7f5 ff68 	bl	80017e4 <BSP_LCD_DisplayStringAt>
}
 800b914:	bf00      	nop
 800b916:	37c8      	adds	r7, #200	; 0xc8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bdb0      	pop	{r4, r5, r7, pc}
 800b91c:	0800cae0 	.word	0x0800cae0
 800b920:	20000038 	.word	0x20000038
 800b924:	0800cae8 	.word	0x0800cae8
 800b928:	20000048 	.word	0x20000048
 800b92c:	0800cb1c 	.word	0x0800cb1c
 800b930:	0800cb44 	.word	0x0800cb44
 800b934:	0800cb94 	.word	0x0800cb94
 800b938:	0800cbc8 	.word	0x0800cbc8
 800b93c:	0800cc1c 	.word	0x0800cc1c
 800b940:	0800cc84 	.word	0x0800cc84
 800b944:	0800ccf0 	.word	0x0800ccf0

0800b948 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	BSP_LED_Toggle(LED_RED);
 800b94c:	2000      	movs	r0, #0
 800b94e:	f7f5 fa05 	bl	8000d5c <BSP_LED_Toggle>
	HAL_Delay(500);
 800b952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b956:	f7f7 f817 	bl	8002988 <HAL_Delay>
	/* USER CODE END Error_Handler_Debug */
}
 800b95a:	bf00      	nop
 800b95c:	bd80      	pop	{r7, pc}
	...

0800b960 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	4603      	mov	r3, r0
 800b968:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b96a:	4b0b      	ldr	r3, [pc, #44]	; (800b998 <SD_CheckStatus+0x38>)
 800b96c:	2201      	movs	r2, #1
 800b96e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b970:	f7fe f990 	bl	8009c94 <BSP_SD_GetCardState>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d107      	bne.n	800b98a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b97a:	4b07      	ldr	r3, [pc, #28]	; (800b998 <SD_CheckStatus+0x38>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f023 0301 	bic.w	r3, r3, #1
 800b984:	b2da      	uxtb	r2, r3
 800b986:	4b04      	ldr	r3, [pc, #16]	; (800b998 <SD_CheckStatus+0x38>)
 800b988:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b98a:	4b03      	ldr	r3, [pc, #12]	; (800b998 <SD_CheckStatus+0x38>)
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	b2db      	uxtb	r3, r3
}
 800b990:	4618      	mov	r0, r3
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	2000007c 	.word	0x2000007c

0800b99c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800b9a6:	4b0b      	ldr	r3, [pc, #44]	; (800b9d4 <SD_initialize+0x38>)
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b9ac:	f7fe f910 	bl	8009bd0 <BSP_SD_Init>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d107      	bne.n	800b9c6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b9b6:	79fb      	ldrb	r3, [r7, #7]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7ff ffd1 	bl	800b960 <SD_CheckStatus>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	4b04      	ldr	r3, [pc, #16]	; (800b9d4 <SD_initialize+0x38>)
 800b9c4:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800b9c6:	4b03      	ldr	r3, [pc, #12]	; (800b9d4 <SD_initialize+0x38>)
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	b2db      	uxtb	r3, r3
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	2000007c 	.word	0x2000007c

0800b9d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	4603      	mov	r3, r0
 800b9e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b9e2:	79fb      	ldrb	r3, [r7, #7]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7ff ffbb 	bl	800b960 <SD_CheckStatus>
 800b9ea:	4603      	mov	r3, r0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60b9      	str	r1, [r7, #8]
 800b9fc:	607a      	str	r2, [r7, #4]
 800b9fe:	603b      	str	r3, [r7, #0]
 800ba00:	4603      	mov	r3, r0
 800ba02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ba08:	f04f 33ff 	mov.w	r3, #4294967295
 800ba0c:	683a      	ldr	r2, [r7, #0]
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	68b8      	ldr	r0, [r7, #8]
 800ba12:	f7fe f903 	bl	8009c1c <BSP_SD_ReadBlocks>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d107      	bne.n	800ba2c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ba1c:	bf00      	nop
 800ba1e:	f7fe f939 	bl	8009c94 <BSP_SD_GetCardState>
 800ba22:	4603      	mov	r3, r0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1fa      	bne.n	800ba1e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3718      	adds	r7, #24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b086      	sub	sp, #24
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
 800ba40:	603b      	str	r3, [r7, #0]
 800ba42:	4603      	mov	r3, r0
 800ba44:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ba4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	6879      	ldr	r1, [r7, #4]
 800ba52:	68b8      	ldr	r0, [r7, #8]
 800ba54:	f7fe f900 	bl	8009c58 <BSP_SD_WriteBlocks>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d107      	bne.n	800ba6e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ba5e:	bf00      	nop
 800ba60:	f7fe f918 	bl	8009c94 <BSP_SD_GetCardState>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1fa      	bne.n	800ba60 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ba6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b08c      	sub	sp, #48	; 0x30
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	4603      	mov	r3, r0
 800ba80:	603a      	str	r2, [r7, #0]
 800ba82:	71fb      	strb	r3, [r7, #7]
 800ba84:	460b      	mov	r3, r1
 800ba86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ba8e:	4b25      	ldr	r3, [pc, #148]	; (800bb24 <SD_ioctl+0xac>)
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <SD_ioctl+0x28>
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e03c      	b.n	800bb1a <SD_ioctl+0xa2>

  switch (cmd)
 800baa0:	79bb      	ldrb	r3, [r7, #6]
 800baa2:	2b03      	cmp	r3, #3
 800baa4:	d834      	bhi.n	800bb10 <SD_ioctl+0x98>
 800baa6:	a201      	add	r2, pc, #4	; (adr r2, 800baac <SD_ioctl+0x34>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800babd 	.word	0x0800babd
 800bab0:	0800bac5 	.word	0x0800bac5
 800bab4:	0800badd 	.word	0x0800badd
 800bab8:	0800baf7 	.word	0x0800baf7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800babc:	2300      	movs	r3, #0
 800babe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bac2:	e028      	b.n	800bb16 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bac4:	f107 030c 	add.w	r3, r7, #12
 800bac8:	4618      	mov	r0, r3
 800baca:	f7fe f8f3 	bl	8009cb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bada:	e01c      	b.n	800bb16 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800badc:	f107 030c 	add.w	r3, r7, #12
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7fe f8e7 	bl	8009cb4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae8:	b29a      	uxth	r2, r3
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800baf4:	e00f      	b.n	800bb16 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800baf6:	f107 030c 	add.w	r3, r7, #12
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fe f8da 	bl	8009cb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	0a5a      	lsrs	r2, r3, #9
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb0e:	e002      	b.n	800bb16 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bb10:	2304      	movs	r3, #4
 800bb12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bb16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3730      	adds	r7, #48	; 0x30
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	2000007c 	.word	0x2000007c

0800bb28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800bb2e:	4b0f      	ldr	r3, [pc, #60]	; (800bb6c <HAL_MspInit+0x44>)
 800bb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb32:	4a0e      	ldr	r2, [pc, #56]	; (800bb6c <HAL_MspInit+0x44>)
 800bb34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb38:	6413      	str	r3, [r2, #64]	; 0x40
 800bb3a:	4b0c      	ldr	r3, [pc, #48]	; (800bb6c <HAL_MspInit+0x44>)
 800bb3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb42:	607b      	str	r3, [r7, #4]
 800bb44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bb46:	4b09      	ldr	r3, [pc, #36]	; (800bb6c <HAL_MspInit+0x44>)
 800bb48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb4a:	4a08      	ldr	r2, [pc, #32]	; (800bb6c <HAL_MspInit+0x44>)
 800bb4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb50:	6453      	str	r3, [r2, #68]	; 0x44
 800bb52:	4b06      	ldr	r3, [pc, #24]	; (800bb6c <HAL_MspInit+0x44>)
 800bb54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb5a:	603b      	str	r3, [r7, #0]
 800bb5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bb5e:	bf00      	nop
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	40023800 	.word	0x40023800

0800bb70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a0a      	ldr	r2, [pc, #40]	; (800bba8 <HAL_ADC_MspInit+0x38>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d10b      	bne.n	800bb9a <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800bb82:	4b0a      	ldr	r3, [pc, #40]	; (800bbac <HAL_ADC_MspInit+0x3c>)
 800bb84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb86:	4a09      	ldr	r2, [pc, #36]	; (800bbac <HAL_ADC_MspInit+0x3c>)
 800bb88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb8c:	6453      	str	r3, [r2, #68]	; 0x44
 800bb8e:	4b07      	ldr	r3, [pc, #28]	; (800bbac <HAL_ADC_MspInit+0x3c>)
 800bb90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800bb9a:	bf00      	nop
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	40012000 	.word	0x40012000
 800bbac:	40023800 	.word	0x40023800

0800bbb0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a0a      	ldr	r2, [pc, #40]	; (800bbe8 <HAL_DMA2D_MspInit+0x38>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d10b      	bne.n	800bbda <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800bbc2:	4b0a      	ldr	r3, [pc, #40]	; (800bbec <HAL_DMA2D_MspInit+0x3c>)
 800bbc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc6:	4a09      	ldr	r2, [pc, #36]	; (800bbec <HAL_DMA2D_MspInit+0x3c>)
 800bbc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbcc:	6313      	str	r3, [r2, #48]	; 0x30
 800bbce:	4b07      	ldr	r3, [pc, #28]	; (800bbec <HAL_DMA2D_MspInit+0x3c>)
 800bbd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbd6:	60fb      	str	r3, [r7, #12]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800bbda:	bf00      	nop
 800bbdc:	3714      	adds	r7, #20
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	4002b000 	.word	0x4002b000
 800bbec:	40023800 	.word	0x40023800

0800bbf0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08a      	sub	sp, #40	; 0x28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbf8:	f107 0314 	add.w	r3, r7, #20
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	601a      	str	r2, [r3, #0]
 800bc00:	605a      	str	r2, [r3, #4]
 800bc02:	609a      	str	r2, [r3, #8]
 800bc04:	60da      	str	r2, [r3, #12]
 800bc06:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a17      	ldr	r2, [pc, #92]	; (800bc6c <HAL_DSI_MspInit+0x7c>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d127      	bne.n	800bc62 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800bc12:	4b17      	ldr	r3, [pc, #92]	; (800bc70 <HAL_DSI_MspInit+0x80>)
 800bc14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc16:	4a16      	ldr	r2, [pc, #88]	; (800bc70 <HAL_DSI_MspInit+0x80>)
 800bc18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc1c:	6453      	str	r3, [r2, #68]	; 0x44
 800bc1e:	4b14      	ldr	r3, [pc, #80]	; (800bc70 <HAL_DSI_MspInit+0x80>)
 800bc20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc26:	613b      	str	r3, [r7, #16]
 800bc28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800bc2a:	4b11      	ldr	r3, [pc, #68]	; (800bc70 <HAL_DSI_MspInit+0x80>)
 800bc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc2e:	4a10      	ldr	r2, [pc, #64]	; (800bc70 <HAL_DSI_MspInit+0x80>)
 800bc30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc34:	6313      	str	r3, [r2, #48]	; 0x30
 800bc36:	4b0e      	ldr	r3, [pc, #56]	; (800bc70 <HAL_DSI_MspInit+0x80>)
 800bc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800bc42:	2304      	movs	r3, #4
 800bc44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc46:	2302      	movs	r3, #2
 800bc48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800bc52:	230d      	movs	r3, #13
 800bc54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800bc56:	f107 0314 	add.w	r3, r7, #20
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	4805      	ldr	r0, [pc, #20]	; (800bc74 <HAL_DSI_MspInit+0x84>)
 800bc5e:	f7f9 f85f 	bl	8004d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800bc62:	bf00      	nop
 800bc64:	3728      	adds	r7, #40	; 0x28
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	40016c00 	.word	0x40016c00
 800bc70:	40023800 	.word	0x40023800
 800bc74:	40022400 	.word	0x40022400

0800bc78 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a08      	ldr	r2, [pc, #32]	; (800bca8 <HAL_DSI_MspDeInit+0x30>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d109      	bne.n	800bc9e <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800bc8a:	4b08      	ldr	r3, [pc, #32]	; (800bcac <HAL_DSI_MspDeInit+0x34>)
 800bc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8e:	4a07      	ldr	r2, [pc, #28]	; (800bcac <HAL_DSI_MspDeInit+0x34>)
 800bc90:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800bc94:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 800bc96:	2104      	movs	r1, #4
 800bc98:	4805      	ldr	r0, [pc, #20]	; (800bcb0 <HAL_DSI_MspDeInit+0x38>)
 800bc9a:	f7f9 f9eb 	bl	8005074 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800bc9e:	bf00      	nop
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	40016c00 	.word	0x40016c00
 800bcac:	40023800 	.word	0x40023800
 800bcb0:	40022400 	.word	0x40022400

0800bcb4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a0a      	ldr	r2, [pc, #40]	; (800bcec <HAL_LTDC_MspInit+0x38>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d10b      	bne.n	800bcde <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800bcc6:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <HAL_LTDC_MspInit+0x3c>)
 800bcc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcca:	4a09      	ldr	r2, [pc, #36]	; (800bcf0 <HAL_LTDC_MspInit+0x3c>)
 800bccc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bcd0:	6453      	str	r3, [r2, #68]	; 0x44
 800bcd2:	4b07      	ldr	r3, [pc, #28]	; (800bcf0 <HAL_LTDC_MspInit+0x3c>)
 800bcd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bcda:	60fb      	str	r3, [r7, #12]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800bcde:	bf00      	nop
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	40016800 	.word	0x40016800
 800bcf0:	40023800 	.word	0x40023800

0800bcf4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b08c      	sub	sp, #48	; 0x30
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcfc:	f107 031c 	add.w	r3, r7, #28
 800bd00:	2200      	movs	r2, #0
 800bd02:	601a      	str	r2, [r3, #0]
 800bd04:	605a      	str	r2, [r3, #4]
 800bd06:	609a      	str	r2, [r3, #8]
 800bd08:	60da      	str	r2, [r3, #12]
 800bd0a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a33      	ldr	r2, [pc, #204]	; (800bde0 <HAL_SD_MspInit+0xec>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d160      	bne.n	800bdd8 <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800bd16:	4b33      	ldr	r3, [pc, #204]	; (800bde4 <HAL_SD_MspInit+0xf0>)
 800bd18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd1a:	4a32      	ldr	r2, [pc, #200]	; (800bde4 <HAL_SD_MspInit+0xf0>)
 800bd1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd20:	6453      	str	r3, [r2, #68]	; 0x44
 800bd22:	4b30      	ldr	r3, [pc, #192]	; (800bde4 <HAL_SD_MspInit+0xf0>)
 800bd24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd2a:	61bb      	str	r3, [r7, #24]
 800bd2c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd2e:	4b2d      	ldr	r3, [pc, #180]	; (800bde4 <HAL_SD_MspInit+0xf0>)
 800bd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd32:	4a2c      	ldr	r2, [pc, #176]	; (800bde4 <HAL_SD_MspInit+0xf0>)
 800bd34:	f043 0302 	orr.w	r3, r3, #2
 800bd38:	6313      	str	r3, [r2, #48]	; 0x30
 800bd3a:	4b2a      	ldr	r3, [pc, #168]	; (800bde4 <HAL_SD_MspInit+0xf0>)
 800bd3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd3e:	f003 0302 	and.w	r3, r3, #2
 800bd42:	617b      	str	r3, [r7, #20]
 800bd44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800bd46:	4b27      	ldr	r3, [pc, #156]	; (800bde4 <HAL_SD_MspInit+0xf0>)
 800bd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4a:	4a26      	ldr	r2, [pc, #152]	; (800bde4 <HAL_SD_MspInit+0xf0>)
 800bd4c:	f043 0308 	orr.w	r3, r3, #8
 800bd50:	6313      	str	r3, [r2, #48]	; 0x30
 800bd52:	4b24      	ldr	r3, [pc, #144]	; (800bde4 <HAL_SD_MspInit+0xf0>)
 800bd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd56:	f003 0308 	and.w	r3, r3, #8
 800bd5a:	613b      	str	r3, [r7, #16]
 800bd5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bd5e:	4b21      	ldr	r3, [pc, #132]	; (800bde4 <HAL_SD_MspInit+0xf0>)
 800bd60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd62:	4a20      	ldr	r2, [pc, #128]	; (800bde4 <HAL_SD_MspInit+0xf0>)
 800bd64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd68:	6313      	str	r3, [r2, #48]	; 0x30
 800bd6a:	4b1e      	ldr	r3, [pc, #120]	; (800bde4 <HAL_SD_MspInit+0xf0>)
 800bd6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800bd76:	2318      	movs	r3, #24
 800bd78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd82:	2303      	movs	r3, #3
 800bd84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800bd86:	230a      	movs	r3, #10
 800bd88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd8a:	f107 031c 	add.w	r3, r7, #28
 800bd8e:	4619      	mov	r1, r3
 800bd90:	4815      	ldr	r0, [pc, #84]	; (800bde8 <HAL_SD_MspInit+0xf4>)
 800bd92:	f7f8 ffc5 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800bd96:	23c0      	movs	r3, #192	; 0xc0
 800bd98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd9a:	2302      	movs	r3, #2
 800bd9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bda2:	2303      	movs	r3, #3
 800bda4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800bda6:	230b      	movs	r3, #11
 800bda8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bdaa:	f107 031c 	add.w	r3, r7, #28
 800bdae:	4619      	mov	r1, r3
 800bdb0:	480e      	ldr	r0, [pc, #56]	; (800bdec <HAL_SD_MspInit+0xf8>)
 800bdb2:	f7f8 ffb5 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800bdb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800bdba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800bdc8:	230b      	movs	r3, #11
 800bdca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bdcc:	f107 031c 	add.w	r3, r7, #28
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4807      	ldr	r0, [pc, #28]	; (800bdf0 <HAL_SD_MspInit+0xfc>)
 800bdd4:	f7f8 ffa4 	bl	8004d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800bdd8:	bf00      	nop
 800bdda:	3730      	adds	r7, #48	; 0x30
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	40011c00 	.word	0x40011c00
 800bde4:	40023800 	.word	0x40023800
 800bde8:	40020400 	.word	0x40020400
 800bdec:	40020c00 	.word	0x40020c00
 800bdf0:	40021800 	.word	0x40021800

0800bdf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a1a      	ldr	r2, [pc, #104]	; (800be6c <HAL_TIM_Base_MspInit+0x78>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d114      	bne.n	800be30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800be06:	4b1a      	ldr	r3, [pc, #104]	; (800be70 <HAL_TIM_Base_MspInit+0x7c>)
 800be08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0a:	4a19      	ldr	r2, [pc, #100]	; (800be70 <HAL_TIM_Base_MspInit+0x7c>)
 800be0c:	f043 0310 	orr.w	r3, r3, #16
 800be10:	6413      	str	r3, [r2, #64]	; 0x40
 800be12:	4b17      	ldr	r3, [pc, #92]	; (800be70 <HAL_TIM_Base_MspInit+0x7c>)
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	f003 0310 	and.w	r3, r3, #16
 800be1a:	60fb      	str	r3, [r7, #12]
 800be1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800be1e:	2200      	movs	r2, #0
 800be20:	2100      	movs	r1, #0
 800be22:	2036      	movs	r0, #54	; 0x36
 800be24:	f7f7 fa71 	bl	800330a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800be28:	2036      	movs	r0, #54	; 0x36
 800be2a:	f7f7 fa8a 	bl	8003342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800be2e:	e018      	b.n	800be62 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a0f      	ldr	r2, [pc, #60]	; (800be74 <HAL_TIM_Base_MspInit+0x80>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d113      	bne.n	800be62 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800be3a:	4b0d      	ldr	r3, [pc, #52]	; (800be70 <HAL_TIM_Base_MspInit+0x7c>)
 800be3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3e:	4a0c      	ldr	r2, [pc, #48]	; (800be70 <HAL_TIM_Base_MspInit+0x7c>)
 800be40:	f043 0320 	orr.w	r3, r3, #32
 800be44:	6413      	str	r3, [r2, #64]	; 0x40
 800be46:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <HAL_TIM_Base_MspInit+0x7c>)
 800be48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4a:	f003 0320 	and.w	r3, r3, #32
 800be4e:	60bb      	str	r3, [r7, #8]
 800be50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800be52:	2200      	movs	r2, #0
 800be54:	2100      	movs	r1, #0
 800be56:	2037      	movs	r0, #55	; 0x37
 800be58:	f7f7 fa57 	bl	800330a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800be5c:	2037      	movs	r0, #55	; 0x37
 800be5e:	f7f7 fa70 	bl	8003342 <HAL_NVIC_EnableIRQ>
}
 800be62:	bf00      	nop
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	40001000 	.word	0x40001000
 800be70:	40023800 	.word	0x40023800
 800be74:	40001400 	.word	0x40001400

0800be78 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800be7e:	1d3b      	adds	r3, r7, #4
 800be80:	2200      	movs	r2, #0
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	605a      	str	r2, [r3, #4]
 800be86:	609a      	str	r2, [r3, #8]
 800be88:	60da      	str	r2, [r3, #12]
 800be8a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800be8c:	4b43      	ldr	r3, [pc, #268]	; (800bf9c <HAL_FMC_MspInit+0x124>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d17e      	bne.n	800bf92 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800be94:	4b41      	ldr	r3, [pc, #260]	; (800bf9c <HAL_FMC_MspInit+0x124>)
 800be96:	2201      	movs	r2, #1
 800be98:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800be9a:	4b41      	ldr	r3, [pc, #260]	; (800bfa0 <HAL_FMC_MspInit+0x128>)
 800be9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9e:	4a40      	ldr	r2, [pc, #256]	; (800bfa0 <HAL_FMC_MspInit+0x128>)
 800bea0:	f043 0301 	orr.w	r3, r3, #1
 800bea4:	6393      	str	r3, [r2, #56]	; 0x38
 800bea6:	4b3e      	ldr	r3, [pc, #248]	; (800bfa0 <HAL_FMC_MspInit+0x128>)
 800bea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	603b      	str	r3, [r7, #0]
 800beb0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 800beb2:	f64f 7383 	movw	r3, #65411	; 0xff83
 800beb6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beb8:	2302      	movs	r3, #2
 800beba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bebc:	2300      	movs	r3, #0
 800bebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bec0:	2303      	movs	r3, #3
 800bec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bec4:	230c      	movs	r3, #12
 800bec6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bec8:	1d3b      	adds	r3, r7, #4
 800beca:	4619      	mov	r1, r3
 800becc:	4835      	ldr	r0, [pc, #212]	; (800bfa4 <HAL_FMC_MspInit+0x12c>)
 800bece:	f7f8 ff27 	bl	8004d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800bed2:	2360      	movs	r3, #96	; 0x60
 800bed4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bed6:	2302      	movs	r3, #2
 800bed8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beda:	2300      	movs	r3, #0
 800bedc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bede:	2303      	movs	r3, #3
 800bee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bee2:	230c      	movs	r3, #12
 800bee4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bee6:	1d3b      	adds	r3, r7, #4
 800bee8:	4619      	mov	r1, r3
 800beea:	482f      	ldr	r0, [pc, #188]	; (800bfa8 <HAL_FMC_MspInit+0x130>)
 800beec:	f7f8 ff18 	bl	8004d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 800bef0:	f248 1337 	movw	r3, #33079	; 0x8137
 800bef4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bef6:	2302      	movs	r3, #2
 800bef8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800befa:	2300      	movs	r3, #0
 800befc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800befe:	2303      	movs	r3, #3
 800bf00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf02:	230c      	movs	r3, #12
 800bf04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bf06:	1d3b      	adds	r3, r7, #4
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4828      	ldr	r0, [pc, #160]	; (800bfac <HAL_FMC_MspInit+0x134>)
 800bf0c:	f7f8 ff08 	bl	8004d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800bf10:	f24c 7303 	movw	r3, #50947	; 0xc703
 800bf14:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf16:	2302      	movs	r3, #2
 800bf18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf22:	230c      	movs	r3, #12
 800bf24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bf26:	1d3b      	adds	r3, r7, #4
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4821      	ldr	r0, [pc, #132]	; (800bfb0 <HAL_FMC_MspInit+0x138>)
 800bf2c:	f7f8 fef8 	bl	8004d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 800bf30:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800bf34:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf36:	2302      	movs	r3, #2
 800bf38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf42:	230c      	movs	r3, #12
 800bf44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800bf46:	1d3b      	adds	r3, r7, #4
 800bf48:	4619      	mov	r1, r3
 800bf4a:	481a      	ldr	r0, [pc, #104]	; (800bfb4 <HAL_FMC_MspInit+0x13c>)
 800bf4c:	f7f8 fee8 	bl	8004d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800bf50:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800bf54:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf56:	2302      	movs	r3, #2
 800bf58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf62:	230c      	movs	r3, #12
 800bf64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bf66:	1d3b      	adds	r3, r7, #4
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4813      	ldr	r0, [pc, #76]	; (800bfb8 <HAL_FMC_MspInit+0x140>)
 800bf6c:	f7f8 fed8 	bl	8004d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800bf70:	f64f 7320 	movw	r3, #65312	; 0xff20
 800bf74:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf76:	2302      	movs	r3, #2
 800bf78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf82:	230c      	movs	r3, #12
 800bf84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bf86:	1d3b      	adds	r3, r7, #4
 800bf88:	4619      	mov	r1, r3
 800bf8a:	480c      	ldr	r0, [pc, #48]	; (800bfbc <HAL_FMC_MspInit+0x144>)
 800bf8c:	f7f8 fec8 	bl	8004d20 <HAL_GPIO_Init>
 800bf90:	e000      	b.n	800bf94 <HAL_FMC_MspInit+0x11c>
    return;
 800bf92:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800bf94:	3718      	adds	r7, #24
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	20000378 	.word	0x20000378
 800bfa0:	40023800 	.word	0x40023800
 800bfa4:	40021000 	.word	0x40021000
 800bfa8:	40020400 	.word	0x40020400
 800bfac:	40021800 	.word	0x40021800
 800bfb0:	40020c00 	.word	0x40020c00
 800bfb4:	40022000 	.word	0x40022000
 800bfb8:	40021400 	.word	0x40021400
 800bfbc:	40021c00 	.word	0x40021c00

0800bfc0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800bfc8:	f7ff ff56 	bl	800be78 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800bfcc:	bf00      	nop
 800bfce:	3708      	adds	r7, #8
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800bfd8:	bf00      	nop
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bfe6:	e7fe      	b.n	800bfe6 <HardFault_Handler+0x4>

0800bfe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bfec:	e7fe      	b.n	800bfec <MemManage_Handler+0x4>

0800bfee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bfee:	b480      	push	{r7}
 800bff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bff2:	e7fe      	b.n	800bff2 <BusFault_Handler+0x4>

0800bff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bff4:	b480      	push	{r7}
 800bff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bff8:	e7fe      	b.n	800bff8 <UsageFault_Handler+0x4>

0800bffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bffa:	b480      	push	{r7}
 800bffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bffe:	bf00      	nop
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c008:	b480      	push	{r7}
 800c00a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c00c:	bf00      	nop
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr

0800c016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c016:	b480      	push	{r7}
 800c018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c01a:	bf00      	nop
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c028:	f7f6 fc8e 	bl	8002948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c02c:	bf00      	nop
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800c034:	2001      	movs	r0, #1
 800c036:	f7f9 f973 	bl	8005320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800c03a:	bf00      	nop
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800c042:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c046:	f7f9 f96b 	bl	8005320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800c04a:	bf00      	nop
 800c04c:	bd80      	pop	{r7, pc}
	...

0800c050 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c054:	4802      	ldr	r0, [pc, #8]	; (800c060 <TIM6_DAC_IRQHandler+0x10>)
 800c056:	f7fc fc75 	bl	8008944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c05a:	bf00      	nop
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	20000adc 	.word	0x20000adc

0800c064 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800c068:	4802      	ldr	r0, [pc, #8]	; (800c074 <TIM7_IRQHandler+0x10>)
 800c06a:	f7fc fc6b 	bl	8008944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800c06e:	bf00      	nop
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	20000bb4 	.word	0x20000bb4

0800c078 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c080:	4b11      	ldr	r3, [pc, #68]	; (800c0c8 <_sbrk+0x50>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d102      	bne.n	800c08e <_sbrk+0x16>
		heap_end = &end;
 800c088:	4b0f      	ldr	r3, [pc, #60]	; (800c0c8 <_sbrk+0x50>)
 800c08a:	4a10      	ldr	r2, [pc, #64]	; (800c0cc <_sbrk+0x54>)
 800c08c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c08e:	4b0e      	ldr	r3, [pc, #56]	; (800c0c8 <_sbrk+0x50>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c094:	4b0c      	ldr	r3, [pc, #48]	; (800c0c8 <_sbrk+0x50>)
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4413      	add	r3, r2
 800c09c:	466a      	mov	r2, sp
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d907      	bls.n	800c0b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c0a2:	f000 f875 	bl	800c190 <__errno>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	230c      	movs	r3, #12
 800c0aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c0b0:	e006      	b.n	800c0c0 <_sbrk+0x48>
	}

	heap_end += incr;
 800c0b2:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <_sbrk+0x50>)
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	4a03      	ldr	r2, [pc, #12]	; (800c0c8 <_sbrk+0x50>)
 800c0bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c0be:	68fb      	ldr	r3, [r7, #12]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	2000037c 	.word	0x2000037c
 800c0cc:	20000bf8 	.word	0x20000bf8

0800c0d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c0d4:	4b15      	ldr	r3, [pc, #84]	; (800c12c <SystemInit+0x5c>)
 800c0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0da:	4a14      	ldr	r2, [pc, #80]	; (800c12c <SystemInit+0x5c>)
 800c0dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c0e4:	4b12      	ldr	r3, [pc, #72]	; (800c130 <SystemInit+0x60>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a11      	ldr	r2, [pc, #68]	; (800c130 <SystemInit+0x60>)
 800c0ea:	f043 0301 	orr.w	r3, r3, #1
 800c0ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c0f0:	4b0f      	ldr	r3, [pc, #60]	; (800c130 <SystemInit+0x60>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c0f6:	4b0e      	ldr	r3, [pc, #56]	; (800c130 <SystemInit+0x60>)
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	490d      	ldr	r1, [pc, #52]	; (800c130 <SystemInit+0x60>)
 800c0fc:	4b0d      	ldr	r3, [pc, #52]	; (800c134 <SystemInit+0x64>)
 800c0fe:	4013      	ands	r3, r2
 800c100:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c102:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <SystemInit+0x60>)
 800c104:	4a0c      	ldr	r2, [pc, #48]	; (800c138 <SystemInit+0x68>)
 800c106:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c108:	4b09      	ldr	r3, [pc, #36]	; (800c130 <SystemInit+0x60>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a08      	ldr	r2, [pc, #32]	; (800c130 <SystemInit+0x60>)
 800c10e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c112:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c114:	4b06      	ldr	r3, [pc, #24]	; (800c130 <SystemInit+0x60>)
 800c116:	2200      	movs	r2, #0
 800c118:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c11a:	4b04      	ldr	r3, [pc, #16]	; (800c12c <SystemInit+0x5c>)
 800c11c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c120:	609a      	str	r2, [r3, #8]
#endif
}
 800c122:	bf00      	nop
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	e000ed00 	.word	0xe000ed00
 800c130:	40023800 	.word	0x40023800
 800c134:	fef6ffff 	.word	0xfef6ffff
 800c138:	24003010 	.word	0x24003010

0800c13c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c13c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c174 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c140:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c142:	e003      	b.n	800c14c <LoopCopyDataInit>

0800c144 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c144:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c146:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c148:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c14a:	3104      	adds	r1, #4

0800c14c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c14c:	480b      	ldr	r0, [pc, #44]	; (800c17c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c14e:	4b0c      	ldr	r3, [pc, #48]	; (800c180 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c150:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c152:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c154:	d3f6      	bcc.n	800c144 <CopyDataInit>
  ldr  r2, =_sbss
 800c156:	4a0b      	ldr	r2, [pc, #44]	; (800c184 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c158:	e002      	b.n	800c160 <LoopFillZerobss>

0800c15a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c15a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c15c:	f842 3b04 	str.w	r3, [r2], #4

0800c160 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c160:	4b09      	ldr	r3, [pc, #36]	; (800c188 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c162:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c164:	d3f9      	bcc.n	800c15a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c166:	f7ff ffb3 	bl	800c0d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c16a:	f000 f817 	bl	800c19c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c16e:	f7fd fea3 	bl	8009eb8 <main>
  bx  lr    
 800c172:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c174:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800c178:	0800fe08 	.word	0x0800fe08
  ldr  r0, =_sdata
 800c17c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c180:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 800c184:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 800c188:	20000bf8 	.word	0x20000bf8

0800c18c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c18c:	e7fe      	b.n	800c18c <ADC_IRQHandler>
	...

0800c190 <__errno>:
 800c190:	4b01      	ldr	r3, [pc, #4]	; (800c198 <__errno+0x8>)
 800c192:	6818      	ldr	r0, [r3, #0]
 800c194:	4770      	bx	lr
 800c196:	bf00      	nop
 800c198:	20000084 	.word	0x20000084

0800c19c <__libc_init_array>:
 800c19c:	b570      	push	{r4, r5, r6, lr}
 800c19e:	4e0d      	ldr	r6, [pc, #52]	; (800c1d4 <__libc_init_array+0x38>)
 800c1a0:	4c0d      	ldr	r4, [pc, #52]	; (800c1d8 <__libc_init_array+0x3c>)
 800c1a2:	1ba4      	subs	r4, r4, r6
 800c1a4:	10a4      	asrs	r4, r4, #2
 800c1a6:	2500      	movs	r5, #0
 800c1a8:	42a5      	cmp	r5, r4
 800c1aa:	d109      	bne.n	800c1c0 <__libc_init_array+0x24>
 800c1ac:	4e0b      	ldr	r6, [pc, #44]	; (800c1dc <__libc_init_array+0x40>)
 800c1ae:	4c0c      	ldr	r4, [pc, #48]	; (800c1e0 <__libc_init_array+0x44>)
 800c1b0:	f000 fc28 	bl	800ca04 <_init>
 800c1b4:	1ba4      	subs	r4, r4, r6
 800c1b6:	10a4      	asrs	r4, r4, #2
 800c1b8:	2500      	movs	r5, #0
 800c1ba:	42a5      	cmp	r5, r4
 800c1bc:	d105      	bne.n	800c1ca <__libc_init_array+0x2e>
 800c1be:	bd70      	pop	{r4, r5, r6, pc}
 800c1c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1c4:	4798      	blx	r3
 800c1c6:	3501      	adds	r5, #1
 800c1c8:	e7ee      	b.n	800c1a8 <__libc_init_array+0xc>
 800c1ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1ce:	4798      	blx	r3
 800c1d0:	3501      	adds	r5, #1
 800c1d2:	e7f2      	b.n	800c1ba <__libc_init_array+0x1e>
 800c1d4:	0800fe00 	.word	0x0800fe00
 800c1d8:	0800fe00 	.word	0x0800fe00
 800c1dc:	0800fe00 	.word	0x0800fe00
 800c1e0:	0800fe04 	.word	0x0800fe04

0800c1e4 <memcpy>:
 800c1e4:	b510      	push	{r4, lr}
 800c1e6:	1e43      	subs	r3, r0, #1
 800c1e8:	440a      	add	r2, r1
 800c1ea:	4291      	cmp	r1, r2
 800c1ec:	d100      	bne.n	800c1f0 <memcpy+0xc>
 800c1ee:	bd10      	pop	{r4, pc}
 800c1f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1f8:	e7f7      	b.n	800c1ea <memcpy+0x6>

0800c1fa <memset>:
 800c1fa:	4402      	add	r2, r0
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d100      	bne.n	800c204 <memset+0xa>
 800c202:	4770      	bx	lr
 800c204:	f803 1b01 	strb.w	r1, [r3], #1
 800c208:	e7f9      	b.n	800c1fe <memset+0x4>
	...

0800c20c <siprintf>:
 800c20c:	b40e      	push	{r1, r2, r3}
 800c20e:	b500      	push	{lr}
 800c210:	b09c      	sub	sp, #112	; 0x70
 800c212:	ab1d      	add	r3, sp, #116	; 0x74
 800c214:	9002      	str	r0, [sp, #8]
 800c216:	9006      	str	r0, [sp, #24]
 800c218:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c21c:	4809      	ldr	r0, [pc, #36]	; (800c244 <siprintf+0x38>)
 800c21e:	9107      	str	r1, [sp, #28]
 800c220:	9104      	str	r1, [sp, #16]
 800c222:	4909      	ldr	r1, [pc, #36]	; (800c248 <siprintf+0x3c>)
 800c224:	f853 2b04 	ldr.w	r2, [r3], #4
 800c228:	9105      	str	r1, [sp, #20]
 800c22a:	6800      	ldr	r0, [r0, #0]
 800c22c:	9301      	str	r3, [sp, #4]
 800c22e:	a902      	add	r1, sp, #8
 800c230:	f000 f866 	bl	800c300 <_svfiprintf_r>
 800c234:	9b02      	ldr	r3, [sp, #8]
 800c236:	2200      	movs	r2, #0
 800c238:	701a      	strb	r2, [r3, #0]
 800c23a:	b01c      	add	sp, #112	; 0x70
 800c23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c240:	b003      	add	sp, #12
 800c242:	4770      	bx	lr
 800c244:	20000084 	.word	0x20000084
 800c248:	ffff0208 	.word	0xffff0208

0800c24c <__ssputs_r>:
 800c24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c250:	688e      	ldr	r6, [r1, #8]
 800c252:	429e      	cmp	r6, r3
 800c254:	4682      	mov	sl, r0
 800c256:	460c      	mov	r4, r1
 800c258:	4690      	mov	r8, r2
 800c25a:	4699      	mov	r9, r3
 800c25c:	d837      	bhi.n	800c2ce <__ssputs_r+0x82>
 800c25e:	898a      	ldrh	r2, [r1, #12]
 800c260:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c264:	d031      	beq.n	800c2ca <__ssputs_r+0x7e>
 800c266:	6825      	ldr	r5, [r4, #0]
 800c268:	6909      	ldr	r1, [r1, #16]
 800c26a:	1a6f      	subs	r7, r5, r1
 800c26c:	6965      	ldr	r5, [r4, #20]
 800c26e:	2302      	movs	r3, #2
 800c270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c274:	fb95 f5f3 	sdiv	r5, r5, r3
 800c278:	f109 0301 	add.w	r3, r9, #1
 800c27c:	443b      	add	r3, r7
 800c27e:	429d      	cmp	r5, r3
 800c280:	bf38      	it	cc
 800c282:	461d      	movcc	r5, r3
 800c284:	0553      	lsls	r3, r2, #21
 800c286:	d530      	bpl.n	800c2ea <__ssputs_r+0x9e>
 800c288:	4629      	mov	r1, r5
 800c28a:	f000 fb21 	bl	800c8d0 <_malloc_r>
 800c28e:	4606      	mov	r6, r0
 800c290:	b950      	cbnz	r0, 800c2a8 <__ssputs_r+0x5c>
 800c292:	230c      	movs	r3, #12
 800c294:	f8ca 3000 	str.w	r3, [sl]
 800c298:	89a3      	ldrh	r3, [r4, #12]
 800c29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c29e:	81a3      	strh	r3, [r4, #12]
 800c2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a8:	463a      	mov	r2, r7
 800c2aa:	6921      	ldr	r1, [r4, #16]
 800c2ac:	f7ff ff9a 	bl	800c1e4 <memcpy>
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2ba:	81a3      	strh	r3, [r4, #12]
 800c2bc:	6126      	str	r6, [r4, #16]
 800c2be:	6165      	str	r5, [r4, #20]
 800c2c0:	443e      	add	r6, r7
 800c2c2:	1bed      	subs	r5, r5, r7
 800c2c4:	6026      	str	r6, [r4, #0]
 800c2c6:	60a5      	str	r5, [r4, #8]
 800c2c8:	464e      	mov	r6, r9
 800c2ca:	454e      	cmp	r6, r9
 800c2cc:	d900      	bls.n	800c2d0 <__ssputs_r+0x84>
 800c2ce:	464e      	mov	r6, r9
 800c2d0:	4632      	mov	r2, r6
 800c2d2:	4641      	mov	r1, r8
 800c2d4:	6820      	ldr	r0, [r4, #0]
 800c2d6:	f000 fa93 	bl	800c800 <memmove>
 800c2da:	68a3      	ldr	r3, [r4, #8]
 800c2dc:	1b9b      	subs	r3, r3, r6
 800c2de:	60a3      	str	r3, [r4, #8]
 800c2e0:	6823      	ldr	r3, [r4, #0]
 800c2e2:	441e      	add	r6, r3
 800c2e4:	6026      	str	r6, [r4, #0]
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	e7dc      	b.n	800c2a4 <__ssputs_r+0x58>
 800c2ea:	462a      	mov	r2, r5
 800c2ec:	f000 fb4a 	bl	800c984 <_realloc_r>
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	d1e2      	bne.n	800c2bc <__ssputs_r+0x70>
 800c2f6:	6921      	ldr	r1, [r4, #16]
 800c2f8:	4650      	mov	r0, sl
 800c2fa:	f000 fa9b 	bl	800c834 <_free_r>
 800c2fe:	e7c8      	b.n	800c292 <__ssputs_r+0x46>

0800c300 <_svfiprintf_r>:
 800c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c304:	461d      	mov	r5, r3
 800c306:	898b      	ldrh	r3, [r1, #12]
 800c308:	061f      	lsls	r7, r3, #24
 800c30a:	b09d      	sub	sp, #116	; 0x74
 800c30c:	4680      	mov	r8, r0
 800c30e:	460c      	mov	r4, r1
 800c310:	4616      	mov	r6, r2
 800c312:	d50f      	bpl.n	800c334 <_svfiprintf_r+0x34>
 800c314:	690b      	ldr	r3, [r1, #16]
 800c316:	b96b      	cbnz	r3, 800c334 <_svfiprintf_r+0x34>
 800c318:	2140      	movs	r1, #64	; 0x40
 800c31a:	f000 fad9 	bl	800c8d0 <_malloc_r>
 800c31e:	6020      	str	r0, [r4, #0]
 800c320:	6120      	str	r0, [r4, #16]
 800c322:	b928      	cbnz	r0, 800c330 <_svfiprintf_r+0x30>
 800c324:	230c      	movs	r3, #12
 800c326:	f8c8 3000 	str.w	r3, [r8]
 800c32a:	f04f 30ff 	mov.w	r0, #4294967295
 800c32e:	e0c8      	b.n	800c4c2 <_svfiprintf_r+0x1c2>
 800c330:	2340      	movs	r3, #64	; 0x40
 800c332:	6163      	str	r3, [r4, #20]
 800c334:	2300      	movs	r3, #0
 800c336:	9309      	str	r3, [sp, #36]	; 0x24
 800c338:	2320      	movs	r3, #32
 800c33a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c33e:	2330      	movs	r3, #48	; 0x30
 800c340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c344:	9503      	str	r5, [sp, #12]
 800c346:	f04f 0b01 	mov.w	fp, #1
 800c34a:	4637      	mov	r7, r6
 800c34c:	463d      	mov	r5, r7
 800c34e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c352:	b10b      	cbz	r3, 800c358 <_svfiprintf_r+0x58>
 800c354:	2b25      	cmp	r3, #37	; 0x25
 800c356:	d13e      	bne.n	800c3d6 <_svfiprintf_r+0xd6>
 800c358:	ebb7 0a06 	subs.w	sl, r7, r6
 800c35c:	d00b      	beq.n	800c376 <_svfiprintf_r+0x76>
 800c35e:	4653      	mov	r3, sl
 800c360:	4632      	mov	r2, r6
 800c362:	4621      	mov	r1, r4
 800c364:	4640      	mov	r0, r8
 800c366:	f7ff ff71 	bl	800c24c <__ssputs_r>
 800c36a:	3001      	adds	r0, #1
 800c36c:	f000 80a4 	beq.w	800c4b8 <_svfiprintf_r+0x1b8>
 800c370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c372:	4453      	add	r3, sl
 800c374:	9309      	str	r3, [sp, #36]	; 0x24
 800c376:	783b      	ldrb	r3, [r7, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f000 809d 	beq.w	800c4b8 <_svfiprintf_r+0x1b8>
 800c37e:	2300      	movs	r3, #0
 800c380:	f04f 32ff 	mov.w	r2, #4294967295
 800c384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c388:	9304      	str	r3, [sp, #16]
 800c38a:	9307      	str	r3, [sp, #28]
 800c38c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c390:	931a      	str	r3, [sp, #104]	; 0x68
 800c392:	462f      	mov	r7, r5
 800c394:	2205      	movs	r2, #5
 800c396:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c39a:	4850      	ldr	r0, [pc, #320]	; (800c4dc <_svfiprintf_r+0x1dc>)
 800c39c:	f7f3 ff50 	bl	8000240 <memchr>
 800c3a0:	9b04      	ldr	r3, [sp, #16]
 800c3a2:	b9d0      	cbnz	r0, 800c3da <_svfiprintf_r+0xda>
 800c3a4:	06d9      	lsls	r1, r3, #27
 800c3a6:	bf44      	itt	mi
 800c3a8:	2220      	movmi	r2, #32
 800c3aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c3ae:	071a      	lsls	r2, r3, #28
 800c3b0:	bf44      	itt	mi
 800c3b2:	222b      	movmi	r2, #43	; 0x2b
 800c3b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c3b8:	782a      	ldrb	r2, [r5, #0]
 800c3ba:	2a2a      	cmp	r2, #42	; 0x2a
 800c3bc:	d015      	beq.n	800c3ea <_svfiprintf_r+0xea>
 800c3be:	9a07      	ldr	r2, [sp, #28]
 800c3c0:	462f      	mov	r7, r5
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	250a      	movs	r5, #10
 800c3c6:	4639      	mov	r1, r7
 800c3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3cc:	3b30      	subs	r3, #48	; 0x30
 800c3ce:	2b09      	cmp	r3, #9
 800c3d0:	d94d      	bls.n	800c46e <_svfiprintf_r+0x16e>
 800c3d2:	b1b8      	cbz	r0, 800c404 <_svfiprintf_r+0x104>
 800c3d4:	e00f      	b.n	800c3f6 <_svfiprintf_r+0xf6>
 800c3d6:	462f      	mov	r7, r5
 800c3d8:	e7b8      	b.n	800c34c <_svfiprintf_r+0x4c>
 800c3da:	4a40      	ldr	r2, [pc, #256]	; (800c4dc <_svfiprintf_r+0x1dc>)
 800c3dc:	1a80      	subs	r0, r0, r2
 800c3de:	fa0b f000 	lsl.w	r0, fp, r0
 800c3e2:	4318      	orrs	r0, r3
 800c3e4:	9004      	str	r0, [sp, #16]
 800c3e6:	463d      	mov	r5, r7
 800c3e8:	e7d3      	b.n	800c392 <_svfiprintf_r+0x92>
 800c3ea:	9a03      	ldr	r2, [sp, #12]
 800c3ec:	1d11      	adds	r1, r2, #4
 800c3ee:	6812      	ldr	r2, [r2, #0]
 800c3f0:	9103      	str	r1, [sp, #12]
 800c3f2:	2a00      	cmp	r2, #0
 800c3f4:	db01      	blt.n	800c3fa <_svfiprintf_r+0xfa>
 800c3f6:	9207      	str	r2, [sp, #28]
 800c3f8:	e004      	b.n	800c404 <_svfiprintf_r+0x104>
 800c3fa:	4252      	negs	r2, r2
 800c3fc:	f043 0302 	orr.w	r3, r3, #2
 800c400:	9207      	str	r2, [sp, #28]
 800c402:	9304      	str	r3, [sp, #16]
 800c404:	783b      	ldrb	r3, [r7, #0]
 800c406:	2b2e      	cmp	r3, #46	; 0x2e
 800c408:	d10c      	bne.n	800c424 <_svfiprintf_r+0x124>
 800c40a:	787b      	ldrb	r3, [r7, #1]
 800c40c:	2b2a      	cmp	r3, #42	; 0x2a
 800c40e:	d133      	bne.n	800c478 <_svfiprintf_r+0x178>
 800c410:	9b03      	ldr	r3, [sp, #12]
 800c412:	1d1a      	adds	r2, r3, #4
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	9203      	str	r2, [sp, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	bfb8      	it	lt
 800c41c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c420:	3702      	adds	r7, #2
 800c422:	9305      	str	r3, [sp, #20]
 800c424:	4d2e      	ldr	r5, [pc, #184]	; (800c4e0 <_svfiprintf_r+0x1e0>)
 800c426:	7839      	ldrb	r1, [r7, #0]
 800c428:	2203      	movs	r2, #3
 800c42a:	4628      	mov	r0, r5
 800c42c:	f7f3 ff08 	bl	8000240 <memchr>
 800c430:	b138      	cbz	r0, 800c442 <_svfiprintf_r+0x142>
 800c432:	2340      	movs	r3, #64	; 0x40
 800c434:	1b40      	subs	r0, r0, r5
 800c436:	fa03 f000 	lsl.w	r0, r3, r0
 800c43a:	9b04      	ldr	r3, [sp, #16]
 800c43c:	4303      	orrs	r3, r0
 800c43e:	3701      	adds	r7, #1
 800c440:	9304      	str	r3, [sp, #16]
 800c442:	7839      	ldrb	r1, [r7, #0]
 800c444:	4827      	ldr	r0, [pc, #156]	; (800c4e4 <_svfiprintf_r+0x1e4>)
 800c446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c44a:	2206      	movs	r2, #6
 800c44c:	1c7e      	adds	r6, r7, #1
 800c44e:	f7f3 fef7 	bl	8000240 <memchr>
 800c452:	2800      	cmp	r0, #0
 800c454:	d038      	beq.n	800c4c8 <_svfiprintf_r+0x1c8>
 800c456:	4b24      	ldr	r3, [pc, #144]	; (800c4e8 <_svfiprintf_r+0x1e8>)
 800c458:	bb13      	cbnz	r3, 800c4a0 <_svfiprintf_r+0x1a0>
 800c45a:	9b03      	ldr	r3, [sp, #12]
 800c45c:	3307      	adds	r3, #7
 800c45e:	f023 0307 	bic.w	r3, r3, #7
 800c462:	3308      	adds	r3, #8
 800c464:	9303      	str	r3, [sp, #12]
 800c466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c468:	444b      	add	r3, r9
 800c46a:	9309      	str	r3, [sp, #36]	; 0x24
 800c46c:	e76d      	b.n	800c34a <_svfiprintf_r+0x4a>
 800c46e:	fb05 3202 	mla	r2, r5, r2, r3
 800c472:	2001      	movs	r0, #1
 800c474:	460f      	mov	r7, r1
 800c476:	e7a6      	b.n	800c3c6 <_svfiprintf_r+0xc6>
 800c478:	2300      	movs	r3, #0
 800c47a:	3701      	adds	r7, #1
 800c47c:	9305      	str	r3, [sp, #20]
 800c47e:	4619      	mov	r1, r3
 800c480:	250a      	movs	r5, #10
 800c482:	4638      	mov	r0, r7
 800c484:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c488:	3a30      	subs	r2, #48	; 0x30
 800c48a:	2a09      	cmp	r2, #9
 800c48c:	d903      	bls.n	800c496 <_svfiprintf_r+0x196>
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d0c8      	beq.n	800c424 <_svfiprintf_r+0x124>
 800c492:	9105      	str	r1, [sp, #20]
 800c494:	e7c6      	b.n	800c424 <_svfiprintf_r+0x124>
 800c496:	fb05 2101 	mla	r1, r5, r1, r2
 800c49a:	2301      	movs	r3, #1
 800c49c:	4607      	mov	r7, r0
 800c49e:	e7f0      	b.n	800c482 <_svfiprintf_r+0x182>
 800c4a0:	ab03      	add	r3, sp, #12
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	4622      	mov	r2, r4
 800c4a6:	4b11      	ldr	r3, [pc, #68]	; (800c4ec <_svfiprintf_r+0x1ec>)
 800c4a8:	a904      	add	r1, sp, #16
 800c4aa:	4640      	mov	r0, r8
 800c4ac:	f3af 8000 	nop.w
 800c4b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c4b4:	4681      	mov	r9, r0
 800c4b6:	d1d6      	bne.n	800c466 <_svfiprintf_r+0x166>
 800c4b8:	89a3      	ldrh	r3, [r4, #12]
 800c4ba:	065b      	lsls	r3, r3, #25
 800c4bc:	f53f af35 	bmi.w	800c32a <_svfiprintf_r+0x2a>
 800c4c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4c2:	b01d      	add	sp, #116	; 0x74
 800c4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c8:	ab03      	add	r3, sp, #12
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	4622      	mov	r2, r4
 800c4ce:	4b07      	ldr	r3, [pc, #28]	; (800c4ec <_svfiprintf_r+0x1ec>)
 800c4d0:	a904      	add	r1, sp, #16
 800c4d2:	4640      	mov	r0, r8
 800c4d4:	f000 f882 	bl	800c5dc <_printf_i>
 800c4d8:	e7ea      	b.n	800c4b0 <_svfiprintf_r+0x1b0>
 800c4da:	bf00      	nop
 800c4dc:	0800fdc4 	.word	0x0800fdc4
 800c4e0:	0800fdca 	.word	0x0800fdca
 800c4e4:	0800fdce 	.word	0x0800fdce
 800c4e8:	00000000 	.word	0x00000000
 800c4ec:	0800c24d 	.word	0x0800c24d

0800c4f0 <_printf_common>:
 800c4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f4:	4691      	mov	r9, r2
 800c4f6:	461f      	mov	r7, r3
 800c4f8:	688a      	ldr	r2, [r1, #8]
 800c4fa:	690b      	ldr	r3, [r1, #16]
 800c4fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c500:	4293      	cmp	r3, r2
 800c502:	bfb8      	it	lt
 800c504:	4613      	movlt	r3, r2
 800c506:	f8c9 3000 	str.w	r3, [r9]
 800c50a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c50e:	4606      	mov	r6, r0
 800c510:	460c      	mov	r4, r1
 800c512:	b112      	cbz	r2, 800c51a <_printf_common+0x2a>
 800c514:	3301      	adds	r3, #1
 800c516:	f8c9 3000 	str.w	r3, [r9]
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	0699      	lsls	r1, r3, #26
 800c51e:	bf42      	ittt	mi
 800c520:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c524:	3302      	addmi	r3, #2
 800c526:	f8c9 3000 	strmi.w	r3, [r9]
 800c52a:	6825      	ldr	r5, [r4, #0]
 800c52c:	f015 0506 	ands.w	r5, r5, #6
 800c530:	d107      	bne.n	800c542 <_printf_common+0x52>
 800c532:	f104 0a19 	add.w	sl, r4, #25
 800c536:	68e3      	ldr	r3, [r4, #12]
 800c538:	f8d9 2000 	ldr.w	r2, [r9]
 800c53c:	1a9b      	subs	r3, r3, r2
 800c53e:	42ab      	cmp	r3, r5
 800c540:	dc28      	bgt.n	800c594 <_printf_common+0xa4>
 800c542:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c546:	6822      	ldr	r2, [r4, #0]
 800c548:	3300      	adds	r3, #0
 800c54a:	bf18      	it	ne
 800c54c:	2301      	movne	r3, #1
 800c54e:	0692      	lsls	r2, r2, #26
 800c550:	d42d      	bmi.n	800c5ae <_printf_common+0xbe>
 800c552:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c556:	4639      	mov	r1, r7
 800c558:	4630      	mov	r0, r6
 800c55a:	47c0      	blx	r8
 800c55c:	3001      	adds	r0, #1
 800c55e:	d020      	beq.n	800c5a2 <_printf_common+0xb2>
 800c560:	6823      	ldr	r3, [r4, #0]
 800c562:	68e5      	ldr	r5, [r4, #12]
 800c564:	f8d9 2000 	ldr.w	r2, [r9]
 800c568:	f003 0306 	and.w	r3, r3, #6
 800c56c:	2b04      	cmp	r3, #4
 800c56e:	bf08      	it	eq
 800c570:	1aad      	subeq	r5, r5, r2
 800c572:	68a3      	ldr	r3, [r4, #8]
 800c574:	6922      	ldr	r2, [r4, #16]
 800c576:	bf0c      	ite	eq
 800c578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c57c:	2500      	movne	r5, #0
 800c57e:	4293      	cmp	r3, r2
 800c580:	bfc4      	itt	gt
 800c582:	1a9b      	subgt	r3, r3, r2
 800c584:	18ed      	addgt	r5, r5, r3
 800c586:	f04f 0900 	mov.w	r9, #0
 800c58a:	341a      	adds	r4, #26
 800c58c:	454d      	cmp	r5, r9
 800c58e:	d11a      	bne.n	800c5c6 <_printf_common+0xd6>
 800c590:	2000      	movs	r0, #0
 800c592:	e008      	b.n	800c5a6 <_printf_common+0xb6>
 800c594:	2301      	movs	r3, #1
 800c596:	4652      	mov	r2, sl
 800c598:	4639      	mov	r1, r7
 800c59a:	4630      	mov	r0, r6
 800c59c:	47c0      	blx	r8
 800c59e:	3001      	adds	r0, #1
 800c5a0:	d103      	bne.n	800c5aa <_printf_common+0xba>
 800c5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5aa:	3501      	adds	r5, #1
 800c5ac:	e7c3      	b.n	800c536 <_printf_common+0x46>
 800c5ae:	18e1      	adds	r1, r4, r3
 800c5b0:	1c5a      	adds	r2, r3, #1
 800c5b2:	2030      	movs	r0, #48	; 0x30
 800c5b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c5b8:	4422      	add	r2, r4
 800c5ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5c2:	3302      	adds	r3, #2
 800c5c4:	e7c5      	b.n	800c552 <_printf_common+0x62>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	4622      	mov	r2, r4
 800c5ca:	4639      	mov	r1, r7
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	47c0      	blx	r8
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	d0e6      	beq.n	800c5a2 <_printf_common+0xb2>
 800c5d4:	f109 0901 	add.w	r9, r9, #1
 800c5d8:	e7d8      	b.n	800c58c <_printf_common+0x9c>
	...

0800c5dc <_printf_i>:
 800c5dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c5e4:	460c      	mov	r4, r1
 800c5e6:	7e09      	ldrb	r1, [r1, #24]
 800c5e8:	b085      	sub	sp, #20
 800c5ea:	296e      	cmp	r1, #110	; 0x6e
 800c5ec:	4617      	mov	r7, r2
 800c5ee:	4606      	mov	r6, r0
 800c5f0:	4698      	mov	r8, r3
 800c5f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5f4:	f000 80b3 	beq.w	800c75e <_printf_i+0x182>
 800c5f8:	d822      	bhi.n	800c640 <_printf_i+0x64>
 800c5fa:	2963      	cmp	r1, #99	; 0x63
 800c5fc:	d036      	beq.n	800c66c <_printf_i+0x90>
 800c5fe:	d80a      	bhi.n	800c616 <_printf_i+0x3a>
 800c600:	2900      	cmp	r1, #0
 800c602:	f000 80b9 	beq.w	800c778 <_printf_i+0x19c>
 800c606:	2958      	cmp	r1, #88	; 0x58
 800c608:	f000 8083 	beq.w	800c712 <_printf_i+0x136>
 800c60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c610:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c614:	e032      	b.n	800c67c <_printf_i+0xa0>
 800c616:	2964      	cmp	r1, #100	; 0x64
 800c618:	d001      	beq.n	800c61e <_printf_i+0x42>
 800c61a:	2969      	cmp	r1, #105	; 0x69
 800c61c:	d1f6      	bne.n	800c60c <_printf_i+0x30>
 800c61e:	6820      	ldr	r0, [r4, #0]
 800c620:	6813      	ldr	r3, [r2, #0]
 800c622:	0605      	lsls	r5, r0, #24
 800c624:	f103 0104 	add.w	r1, r3, #4
 800c628:	d52a      	bpl.n	800c680 <_printf_i+0xa4>
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	6011      	str	r1, [r2, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	da03      	bge.n	800c63a <_printf_i+0x5e>
 800c632:	222d      	movs	r2, #45	; 0x2d
 800c634:	425b      	negs	r3, r3
 800c636:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c63a:	486f      	ldr	r0, [pc, #444]	; (800c7f8 <_printf_i+0x21c>)
 800c63c:	220a      	movs	r2, #10
 800c63e:	e039      	b.n	800c6b4 <_printf_i+0xd8>
 800c640:	2973      	cmp	r1, #115	; 0x73
 800c642:	f000 809d 	beq.w	800c780 <_printf_i+0x1a4>
 800c646:	d808      	bhi.n	800c65a <_printf_i+0x7e>
 800c648:	296f      	cmp	r1, #111	; 0x6f
 800c64a:	d020      	beq.n	800c68e <_printf_i+0xb2>
 800c64c:	2970      	cmp	r1, #112	; 0x70
 800c64e:	d1dd      	bne.n	800c60c <_printf_i+0x30>
 800c650:	6823      	ldr	r3, [r4, #0]
 800c652:	f043 0320 	orr.w	r3, r3, #32
 800c656:	6023      	str	r3, [r4, #0]
 800c658:	e003      	b.n	800c662 <_printf_i+0x86>
 800c65a:	2975      	cmp	r1, #117	; 0x75
 800c65c:	d017      	beq.n	800c68e <_printf_i+0xb2>
 800c65e:	2978      	cmp	r1, #120	; 0x78
 800c660:	d1d4      	bne.n	800c60c <_printf_i+0x30>
 800c662:	2378      	movs	r3, #120	; 0x78
 800c664:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c668:	4864      	ldr	r0, [pc, #400]	; (800c7fc <_printf_i+0x220>)
 800c66a:	e055      	b.n	800c718 <_printf_i+0x13c>
 800c66c:	6813      	ldr	r3, [r2, #0]
 800c66e:	1d19      	adds	r1, r3, #4
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	6011      	str	r1, [r2, #0]
 800c674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c67c:	2301      	movs	r3, #1
 800c67e:	e08c      	b.n	800c79a <_printf_i+0x1be>
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6011      	str	r1, [r2, #0]
 800c684:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c688:	bf18      	it	ne
 800c68a:	b21b      	sxthne	r3, r3
 800c68c:	e7cf      	b.n	800c62e <_printf_i+0x52>
 800c68e:	6813      	ldr	r3, [r2, #0]
 800c690:	6825      	ldr	r5, [r4, #0]
 800c692:	1d18      	adds	r0, r3, #4
 800c694:	6010      	str	r0, [r2, #0]
 800c696:	0628      	lsls	r0, r5, #24
 800c698:	d501      	bpl.n	800c69e <_printf_i+0xc2>
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	e002      	b.n	800c6a4 <_printf_i+0xc8>
 800c69e:	0668      	lsls	r0, r5, #25
 800c6a0:	d5fb      	bpl.n	800c69a <_printf_i+0xbe>
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	4854      	ldr	r0, [pc, #336]	; (800c7f8 <_printf_i+0x21c>)
 800c6a6:	296f      	cmp	r1, #111	; 0x6f
 800c6a8:	bf14      	ite	ne
 800c6aa:	220a      	movne	r2, #10
 800c6ac:	2208      	moveq	r2, #8
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6b4:	6865      	ldr	r5, [r4, #4]
 800c6b6:	60a5      	str	r5, [r4, #8]
 800c6b8:	2d00      	cmp	r5, #0
 800c6ba:	f2c0 8095 	blt.w	800c7e8 <_printf_i+0x20c>
 800c6be:	6821      	ldr	r1, [r4, #0]
 800c6c0:	f021 0104 	bic.w	r1, r1, #4
 800c6c4:	6021      	str	r1, [r4, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d13d      	bne.n	800c746 <_printf_i+0x16a>
 800c6ca:	2d00      	cmp	r5, #0
 800c6cc:	f040 808e 	bne.w	800c7ec <_printf_i+0x210>
 800c6d0:	4665      	mov	r5, ip
 800c6d2:	2a08      	cmp	r2, #8
 800c6d4:	d10b      	bne.n	800c6ee <_printf_i+0x112>
 800c6d6:	6823      	ldr	r3, [r4, #0]
 800c6d8:	07db      	lsls	r3, r3, #31
 800c6da:	d508      	bpl.n	800c6ee <_printf_i+0x112>
 800c6dc:	6923      	ldr	r3, [r4, #16]
 800c6de:	6862      	ldr	r2, [r4, #4]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	bfde      	ittt	le
 800c6e4:	2330      	movle	r3, #48	; 0x30
 800c6e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c6ee:	ebac 0305 	sub.w	r3, ip, r5
 800c6f2:	6123      	str	r3, [r4, #16]
 800c6f4:	f8cd 8000 	str.w	r8, [sp]
 800c6f8:	463b      	mov	r3, r7
 800c6fa:	aa03      	add	r2, sp, #12
 800c6fc:	4621      	mov	r1, r4
 800c6fe:	4630      	mov	r0, r6
 800c700:	f7ff fef6 	bl	800c4f0 <_printf_common>
 800c704:	3001      	adds	r0, #1
 800c706:	d14d      	bne.n	800c7a4 <_printf_i+0x1c8>
 800c708:	f04f 30ff 	mov.w	r0, #4294967295
 800c70c:	b005      	add	sp, #20
 800c70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c712:	4839      	ldr	r0, [pc, #228]	; (800c7f8 <_printf_i+0x21c>)
 800c714:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c718:	6813      	ldr	r3, [r2, #0]
 800c71a:	6821      	ldr	r1, [r4, #0]
 800c71c:	1d1d      	adds	r5, r3, #4
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6015      	str	r5, [r2, #0]
 800c722:	060a      	lsls	r2, r1, #24
 800c724:	d50b      	bpl.n	800c73e <_printf_i+0x162>
 800c726:	07ca      	lsls	r2, r1, #31
 800c728:	bf44      	itt	mi
 800c72a:	f041 0120 	orrmi.w	r1, r1, #32
 800c72e:	6021      	strmi	r1, [r4, #0]
 800c730:	b91b      	cbnz	r3, 800c73a <_printf_i+0x15e>
 800c732:	6822      	ldr	r2, [r4, #0]
 800c734:	f022 0220 	bic.w	r2, r2, #32
 800c738:	6022      	str	r2, [r4, #0]
 800c73a:	2210      	movs	r2, #16
 800c73c:	e7b7      	b.n	800c6ae <_printf_i+0xd2>
 800c73e:	064d      	lsls	r5, r1, #25
 800c740:	bf48      	it	mi
 800c742:	b29b      	uxthmi	r3, r3
 800c744:	e7ef      	b.n	800c726 <_printf_i+0x14a>
 800c746:	4665      	mov	r5, ip
 800c748:	fbb3 f1f2 	udiv	r1, r3, r2
 800c74c:	fb02 3311 	mls	r3, r2, r1, r3
 800c750:	5cc3      	ldrb	r3, [r0, r3]
 800c752:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c756:	460b      	mov	r3, r1
 800c758:	2900      	cmp	r1, #0
 800c75a:	d1f5      	bne.n	800c748 <_printf_i+0x16c>
 800c75c:	e7b9      	b.n	800c6d2 <_printf_i+0xf6>
 800c75e:	6813      	ldr	r3, [r2, #0]
 800c760:	6825      	ldr	r5, [r4, #0]
 800c762:	6961      	ldr	r1, [r4, #20]
 800c764:	1d18      	adds	r0, r3, #4
 800c766:	6010      	str	r0, [r2, #0]
 800c768:	0628      	lsls	r0, r5, #24
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	d501      	bpl.n	800c772 <_printf_i+0x196>
 800c76e:	6019      	str	r1, [r3, #0]
 800c770:	e002      	b.n	800c778 <_printf_i+0x19c>
 800c772:	066a      	lsls	r2, r5, #25
 800c774:	d5fb      	bpl.n	800c76e <_printf_i+0x192>
 800c776:	8019      	strh	r1, [r3, #0]
 800c778:	2300      	movs	r3, #0
 800c77a:	6123      	str	r3, [r4, #16]
 800c77c:	4665      	mov	r5, ip
 800c77e:	e7b9      	b.n	800c6f4 <_printf_i+0x118>
 800c780:	6813      	ldr	r3, [r2, #0]
 800c782:	1d19      	adds	r1, r3, #4
 800c784:	6011      	str	r1, [r2, #0]
 800c786:	681d      	ldr	r5, [r3, #0]
 800c788:	6862      	ldr	r2, [r4, #4]
 800c78a:	2100      	movs	r1, #0
 800c78c:	4628      	mov	r0, r5
 800c78e:	f7f3 fd57 	bl	8000240 <memchr>
 800c792:	b108      	cbz	r0, 800c798 <_printf_i+0x1bc>
 800c794:	1b40      	subs	r0, r0, r5
 800c796:	6060      	str	r0, [r4, #4]
 800c798:	6863      	ldr	r3, [r4, #4]
 800c79a:	6123      	str	r3, [r4, #16]
 800c79c:	2300      	movs	r3, #0
 800c79e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7a2:	e7a7      	b.n	800c6f4 <_printf_i+0x118>
 800c7a4:	6923      	ldr	r3, [r4, #16]
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	4639      	mov	r1, r7
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	47c0      	blx	r8
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	d0aa      	beq.n	800c708 <_printf_i+0x12c>
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	079b      	lsls	r3, r3, #30
 800c7b6:	d413      	bmi.n	800c7e0 <_printf_i+0x204>
 800c7b8:	68e0      	ldr	r0, [r4, #12]
 800c7ba:	9b03      	ldr	r3, [sp, #12]
 800c7bc:	4298      	cmp	r0, r3
 800c7be:	bfb8      	it	lt
 800c7c0:	4618      	movlt	r0, r3
 800c7c2:	e7a3      	b.n	800c70c <_printf_i+0x130>
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	464a      	mov	r2, r9
 800c7c8:	4639      	mov	r1, r7
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	47c0      	blx	r8
 800c7ce:	3001      	adds	r0, #1
 800c7d0:	d09a      	beq.n	800c708 <_printf_i+0x12c>
 800c7d2:	3501      	adds	r5, #1
 800c7d4:	68e3      	ldr	r3, [r4, #12]
 800c7d6:	9a03      	ldr	r2, [sp, #12]
 800c7d8:	1a9b      	subs	r3, r3, r2
 800c7da:	42ab      	cmp	r3, r5
 800c7dc:	dcf2      	bgt.n	800c7c4 <_printf_i+0x1e8>
 800c7de:	e7eb      	b.n	800c7b8 <_printf_i+0x1dc>
 800c7e0:	2500      	movs	r5, #0
 800c7e2:	f104 0919 	add.w	r9, r4, #25
 800c7e6:	e7f5      	b.n	800c7d4 <_printf_i+0x1f8>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1ac      	bne.n	800c746 <_printf_i+0x16a>
 800c7ec:	7803      	ldrb	r3, [r0, #0]
 800c7ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7f6:	e76c      	b.n	800c6d2 <_printf_i+0xf6>
 800c7f8:	0800fdd5 	.word	0x0800fdd5
 800c7fc:	0800fde6 	.word	0x0800fde6

0800c800 <memmove>:
 800c800:	4288      	cmp	r0, r1
 800c802:	b510      	push	{r4, lr}
 800c804:	eb01 0302 	add.w	r3, r1, r2
 800c808:	d807      	bhi.n	800c81a <memmove+0x1a>
 800c80a:	1e42      	subs	r2, r0, #1
 800c80c:	4299      	cmp	r1, r3
 800c80e:	d00a      	beq.n	800c826 <memmove+0x26>
 800c810:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c814:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c818:	e7f8      	b.n	800c80c <memmove+0xc>
 800c81a:	4283      	cmp	r3, r0
 800c81c:	d9f5      	bls.n	800c80a <memmove+0xa>
 800c81e:	1881      	adds	r1, r0, r2
 800c820:	1ad2      	subs	r2, r2, r3
 800c822:	42d3      	cmn	r3, r2
 800c824:	d100      	bne.n	800c828 <memmove+0x28>
 800c826:	bd10      	pop	{r4, pc}
 800c828:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c82c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c830:	e7f7      	b.n	800c822 <memmove+0x22>
	...

0800c834 <_free_r>:
 800c834:	b538      	push	{r3, r4, r5, lr}
 800c836:	4605      	mov	r5, r0
 800c838:	2900      	cmp	r1, #0
 800c83a:	d045      	beq.n	800c8c8 <_free_r+0x94>
 800c83c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c840:	1f0c      	subs	r4, r1, #4
 800c842:	2b00      	cmp	r3, #0
 800c844:	bfb8      	it	lt
 800c846:	18e4      	addlt	r4, r4, r3
 800c848:	f000 f8d2 	bl	800c9f0 <__malloc_lock>
 800c84c:	4a1f      	ldr	r2, [pc, #124]	; (800c8cc <_free_r+0x98>)
 800c84e:	6813      	ldr	r3, [r2, #0]
 800c850:	4610      	mov	r0, r2
 800c852:	b933      	cbnz	r3, 800c862 <_free_r+0x2e>
 800c854:	6063      	str	r3, [r4, #4]
 800c856:	6014      	str	r4, [r2, #0]
 800c858:	4628      	mov	r0, r5
 800c85a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c85e:	f000 b8c8 	b.w	800c9f2 <__malloc_unlock>
 800c862:	42a3      	cmp	r3, r4
 800c864:	d90c      	bls.n	800c880 <_free_r+0x4c>
 800c866:	6821      	ldr	r1, [r4, #0]
 800c868:	1862      	adds	r2, r4, r1
 800c86a:	4293      	cmp	r3, r2
 800c86c:	bf04      	itt	eq
 800c86e:	681a      	ldreq	r2, [r3, #0]
 800c870:	685b      	ldreq	r3, [r3, #4]
 800c872:	6063      	str	r3, [r4, #4]
 800c874:	bf04      	itt	eq
 800c876:	1852      	addeq	r2, r2, r1
 800c878:	6022      	streq	r2, [r4, #0]
 800c87a:	6004      	str	r4, [r0, #0]
 800c87c:	e7ec      	b.n	800c858 <_free_r+0x24>
 800c87e:	4613      	mov	r3, r2
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	b10a      	cbz	r2, 800c888 <_free_r+0x54>
 800c884:	42a2      	cmp	r2, r4
 800c886:	d9fa      	bls.n	800c87e <_free_r+0x4a>
 800c888:	6819      	ldr	r1, [r3, #0]
 800c88a:	1858      	adds	r0, r3, r1
 800c88c:	42a0      	cmp	r0, r4
 800c88e:	d10b      	bne.n	800c8a8 <_free_r+0x74>
 800c890:	6820      	ldr	r0, [r4, #0]
 800c892:	4401      	add	r1, r0
 800c894:	1858      	adds	r0, r3, r1
 800c896:	4282      	cmp	r2, r0
 800c898:	6019      	str	r1, [r3, #0]
 800c89a:	d1dd      	bne.n	800c858 <_free_r+0x24>
 800c89c:	6810      	ldr	r0, [r2, #0]
 800c89e:	6852      	ldr	r2, [r2, #4]
 800c8a0:	605a      	str	r2, [r3, #4]
 800c8a2:	4401      	add	r1, r0
 800c8a4:	6019      	str	r1, [r3, #0]
 800c8a6:	e7d7      	b.n	800c858 <_free_r+0x24>
 800c8a8:	d902      	bls.n	800c8b0 <_free_r+0x7c>
 800c8aa:	230c      	movs	r3, #12
 800c8ac:	602b      	str	r3, [r5, #0]
 800c8ae:	e7d3      	b.n	800c858 <_free_r+0x24>
 800c8b0:	6820      	ldr	r0, [r4, #0]
 800c8b2:	1821      	adds	r1, r4, r0
 800c8b4:	428a      	cmp	r2, r1
 800c8b6:	bf04      	itt	eq
 800c8b8:	6811      	ldreq	r1, [r2, #0]
 800c8ba:	6852      	ldreq	r2, [r2, #4]
 800c8bc:	6062      	str	r2, [r4, #4]
 800c8be:	bf04      	itt	eq
 800c8c0:	1809      	addeq	r1, r1, r0
 800c8c2:	6021      	streq	r1, [r4, #0]
 800c8c4:	605c      	str	r4, [r3, #4]
 800c8c6:	e7c7      	b.n	800c858 <_free_r+0x24>
 800c8c8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ca:	bf00      	nop
 800c8cc:	20000380 	.word	0x20000380

0800c8d0 <_malloc_r>:
 800c8d0:	b570      	push	{r4, r5, r6, lr}
 800c8d2:	1ccd      	adds	r5, r1, #3
 800c8d4:	f025 0503 	bic.w	r5, r5, #3
 800c8d8:	3508      	adds	r5, #8
 800c8da:	2d0c      	cmp	r5, #12
 800c8dc:	bf38      	it	cc
 800c8de:	250c      	movcc	r5, #12
 800c8e0:	2d00      	cmp	r5, #0
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	db01      	blt.n	800c8ea <_malloc_r+0x1a>
 800c8e6:	42a9      	cmp	r1, r5
 800c8e8:	d903      	bls.n	800c8f2 <_malloc_r+0x22>
 800c8ea:	230c      	movs	r3, #12
 800c8ec:	6033      	str	r3, [r6, #0]
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	bd70      	pop	{r4, r5, r6, pc}
 800c8f2:	f000 f87d 	bl	800c9f0 <__malloc_lock>
 800c8f6:	4a21      	ldr	r2, [pc, #132]	; (800c97c <_malloc_r+0xac>)
 800c8f8:	6814      	ldr	r4, [r2, #0]
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	b991      	cbnz	r1, 800c924 <_malloc_r+0x54>
 800c8fe:	4c20      	ldr	r4, [pc, #128]	; (800c980 <_malloc_r+0xb0>)
 800c900:	6823      	ldr	r3, [r4, #0]
 800c902:	b91b      	cbnz	r3, 800c90c <_malloc_r+0x3c>
 800c904:	4630      	mov	r0, r6
 800c906:	f000 f863 	bl	800c9d0 <_sbrk_r>
 800c90a:	6020      	str	r0, [r4, #0]
 800c90c:	4629      	mov	r1, r5
 800c90e:	4630      	mov	r0, r6
 800c910:	f000 f85e 	bl	800c9d0 <_sbrk_r>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d124      	bne.n	800c962 <_malloc_r+0x92>
 800c918:	230c      	movs	r3, #12
 800c91a:	6033      	str	r3, [r6, #0]
 800c91c:	4630      	mov	r0, r6
 800c91e:	f000 f868 	bl	800c9f2 <__malloc_unlock>
 800c922:	e7e4      	b.n	800c8ee <_malloc_r+0x1e>
 800c924:	680b      	ldr	r3, [r1, #0]
 800c926:	1b5b      	subs	r3, r3, r5
 800c928:	d418      	bmi.n	800c95c <_malloc_r+0x8c>
 800c92a:	2b0b      	cmp	r3, #11
 800c92c:	d90f      	bls.n	800c94e <_malloc_r+0x7e>
 800c92e:	600b      	str	r3, [r1, #0]
 800c930:	50cd      	str	r5, [r1, r3]
 800c932:	18cc      	adds	r4, r1, r3
 800c934:	4630      	mov	r0, r6
 800c936:	f000 f85c 	bl	800c9f2 <__malloc_unlock>
 800c93a:	f104 000b 	add.w	r0, r4, #11
 800c93e:	1d23      	adds	r3, r4, #4
 800c940:	f020 0007 	bic.w	r0, r0, #7
 800c944:	1ac3      	subs	r3, r0, r3
 800c946:	d0d3      	beq.n	800c8f0 <_malloc_r+0x20>
 800c948:	425a      	negs	r2, r3
 800c94a:	50e2      	str	r2, [r4, r3]
 800c94c:	e7d0      	b.n	800c8f0 <_malloc_r+0x20>
 800c94e:	428c      	cmp	r4, r1
 800c950:	684b      	ldr	r3, [r1, #4]
 800c952:	bf16      	itet	ne
 800c954:	6063      	strne	r3, [r4, #4]
 800c956:	6013      	streq	r3, [r2, #0]
 800c958:	460c      	movne	r4, r1
 800c95a:	e7eb      	b.n	800c934 <_malloc_r+0x64>
 800c95c:	460c      	mov	r4, r1
 800c95e:	6849      	ldr	r1, [r1, #4]
 800c960:	e7cc      	b.n	800c8fc <_malloc_r+0x2c>
 800c962:	1cc4      	adds	r4, r0, #3
 800c964:	f024 0403 	bic.w	r4, r4, #3
 800c968:	42a0      	cmp	r0, r4
 800c96a:	d005      	beq.n	800c978 <_malloc_r+0xa8>
 800c96c:	1a21      	subs	r1, r4, r0
 800c96e:	4630      	mov	r0, r6
 800c970:	f000 f82e 	bl	800c9d0 <_sbrk_r>
 800c974:	3001      	adds	r0, #1
 800c976:	d0cf      	beq.n	800c918 <_malloc_r+0x48>
 800c978:	6025      	str	r5, [r4, #0]
 800c97a:	e7db      	b.n	800c934 <_malloc_r+0x64>
 800c97c:	20000380 	.word	0x20000380
 800c980:	20000384 	.word	0x20000384

0800c984 <_realloc_r>:
 800c984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c986:	4607      	mov	r7, r0
 800c988:	4614      	mov	r4, r2
 800c98a:	460e      	mov	r6, r1
 800c98c:	b921      	cbnz	r1, 800c998 <_realloc_r+0x14>
 800c98e:	4611      	mov	r1, r2
 800c990:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c994:	f7ff bf9c 	b.w	800c8d0 <_malloc_r>
 800c998:	b922      	cbnz	r2, 800c9a4 <_realloc_r+0x20>
 800c99a:	f7ff ff4b 	bl	800c834 <_free_r>
 800c99e:	4625      	mov	r5, r4
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9a4:	f000 f826 	bl	800c9f4 <_malloc_usable_size_r>
 800c9a8:	42a0      	cmp	r0, r4
 800c9aa:	d20f      	bcs.n	800c9cc <_realloc_r+0x48>
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	4638      	mov	r0, r7
 800c9b0:	f7ff ff8e 	bl	800c8d0 <_malloc_r>
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d0f2      	beq.n	800c9a0 <_realloc_r+0x1c>
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	4622      	mov	r2, r4
 800c9be:	f7ff fc11 	bl	800c1e4 <memcpy>
 800c9c2:	4631      	mov	r1, r6
 800c9c4:	4638      	mov	r0, r7
 800c9c6:	f7ff ff35 	bl	800c834 <_free_r>
 800c9ca:	e7e9      	b.n	800c9a0 <_realloc_r+0x1c>
 800c9cc:	4635      	mov	r5, r6
 800c9ce:	e7e7      	b.n	800c9a0 <_realloc_r+0x1c>

0800c9d0 <_sbrk_r>:
 800c9d0:	b538      	push	{r3, r4, r5, lr}
 800c9d2:	4c06      	ldr	r4, [pc, #24]	; (800c9ec <_sbrk_r+0x1c>)
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	4605      	mov	r5, r0
 800c9d8:	4608      	mov	r0, r1
 800c9da:	6023      	str	r3, [r4, #0]
 800c9dc:	f7ff fb4c 	bl	800c078 <_sbrk>
 800c9e0:	1c43      	adds	r3, r0, #1
 800c9e2:	d102      	bne.n	800c9ea <_sbrk_r+0x1a>
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	b103      	cbz	r3, 800c9ea <_sbrk_r+0x1a>
 800c9e8:	602b      	str	r3, [r5, #0]
 800c9ea:	bd38      	pop	{r3, r4, r5, pc}
 800c9ec:	20000bf4 	.word	0x20000bf4

0800c9f0 <__malloc_lock>:
 800c9f0:	4770      	bx	lr

0800c9f2 <__malloc_unlock>:
 800c9f2:	4770      	bx	lr

0800c9f4 <_malloc_usable_size_r>:
 800c9f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9f8:	1f18      	subs	r0, r3, #4
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	bfbc      	itt	lt
 800c9fe:	580b      	ldrlt	r3, [r1, r0]
 800ca00:	18c0      	addlt	r0, r0, r3
 800ca02:	4770      	bx	lr

0800ca04 <_init>:
 800ca04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca06:	bf00      	nop
 800ca08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca0a:	bc08      	pop	{r3}
 800ca0c:	469e      	mov	lr, r3
 800ca0e:	4770      	bx	lr

0800ca10 <_fini>:
 800ca10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca12:	bf00      	nop
 800ca14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca16:	bc08      	pop	{r3}
 800ca18:	469e      	mov	lr, r3
 800ca1a:	4770      	bx	lr
